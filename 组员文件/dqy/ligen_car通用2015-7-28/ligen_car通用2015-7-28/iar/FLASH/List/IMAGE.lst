###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        28/Jul/2015  13:28:02
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\app\IMAGE.c
#    Command line =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\app\IMAGE.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\..\..\..\lib\USB\class\
#        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\FLASH\List\IMAGE.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\iar\FLASH\Obj\IMAGE.o
#
###############################################################################

C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-28-3.23封\app\IMAGE.c
      1          #include "sys.h" 
      2          #include "IMAGE.h"
      3          #include "common.h"
      4          void ProcessCrossing();
      5          void SmoothLeftRight(void);
      6          void  GetCrossingMidLine();
      7          //int Find_Endline(row,column);
      8          void CommonRectificate(int data[],unsigned char begin,unsigned char end);
      9          void SCProcessing();
     10          void GetBlackEndParam2();
     11          int FindMidLine_lastisnotmidline(int row,int lastmidline,int lastleft,int lastright);
     12          int FindMidLine_lastismidline(int row,int lastmidline,int lastleft,int lastright);

   \                                 In section .data, align 1
     13          signed char RoadType = -1;								//赛道类型
   \                     RoadType:
   \   00000000   0xFF               DC8 -1

   \                                 In section .bss, align 1
     14          signed char LastRoadType = 0;	
   \                     LastRoadType:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15          char endline;
   \                     endline:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     16          int LCrossingTripPos = 0;
   \                     LCrossingTripPos:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     17          int RCrossingTripPos = 0;
   \                     RCrossingTripPos:
   \   00000000                      DS8 4
     18          //找到十字的跳变点

   \                                 In section .bss, align 1
     19          unsigned char bFoundTripPoint = 0;
   \                     bFoundTripPoint:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
     20          int firstline_l=-1,firstline_r=-1,firstline_m=-1;
   \                     firstline_l:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .data, align 4
   \                     firstline_r:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .data, align 4
   \                     firstline_m:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .bss, align 4
     21          int tiaobian_Left[RowMax]={0},tiaobian_Right[RowMax]={0};
   \                     tiaobian_Left:
   \   00000000                      DS8 400

   \                                 In section .bss, align 4
   \                     tiaobian_Right:
   \   00000000                      DS8 400
     22          //可全速使能

   \                                 In section .bss, align 4
     23          int Endline=0;
   \                     Endline:
   \   00000000                      DS8 4
     24          

   \                                 In section .data, align 1
     25          unsigned char g_BasePos = ColumnMax/2;
   \                     g_BasePos:
   \   00000000   0x2D               DC8 45

   \                                 In section .bss, align 1
     26          unsigned char BanMa_Derict=0,BanMa_Left,BanMa_Right;
   \                     BanMa_Derict:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     BanMa_Left:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     BanMa_Right:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     27          unsigned char ValidLineR[RowMax]={0}; 			//十字道右边行有效标志数组
   \                     ValidLineR:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
     28          unsigned char ValidLineL[RowMax]={0};			//十字道左边行有效标志数组
   \                     ValidLineL:
   \   00000000                      DS8 100

   \                                 In section .bss, align 1
     29          unsigned char NoValidLMax = 0;					//十字交叉道左边连续丢线计数
   \                     NoValidLMax:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     30          unsigned char NoValidRMax = 0;					//十字交叉道右边连续丢线计数
   \                     NoValidRMax:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     31          unsigned char CrossingStable = 0;
   \                     CrossingStable:
   \   00000000                      DS8 1
     32          

   \                                 In section .bss, align 4
     33          int startPos=0,endPos=0,temCount=0,countMax=0,temPos=0;
   \                     startPos:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     endPos:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     temCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     countMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     temPos:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     34          int ProcessFlag=0;
   \                     ProcessFlag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     35          int sfzj=0;
   \                     sfzj:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     36          int ThresholdValue = 130;		//二值化阈值
   \                     ThresholdValue:
   \   00000000   0x00000082         DC32 130

   \                                 In section .data, align 4
     37          int UseStaticFlag = 1;		       // 是否使用静态阈值标志
   \                     UseStaticFlag:
   \   00000000   0x00000001         DC32 1

   \                                 In section .data, align 4
     38          int StaticThreshold = 130;          //二值化静态阀值  
   \                     StaticThreshold:
   \   00000000   0x00000082         DC32 130

   \                                 In section .bss, align 4
     39          int LeftBlack[RowMax];	//左边缘黑线数组					 
   \                     LeftBlack:
   \   00000000                      DS8 400

   \                                 In section .bss, align 4
     40          int RightBlack[RowMax];//右边缘黑线数组					 
   \                     RightBlack:
   \   00000000                      DS8 400

   \                                 In section .bss, align 4
     41          int BlackLineData[RowMax];// 提取黑线值数据
   \                     BlackLineData:
   \   00000000                      DS8 400

   \                                 In section .bss, align 1
     42          unsigned char g_Derict = 0; //方向 正-0 左-1 右-2
   \                     g_Derict:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     43          int BlackEndL = 0;
   \                     BlackEndL:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     44          int BlackEndM = 0;
   \                     BlackEndM:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          int BlackEndR = 0;
   \                     BlackEndR:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     46          int BlackEndMax = 0;
   \                     BlackEndMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     47          int BlackEndLMR = 0;
   \                     BlackEndLMR:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     48          int hx_found_Column=0;
   \                     hx_found_Column:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     49          int hx_find_count_max=0;
   \                     hx_find_count_max:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     50          int RoadMode[RowMax]=0;
   \                     RoadMode:
   \   00000000                      DS8 400

   \                                 In section .bss, align 4
     51          int zaw_mode=0;
   \                     zaw_mode:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     52          int BlackEndA = 0;
   \                     BlackEndA:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     53          int BlackEndB = 0;
   \                     BlackEndB:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     54          int BlackEndC = 0;
   \                     BlackEndC:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     55          int BlackEndD = 0;
   \                     BlackEndD:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     56          int BlackEndE = 0;
   \                     BlackEndE:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     57          int BlackEndF = 0;
   \                     BlackEndF:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     58          int BlackEndG = 0;
   \                     BlackEndG:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     59          int BlackEndColumnMax=1;
   \                     BlackEndColumnMax:
   \   00000000   0x00000001         DC32 1
     60          
     61          

   \                                 In section .bss, align 4
     62          int StableNumbers = 0;
   \                     StableNumbers:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     63          int StableNumbers2 = 0;
   \                     StableNumbers2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     64          int CompensateCount = 0;
   \                     CompensateCount:
   \   00000000                      DS8 4
     65          

   \                                 In section .bss, align 4
     66          int LeftStableNumbers = 0;
   \                     LeftStableNumbers:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     67          int RightStableNumbers = 0;
   \                     RightStableNumbers:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     68          int ValidLineCount = 0;
   \                     ValidLineCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     69          int ValidLineCount1 = 0; //左边缘找到并且右边找到
   \                     ValidLineCount1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     70          int ValidLineCount2 = 0;//左边缘找到或者右边找到
   \                     ValidLineCount2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     71          int P0_X = 0;
   \                     P0_X:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     72          int P0_Y = 0;
   \                     P0_Y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     73          int P1_X = 0;
   \                     P1_X:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     74          int P1_Y = 0;
   \                     P1_Y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     75          int P2_X = 0;
   \                     P2_X:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     76          int P2_Y = 0;
   \                     P2_Y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     77          float Mid_K1 = 0.0;
   \                     Mid_K1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78          float Mid_K2 = 0.0;
   \                     Mid_K2:
   \   00000000                      DS8 4
     79          

   \                                 In section .bss, align 4
     80          int TopE1=0;//中心线上半部分偏差
   \                     TopE1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     81          int TopE2=0;//中心线下半部分偏差
   \                     TopE2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     82          int TopLen1=0;//中心线上半部分偏差
   \                     TopLen1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     83          int TopLen2=0;//中心线上半部分偏差 
   \                     TopLen2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     84          int SubBasePoint = 0;//中心线下半部分距基准点的最大偏差
   \                     SubBasePoint:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     85          int SubBasePointLen = 0;
   \                     SubBasePointLen:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     86          int yxhs=0;//图像有效行数
   \                     yxhs:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     87          int tbs_z=0,tbs_y=0,tbs_all=0;//图像边线跳变数
   \                     tbs_z:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     tbs_y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     tbs_all:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     88          int Excursion = 0;
   \                     Excursion:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     89          int ValidExcursionCount=0;
   \                     ValidExcursionCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     90          char RightWhite=0;
   \                     RightWhite:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     91          char LeftWhite=0;
   \                     LeftWhite:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     92          int midline_fcount=0,midline_fcount_max=0;
   \                     midline_fcount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     midline_fcount_max:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     93          unsigned char BlackRow=0;
   \                     BlackRow:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     94          unsigned char BlackRow1=0;
   \                     BlackRow1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     95          unsigned char WhiteRow=0;
   \                     WhiteRow:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     96          unsigned char WhiteRow1=0;
   \                     WhiteRow1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     97          unsigned char LineType[RowMax] = {0};
   \                     LineType:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
     98          int StoreFlag = 0;
   \                     StoreFlag:
   \   00000000                      DS8 4
     99          signed char TemMidLineData[RowMax];//提取黑线值数据2	

   \                                 In section .bss, align 8
    100          double MidLineVariance = 0.0;
   \                     MidLineVariance:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
    101          int MidLineExcursion = 0;
   \                     MidLineExcursion:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    102          signed char TripPointPos[RowMax];
   \                     TripPointPos:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    103          signed char SubValue[RowMax];
   \                     SubValue:
   \   00000000                      DS8 100

   \                                 In section .text, align 2, keep-with-next
    104          void ImageProcess()
    105          {
   \                     ImageProcess: (+1)
   \   00000000   0xB410             PUSH     {R4}
    106            int i=0,j=0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x2100             MOVS     R1,#+0
    107            unsigned char *p=0;
   \   00000006   0x2200             MOVS     R2,#+0
    108            unsigned char *q=0;
   \   00000008   0x2300             MOVS     R3,#+0
    109            
    110            //使用静态阈值
    111            if(UseStaticFlag)     //UseStaticFlag=0.
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable6
   \   0000000E   0x6824             LDR      R4,[R4, #+0]
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD005             BEQ.N    ??ImageProcess_0
    112            {
    113              ThresholdValue = StaticThreshold;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable6_2
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    114            }
    115            else
    116            {
    117              //使用动态取阈值
    118              
    119            }
    120            
    121            
    122            //对噪点取均值滤波
    123            for (i = 1;i < V_A-1;i++)
   \                     ??ImageProcess_0: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE062             B.N      ??ImageProcess_1
    124            {
    125              for (j = 1;j < H_A-1;j++)
    126              {
    127                if (ImageData[i][j] < 30 || ImageData[i][j] > 220)
   \                     ??ImageProcess_2: (+1)
   \   00000024   0x.... 0x....      LDR.W    R2,??DataTable6_3
   \   00000028   0x235A             MOVS     R3,#+90
   \   0000002A   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000002E   0x5C8A             LDRB     R2,[R1, R2]
   \   00000030   0x3A1E             SUBS     R2,R2,#+30
   \   00000032   0x2ABF             CMP      R2,#+191
   \   00000034   0xD355             BCC.N    ??ImageProcess_3
    128                {
    129                  ImageData[i][j] = (ImageData[i-1][j-1]+ImageData[i-1][j]+ImageData[i-1][j+1]+ImageData[i][j-1]+ImageData[i][j+1]+ImageData[i+1][j-1]+ImageData[i+1][j]+ImageData[i+1][j+1])/8;
   \   00000036   0x.... 0x....      LDR.W    R2,??DataTable6_3
   \   0000003A   0x235A             MOVS     R3,#+90
   \   0000003C   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000040   0x188A             ADDS     R2,R1,R2
   \   00000042   0xF812 0x2C5B      LDRB     R2,[R2, #-91]
   \   00000046   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   0000004A   0x245A             MOVS     R4,#+90
   \   0000004C   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000050   0x18CB             ADDS     R3,R1,R3
   \   00000052   0xF813 0x3C5A      LDRB     R3,[R3, #-90]
   \   00000056   0xFA53 0xF282      UXTAB    R2,R3,R2
   \   0000005A   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   0000005E   0x245A             MOVS     R4,#+90
   \   00000060   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000064   0x18CB             ADDS     R3,R1,R3
   \   00000066   0xF813 0x3C59      LDRB     R3,[R3, #-89]
   \   0000006A   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   00000072   0x245A             MOVS     R4,#+90
   \   00000074   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   00000078   0x18CB             ADDS     R3,R1,R3
   \   0000007A   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000007E   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   00000086   0x245A             MOVS     R4,#+90
   \   00000088   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   0000008C   0x18CB             ADDS     R3,R1,R3
   \   0000008E   0x785B             LDRB     R3,[R3, #+1]
   \   00000090   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   00000094   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   00000098   0x245A             MOVS     R4,#+90
   \   0000009A   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   0000009E   0x18CB             ADDS     R3,R1,R3
   \   000000A0   0xF893 0x3059      LDRB     R3,[R3, #+89]
   \   000000A4   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   000000A8   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   000000AC   0x245A             MOVS     R4,#+90
   \   000000AE   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   000000B2   0x18CB             ADDS     R3,R1,R3
   \   000000B4   0xF893 0x305A      LDRB     R3,[R3, #+90]
   \   000000B8   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   000000BC   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   000000C0   0x245A             MOVS     R4,#+90
   \   000000C2   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   000000C6   0x18CB             ADDS     R3,R1,R3
   \   000000C8   0xF893 0x305B      LDRB     R3,[R3, #+91]
   \   000000CC   0xFA52 0xF283      UXTAB    R2,R2,R3
   \   000000D0   0x2308             MOVS     R3,#+8
   \   000000D2   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000D6   0x.... 0x....      LDR.W    R3,??DataTable6_3
   \   000000DA   0x245A             MOVS     R4,#+90
   \   000000DC   0xFB04 0x3300      MLA      R3,R4,R0,R3
   \   000000E0   0x54CA             STRB     R2,[R1, R3]
    130                }
    131              }
   \                     ??ImageProcess_3: (+1)
   \   000000E2   0x1C49             ADDS     R1,R1,#+1
   \                     ??ImageProcess_4: (+1)
   \   000000E4   0x2959             CMP      R1,#+89
   \   000000E6   0xDB9D             BLT.N    ??ImageProcess_2
   \   000000E8   0x1C40             ADDS     R0,R0,#+1
   \                     ??ImageProcess_1: (+1)
   \   000000EA   0x2863             CMP      R0,#+99
   \   000000EC   0xDA01             BGE.N    ??ImageProcess_5
   \   000000EE   0x2101             MOVS     R1,#+1
   \   000000F0   0xE7F8             B.N      ??ImageProcess_4
    132            }  
    133            
    134            //图像二值化
    135            for (p = &ImageData[0][0],q = &ThresholdData[0][0]; p <= &ImageData[V_A-1][H_A-1]; p++,q++)
   \                     ??ImageProcess_5: (+1)
   \   000000F2   0x.... 0x....      LDR.W    R2,??DataTable6_3
   \   000000F6   0x.... 0x....      LDR.W    R3,??DataTable7
   \   000000FA   0xE003             B.N      ??ImageProcess_6
    136            {
    137              if (*p > ThresholdValue){*q = White;}
    138              else{*q = Black;}
   \                     ??ImageProcess_7: (+1)
   \   000000FC   0x201E             MOVS     R0,#+30
   \   000000FE   0x7018             STRB     R0,[R3, #+0]
   \                     ??ImageProcess_8: (+1)
   \   00000100   0x1C52             ADDS     R2,R2,#+1
   \   00000102   0x1C5B             ADDS     R3,R3,#+1
   \                     ??ImageProcess_6: (+1)
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000108   0x4290             CMP      R0,R2
   \   0000010A   0xD308             BCC.N    ??ImageProcess_9
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000110   0x6800             LDR      R0,[R0, #+0]
   \   00000112   0x7811             LDRB     R1,[R2, #+0]
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xDAF1             BGE.N    ??ImageProcess_7
   \   00000118   0x20C8             MOVS     R0,#+200
   \   0000011A   0x7018             STRB     R0,[R3, #+0]
   \   0000011C   0xE7F0             B.N      ??ImageProcess_8
    139            }  
    140            
    141            
    142            
    143            //        //噪点滤波 白黑白 => 白白白   黑白黑=>黑黑黑
    144            for (i = 1;i < V_A-1;i++)
   \                     ??ImageProcess_9: (+1)
   \   0000011E   0x2001             MOVS     R0,#+1
   \   00000120   0xE000             B.N      ??ImageProcess_10
   \                     ??ImageProcess_11: (+1)
   \   00000122   0x1C40             ADDS     R0,R0,#+1
   \                     ??ImageProcess_10: (+1)
   \   00000124   0x2863             CMP      R0,#+99
   \   00000126   0xDA40             BGE.N    ??ImageProcess_12
    145            {
    146              p = &ThresholdData[i][1];
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable7
   \   0000012C   0x225A             MOVS     R2,#+90
   \   0000012E   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   00000132   0x1C4A             ADDS     R2,R1,#+1
   \   00000134   0xE00C             B.N      ??ImageProcess_13
    147              while (p < &ThresholdData[i][H_A-1])
    148              {
    149                if (*(p-1) == White && *p == Black && *(p+1) == White//白黑白
    150                    &&*(p-H_A) == White&&*(p-H_A-1) == White&&*(p-H_A+1) == White
    151                      &&*(p+H_A) == White&&*(p+H_A-1) == White&&*(p+H_A+1) == White                            
    152                        )
    153                  
    154                {
    155                  *p = White;
    156                }
    157                else if (*(p-1) == Black && *p == White && *(p+1) == Black)
   \                     ??ImageProcess_14: (+1)
   \   00000136   0xF812 0x1C01      LDRB     R1,[R2, #-1]
   \   0000013A   0x291E             CMP      R1,#+30
   \   0000013C   0xD107             BNE.N    ??ImageProcess_15
   \   0000013E   0x7811             LDRB     R1,[R2, #+0]
   \   00000140   0x29C8             CMP      R1,#+200
   \   00000142   0xD104             BNE.N    ??ImageProcess_15
   \   00000144   0x7851             LDRB     R1,[R2, #+1]
   \   00000146   0x291E             CMP      R1,#+30
   \   00000148   0xD101             BNE.N    ??ImageProcess_15
    158                {
    159                  *p = Black;
   \   0000014A   0x211E             MOVS     R1,#+30
   \   0000014C   0x7011             STRB     R1,[R2, #+0]
    160                }
    161                p++;
   \                     ??ImageProcess_15: (+1)
   \   0000014E   0x1C52             ADDS     R2,R2,#+1
   \                     ??ImageProcess_13: (+1)
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000154   0x235A             MOVS     R3,#+90
   \   00000156   0xFB03 0x1100      MLA      R1,R3,R0,R1
   \   0000015A   0x3159             ADDS     R1,R1,#+89
   \   0000015C   0x428A             CMP      R2,R1
   \   0000015E   0xD2E0             BCS.N    ??ImageProcess_11
   \   00000160   0xF812 0x1C01      LDRB     R1,[R2, #-1]
   \   00000164   0x29C8             CMP      R1,#+200
   \   00000166   0xD1E6             BNE.N    ??ImageProcess_14
   \   00000168   0x7811             LDRB     R1,[R2, #+0]
   \   0000016A   0x291E             CMP      R1,#+30
   \   0000016C   0xD1E3             BNE.N    ??ImageProcess_14
   \   0000016E   0x7851             LDRB     R1,[R2, #+1]
   \   00000170   0x29C8             CMP      R1,#+200
   \   00000172   0xD1E0             BNE.N    ??ImageProcess_14
   \   00000174   0xF812 0x1C5A      LDRB     R1,[R2, #-90]
   \   00000178   0x29C8             CMP      R1,#+200
   \   0000017A   0xD1DC             BNE.N    ??ImageProcess_14
   \   0000017C   0xF812 0x1C5B      LDRB     R1,[R2, #-91]
   \   00000180   0x29C8             CMP      R1,#+200
   \   00000182   0xD1D8             BNE.N    ??ImageProcess_14
   \   00000184   0xF812 0x1C59      LDRB     R1,[R2, #-89]
   \   00000188   0x29C8             CMP      R1,#+200
   \   0000018A   0xD1D4             BNE.N    ??ImageProcess_14
   \   0000018C   0xF892 0x105A      LDRB     R1,[R2, #+90]
   \   00000190   0x29C8             CMP      R1,#+200
   \   00000192   0xD1D0             BNE.N    ??ImageProcess_14
   \   00000194   0xF892 0x1059      LDRB     R1,[R2, #+89]
   \   00000198   0x29C8             CMP      R1,#+200
   \   0000019A   0xD1CC             BNE.N    ??ImageProcess_14
   \   0000019C   0xF892 0x105B      LDRB     R1,[R2, #+91]
   \   000001A0   0x29C8             CMP      R1,#+200
   \   000001A2   0xD1C8             BNE.N    ??ImageProcess_14
   \   000001A4   0x21C8             MOVS     R1,#+200
   \   000001A6   0x7011             STRB     R1,[R2, #+0]
   \   000001A8   0xE7D1             B.N      ??ImageProcess_15
    162              }
    163            }
    164            
    165          }
   \                     ??ImageProcess_12: (+1)
   \   000001AA   0xBC10             POP      {R4}
   \   000001AC   0x4770             BX       LR               ;; return
    166          //提取图像特征值

   \                                 In section .text, align 2, keep-with-next
    167          void GetImageParam()
    168          {
   \                     GetImageParam: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    169            GetBlackEndParam2();  //获取黑线截止行
   \   00000002   0x.... 0x....      BL       GetBlackEndParam2
    170            
    171          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    172          
    173          //获取黑线截止行

   \                                 In section .text, align 2, keep-with-next
    174          void GetBlackEndParam()
    175          {
   \                     GetBlackEndParam: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    176            unsigned char LEndFlag = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    177            unsigned char MEndFlag = 0;
   \   00000004   0x2100             MOVS     R1,#+0
    178            unsigned char REndFlag = 0;
   \   00000006   0x2200             MOVS     R2,#+0
    179            int i=0;
   \   00000008   0x2300             MOVS     R3,#+0
    180            BlackEndL = 0;
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x.... 0x....      LDR.W    R5,??DataTable7_2
   \   00000010   0x602C             STR      R4,[R5, #+0]
    181            BlackEndM = 0;
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable7_3
   \   00000018   0x602C             STR      R4,[R5, #+0]
    182            BlackEndR = 0;
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable7_4
   \   00000020   0x602C             STR      R4,[R5, #+0]
    183            for (i = RowMax-1; i >= 0 ; i--)
   \   00000022   0x2463             MOVS     R4,#+99
   \   00000024   0x0023             MOVS     R3,R4
   \   00000026   0xE015             B.N      ??GetBlackEndParam_0
    184            {
    185              // LeftBlack[i]=0;
    186              // RightBlack[i]=ColumnMax-1;//边界初始化
    187              if(ThresholdData[i][ColumnMax/2] == White && !MEndFlag ){
    188                BlackEndM++;
    189              }
    190              else if(i > 1 && ThresholdData[i-1][ColumnMax/2] == Black && ThresholdData[i-2][ColumnMax/2] == Black){
    191                MEndFlag = 1;
    192              }
    193              if(ThresholdData[i][ColumnMax/4] == White && !LEndFlag ){
    194                BlackEndL++;
    195              }
    196              else if(i > 1 && ThresholdData[i-1][ColumnMax/4] == Black && ThresholdData[i-2][ColumnMax/4] == Black){
    197                LEndFlag = 1;
    198              }
    199              if(ThresholdData[i][ColumnMax*3/4] == White && !REndFlag ){
    200                BlackEndR++;
    201              }
    202              else if(i > 1 && ThresholdData[i-1][ColumnMax*3/4] == Black && ThresholdData[i-2][ColumnMax*3/4] == Black){
   \                     ??GetBlackEndParam_1: (+1)
   \   00000028   0x2B02             CMP      R3,#+2
   \   0000002A   0xDB12             BLT.N    ??GetBlackEndParam_2
   \   0000002C   0x.... 0x....      LDR.W    R4,??DataTable7
   \   00000030   0x255A             MOVS     R5,#+90
   \   00000032   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   00000036   0xF814 0x4C17      LDRB     R4,[R4, #-23]
   \   0000003A   0x2C1E             CMP      R4,#+30
   \   0000003C   0xD109             BNE.N    ??GetBlackEndParam_2
   \   0000003E   0x.... 0x....      LDR.W    R4,??DataTable7
   \   00000042   0x255A             MOVS     R5,#+90
   \   00000044   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   00000048   0xF814 0x4C71      LDRB     R4,[R4, #-113]
   \   0000004C   0x2C1E             CMP      R4,#+30
   \   0000004E   0xD100             BNE.N    ??GetBlackEndParam_2
    203                REndFlag = 1;
   \   00000050   0x2201             MOVS     R2,#+1
    204              }
   \                     ??GetBlackEndParam_2: (+1)
   \   00000052   0x1E5B             SUBS     R3,R3,#+1
   \                     ??GetBlackEndParam_0: (+1)
   \   00000054   0x2B00             CMP      R3,#+0
   \   00000056   0xD464             BMI.N    ??GetBlackEndParam_3
   \   00000058   0x.... 0x....      LDR.W    R4,??DataTable7
   \   0000005C   0x255A             MOVS     R5,#+90
   \   0000005E   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   00000062   0xF894 0x402D      LDRB     R4,[R4, #+45]
   \   00000066   0x2CC8             CMP      R4,#+200
   \   00000068   0xD10A             BNE.N    ??GetBlackEndParam_4
   \   0000006A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006C   0x2900             CMP      R1,#+0
   \   0000006E   0xD107             BNE.N    ??GetBlackEndParam_4
   \   00000070   0x.... 0x....      LDR.W    R4,??DataTable7_3
   \   00000074   0x6824             LDR      R4,[R4, #+0]
   \   00000076   0x1C64             ADDS     R4,R4,#+1
   \   00000078   0x.... 0x....      LDR.W    R5,??DataTable7_3
   \   0000007C   0x602C             STR      R4,[R5, #+0]
   \   0000007E   0xE014             B.N      ??GetBlackEndParam_5
   \                     ??GetBlackEndParam_4: (+1)
   \   00000080   0x2B02             CMP      R3,#+2
   \   00000082   0xDB12             BLT.N    ??GetBlackEndParam_5
   \   00000084   0x.... 0x....      LDR.W    R4,??DataTable7
   \   00000088   0x255A             MOVS     R5,#+90
   \   0000008A   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   0000008E   0xF814 0x4C2D      LDRB     R4,[R4, #-45]
   \   00000092   0x2C1E             CMP      R4,#+30
   \   00000094   0xD109             BNE.N    ??GetBlackEndParam_5
   \   00000096   0x.... 0x....      LDR.W    R4,??DataTable7
   \   0000009A   0x255A             MOVS     R5,#+90
   \   0000009C   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   000000A0   0xF814 0x4C87      LDRB     R4,[R4, #-135]
   \   000000A4   0x2C1E             CMP      R4,#+30
   \   000000A6   0xD100             BNE.N    ??GetBlackEndParam_5
   \   000000A8   0x2101             MOVS     R1,#+1
   \                     ??GetBlackEndParam_5: (+1)
   \   000000AA   0x.... 0x....      LDR.W    R4,??DataTable7
   \   000000AE   0x255A             MOVS     R5,#+90
   \   000000B0   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   000000B4   0x7DA4             LDRB     R4,[R4, #+22]
   \   000000B6   0x2CC8             CMP      R4,#+200
   \   000000B8   0xD10A             BNE.N    ??GetBlackEndParam_6
   \   000000BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD107             BNE.N    ??GetBlackEndParam_6
   \   000000C0   0x.... 0x....      LDR.W    R4,??DataTable7_2
   \   000000C4   0x6824             LDR      R4,[R4, #+0]
   \   000000C6   0x1C64             ADDS     R4,R4,#+1
   \   000000C8   0x.... 0x....      LDR.W    R5,??DataTable7_2
   \   000000CC   0x602C             STR      R4,[R5, #+0]
   \   000000CE   0xE014             B.N      ??GetBlackEndParam_7
   \                     ??GetBlackEndParam_6: (+1)
   \   000000D0   0x2B02             CMP      R3,#+2
   \   000000D2   0xDB12             BLT.N    ??GetBlackEndParam_7
   \   000000D4   0x.... 0x....      LDR.W    R4,??DataTable7
   \   000000D8   0x255A             MOVS     R5,#+90
   \   000000DA   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   000000DE   0xF814 0x4C44      LDRB     R4,[R4, #-68]
   \   000000E2   0x2C1E             CMP      R4,#+30
   \   000000E4   0xD109             BNE.N    ??GetBlackEndParam_7
   \   000000E6   0x.... 0x....      LDR.W    R4,??DataTable7
   \   000000EA   0x255A             MOVS     R5,#+90
   \   000000EC   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   000000F0   0xF814 0x4C9E      LDRB     R4,[R4, #-158]
   \   000000F4   0x2C1E             CMP      R4,#+30
   \   000000F6   0xD100             BNE.N    ??GetBlackEndParam_7
   \   000000F8   0x2001             MOVS     R0,#+1
   \                     ??GetBlackEndParam_7: (+1)
   \   000000FA   0x.... 0x....      LDR.W    R4,??DataTable7
   \   000000FE   0x255A             MOVS     R5,#+90
   \   00000100   0xFB05 0x4403      MLA      R4,R5,R3,R4
   \   00000104   0xF894 0x4043      LDRB     R4,[R4, #+67]
   \   00000108   0x2CC8             CMP      R4,#+200
   \   0000010A   0xD18D             BNE.N    ??GetBlackEndParam_1
   \   0000010C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000010E   0x2A00             CMP      R2,#+0
   \   00000110   0xD18A             BNE.N    ??GetBlackEndParam_1
   \   00000112   0x.... 0x....      LDR.W    R4,??DataTable7_4
   \   00000116   0x6824             LDR      R4,[R4, #+0]
   \   00000118   0x1C64             ADDS     R4,R4,#+1
   \   0000011A   0x.... 0x....      LDR.W    R5,??DataTable7_4
   \   0000011E   0x602C             STR      R4,[R5, #+0]
   \   00000120   0xE797             B.N      ??GetBlackEndParam_2
    205            }
    206            BlackEndMax = MAX(BlackEndL,BlackEndM);
   \                     ??GetBlackEndParam_3: (+1)
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000012C   0x6809             LDR      R1,[R1, #+0]
   \   0000012E   0x4288             CMP      R0,R1
   \   00000130   0xDA06             BGE.N    ??GetBlackEndParam_8
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000013C   0x6008             STR      R0,[R1, #+0]
   \   0000013E   0xE005             B.N      ??GetBlackEndParam_9
   \                     ??GetBlackEndParam_8: (+1)
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000144   0x6800             LDR      R0,[R0, #+0]
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000014A   0x6008             STR      R0,[R1, #+0]
    207            BlackEndMax = MAX(BlackEndMax,BlackEndR);
   \                     ??GetBlackEndParam_9: (+1)
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000156   0x6809             LDR      R1,[R1, #+0]
   \   00000158   0x4288             CMP      R0,R1
   \   0000015A   0xDA06             BGE.N    ??GetBlackEndParam_10
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000166   0x6008             STR      R0,[R1, #+0]
   \   00000168   0xE005             B.N      ??GetBlackEndParam_11
   \                     ??GetBlackEndParam_10: (+1)
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   0000016E   0x6800             LDR      R0,[R0, #+0]
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000174   0x6008             STR      R0,[R1, #+0]
    208            BlackEndLMR = BlackEndL + BlackEndM + BlackEndR;
   \                     ??GetBlackEndParam_11: (+1)
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   0000017A   0x6800             LDR      R0,[R0, #+0]
   \   0000017C   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000180   0x6809             LDR      R1,[R1, #+0]
   \   00000182   0x1808             ADDS     R0,R1,R0
   \   00000184   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   00000188   0x6809             LDR      R1,[R1, #+0]
   \   0000018A   0x1808             ADDS     R0,R1,R0
   \   0000018C   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   00000190   0x6008             STR      R0,[R1, #+0]
    209            //		//判断十字左右倾
    210            if (BlackEndMax == BlackEndL)
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000196   0x6800             LDR      R0,[R0, #+0]
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000019C   0x6809             LDR      R1,[R1, #+0]
   \   0000019E   0x4288             CMP      R0,R1
   \   000001A0   0xD104             BNE.N    ??GetBlackEndParam_12
    211            {
    212              g_Derict = 1;//左倾
   \   000001A2   0x2001             MOVS     R0,#+1
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000001A8   0x7008             STRB     R0,[R1, #+0]
   \   000001AA   0xE035             B.N      ??GetBlackEndParam_13
    213            }
    214            else if (BlackEndMax == BlackEndR)
   \                     ??GetBlackEndParam_12: (+1)
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   000001B6   0x6809             LDR      R1,[R1, #+0]
   \   000001B8   0x4288             CMP      R0,R1
   \   000001BA   0xD104             BNE.N    ??GetBlackEndParam_14
    215            {
    216              g_Derict =2;//右倾
   \   000001BC   0x2002             MOVS     R0,#+2
   \   000001BE   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000001C2   0x7008             STRB     R0,[R1, #+0]
   \   000001C4   0xE028             B.N      ??GetBlackEndParam_13
    217            }
    218            else if (BlackEndMax == BlackEndM)
   \                     ??GetBlackEndParam_14: (+1)
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000001CA   0x6800             LDR      R0,[R0, #+0]
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000001D0   0x6809             LDR      R1,[R1, #+0]
   \   000001D2   0x4288             CMP      R0,R1
   \   000001D4   0xD120             BNE.N    ??GetBlackEndParam_13
    219            {
    220              if (fabss(BlackEndL-BlackEndR) < 5)
   \   000001D6   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000001DA   0x6800             LDR      R0,[R0, #+0]
   \   000001DC   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   000001E0   0x6809             LDR      R1,[R1, #+0]
   \   000001E2   0x1A40             SUBS     R0,R0,R1
   \   000001E4   0x.... 0x....      BL       `fabss`
   \   000001E8   0x2805             CMP      R0,#+5
   \   000001EA   0xDA04             BGE.N    ??GetBlackEndParam_15
    221              {
    222                g_Derict = 0;//正十字
   \   000001EC   0x2000             MOVS     R0,#+0
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000001F2   0x7008             STRB     R0,[R1, #+0]
   \   000001F4   0xE010             B.N      ??GetBlackEndParam_13
    223              }
    224              else if (BlackEndL > BlackEndR)
   \                     ??GetBlackEndParam_15: (+1)
   \   000001F6   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   000001FA   0x6800             LDR      R0,[R0, #+0]
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000200   0x6809             LDR      R1,[R1, #+0]
   \   00000202   0x4288             CMP      R0,R1
   \   00000204   0xDA04             BGE.N    ??GetBlackEndParam_16
    225              {
    226                g_Derict = 1;//左
   \   00000206   0x2001             MOVS     R0,#+1
   \   00000208   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   0000020C   0x7008             STRB     R0,[R1, #+0]
   \   0000020E   0xE003             B.N      ??GetBlackEndParam_13
    227              }
    228              else
    229              {
    230                g_Derict = 2;//右
   \                     ??GetBlackEndParam_16: (+1)
   \   00000210   0x2002             MOVS     R0,#+2
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000216   0x7008             STRB     R0,[R1, #+0]
    231              }
    232            }
    233            
    234          }
   \                     ??GetBlackEndParam_13: (+1)
   \   00000218   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    235          
    236          
    237          //获取黑线截止行

   \                                 In section .text, align 2, keep-with-next
    238          void GetBlackEndParam2()
    239          {
   \                     GetBlackEndParam2: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    240            int getlmr_i=0;
   \   00000002   0x2100             MOVS     R1,#+0
    241            int w_n;
    242            int w_m;
    243            int find_column;
    244            int end_max=1;
   \   00000004   0x2201             MOVS     R2,#+1
    245            int end_max_count;
    246            BlackEndA = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable7_8
   \   0000000C   0x6018             STR      R0,[R3, #+0]
    247            BlackEndB = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable7_9
   \   00000014   0x6018             STR      R0,[R3, #+0]
    248            BlackEndC = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable7_10
   \   0000001C   0x6018             STR      R0,[R3, #+0]
    249            BlackEndD = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R3,??DataTable7_11
   \   00000024   0x6018             STR      R0,[R3, #+0]
    250            BlackEndE = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R3,??DataTable7_12
   \   0000002C   0x6018             STR      R0,[R3, #+0]
    251            BlackEndF = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R3,??DataTable7_13
   \   00000034   0x6018             STR      R0,[R3, #+0]
    252            BlackEndG = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R3,??DataTable7_14
   \   0000003C   0x6018             STR      R0,[R3, #+0]
    253            
    254            find_column= ColumnMax*4/8; //1
   \   0000003E   0x242D             MOVS     R4,#+45
    255            w_n=RowMax-1;
   \   00000040   0x2563             MOVS     R5,#+99
    256            w_m=1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE00E             B.N      ??GetBlackEndParam2_0
    257            while(w_m)
    258            {
    259              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_1: (+1)
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       Find_Endline
    260              w_n-=w_m; 
   \   0000004E   0x1A2D             SUBS     R5,R5,R0
    261              BlackEndA+=w_m;
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable7_8
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0x1841             ADDS     R1,R0,R1
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable7_8
   \   0000005C   0x6011             STR      R1,[R2, #+0]
    262              if(w_n<2) w_m=0;
   \   0000005E   0x2D02             CMP      R5,#+2
   \   00000060   0xDA00             BGE.N    ??GetBlackEndParam2_0
   \   00000062   0x2000             MOVS     R0,#+0
    263            } 
   \                     ??GetBlackEndParam2_0: (+1)
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD1EE             BNE.N    ??GetBlackEndParam2_1
    264            BlackEndMax=  BlackEndA;
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000072   0x6008             STR      R0,[R1, #+0]
    265            BlackEndColumnMax=find_column;
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   00000078   0x6004             STR      R4,[R0, #+0]
    266            
    267            
    268            
    269            find_column= ColumnMax*3/8; //2
   \   0000007A   0x2421             MOVS     R4,#+33
    270            w_n=RowMax-1;
   \   0000007C   0x2563             MOVS     R5,#+99
    271            w_m=1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0xE00E             B.N      ??GetBlackEndParam2_2
    272            while(w_m)
    273            {
    274              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_3: (+1)
   \   00000082   0x0021             MOVS     R1,R4
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0x.... 0x....      BL       Find_Endline
    275              w_n-=w_m; 
   \   0000008A   0x1A2D             SUBS     R5,R5,R0
    276              BlackEndB+=w_m;
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   00000090   0x6809             LDR      R1,[R1, #+0]
   \   00000092   0x1841             ADDS     R1,R0,R1
   \   00000094   0x.... 0x....      LDR.W    R2,??DataTable7_9
   \   00000098   0x6011             STR      R1,[R2, #+0]
    277              if(w_n<2) w_m=0;
   \   0000009A   0x2D02             CMP      R5,#+2
   \   0000009C   0xDA00             BGE.N    ??GetBlackEndParam2_2
   \   0000009E   0x2000             MOVS     R0,#+0
    278            } 
   \                     ??GetBlackEndParam2_2: (+1)
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD1EE             BNE.N    ??GetBlackEndParam2_3
    279            if(BlackEndMax<BlackEndB)
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   000000AE   0x6809             LDR      R1,[R1, #+0]
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xDA08             BGE.N    ??GetBlackEndParam2_4
    280            {BlackEndMax=  BlackEndB;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   000000BE   0x6008             STR      R0,[R1, #+0]
    281            BlackEndColumnMax=find_column;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   000000C4   0x6004             STR      R4,[R0, #+0]
    282            }
    283            
    284            
    285            
    286            
    287            find_column= ColumnMax*5/8; //3
   \                     ??GetBlackEndParam2_4: (+1)
   \   000000C6   0x2438             MOVS     R4,#+56
    288            w_n=RowMax-1;
   \   000000C8   0x2563             MOVS     R5,#+99
    289            w_m=1;
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0xE00E             B.N      ??GetBlackEndParam2_5
    290            while(w_m)
    291            {
    292              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_6: (+1)
   \   000000CE   0x0021             MOVS     R1,R4
   \   000000D0   0x0028             MOVS     R0,R5
   \   000000D2   0x.... 0x....      BL       Find_Endline
    293              w_n-=w_m; 
   \   000000D6   0x1A2D             SUBS     R5,R5,R0
    294              BlackEndC+=w_m;
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0x1841             ADDS     R1,R0,R1
   \   000000E0   0x.... 0x....      LDR.W    R2,??DataTable7_10
   \   000000E4   0x6011             STR      R1,[R2, #+0]
    295              if(w_n<2) w_m=0;
   \   000000E6   0x2D02             CMP      R5,#+2
   \   000000E8   0xDA00             BGE.N    ??GetBlackEndParam2_5
   \   000000EA   0x2000             MOVS     R0,#+0
    296            } 
   \                     ??GetBlackEndParam2_5: (+1)
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD1EE             BNE.N    ??GetBlackEndParam2_6
    297            if(BlackEndMax<BlackEndC)
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x.... 0x....      LDR.W    R1,??DataTable7_10
   \   000000FA   0x6809             LDR      R1,[R1, #+0]
   \   000000FC   0x4288             CMP      R0,R1
   \   000000FE   0xDA08             BGE.N    ??GetBlackEndParam2_7
    298            {
    299              BlackEndMax=  BlackEndC;
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable7_10
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000010A   0x6008             STR      R0,[R1, #+0]
    300            BlackEndColumnMax=find_column;
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   00000110   0x6004             STR      R4,[R0, #+0]
    301            }
    302            
    303            
    304            
    305            find_column= ColumnMax*2/8; //4
   \                     ??GetBlackEndParam2_7: (+1)
   \   00000112   0x2416             MOVS     R4,#+22
    306            w_n=RowMax-1;
   \   00000114   0x2563             MOVS     R5,#+99
    307            w_m=1;
   \   00000116   0x2001             MOVS     R0,#+1
   \   00000118   0xE00E             B.N      ??GetBlackEndParam2_8
    308            while(w_m)
    309            {
    310              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_9: (+1)
   \   0000011A   0x0021             MOVS     R1,R4
   \   0000011C   0x0028             MOVS     R0,R5
   \   0000011E   0x.... 0x....      BL       Find_Endline
    311              w_n-=w_m; 
   \   00000122   0x1A2D             SUBS     R5,R5,R0
    312              BlackEndD+=w_m;
   \   00000124   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   00000128   0x6809             LDR      R1,[R1, #+0]
   \   0000012A   0x1841             ADDS     R1,R0,R1
   \   0000012C   0x.... 0x....      LDR.W    R2,??DataTable7_11
   \   00000130   0x6011             STR      R1,[R2, #+0]
    313              if(w_n<2) w_m=0;
   \   00000132   0x2D02             CMP      R5,#+2
   \   00000134   0xDA00             BGE.N    ??GetBlackEndParam2_8
   \   00000136   0x2000             MOVS     R0,#+0
    314            } 
   \                     ??GetBlackEndParam2_8: (+1)
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD1EE             BNE.N    ??GetBlackEndParam2_9
    315            if(BlackEndMax<BlackEndD)
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000140   0x6800             LDR      R0,[R0, #+0]
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable7_11
   \   00000146   0x6809             LDR      R1,[R1, #+0]
   \   00000148   0x4288             CMP      R0,R1
   \   0000014A   0xDA08             BGE.N    ??GetBlackEndParam2_10
    316            {
    317              BlackEndMax=  BlackEndD;
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable7_11
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   00000156   0x6008             STR      R0,[R1, #+0]
    318            BlackEndColumnMax=find_column;
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   0000015C   0x6004             STR      R4,[R0, #+0]
    319            }
    320            
    321            
    322            find_column= ColumnMax*6/8; //5
   \                     ??GetBlackEndParam2_10: (+1)
   \   0000015E   0x2443             MOVS     R4,#+67
    323            w_n=RowMax-1;
   \   00000160   0x2563             MOVS     R5,#+99
    324            w_m=1;
   \   00000162   0x2001             MOVS     R0,#+1
   \   00000164   0xE00E             B.N      ??GetBlackEndParam2_11
    325            while(w_m)
    326            {
    327              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_12: (+1)
   \   00000166   0x0021             MOVS     R1,R4
   \   00000168   0x0028             MOVS     R0,R5
   \   0000016A   0x.... 0x....      BL       Find_Endline
    328              w_n-=w_m; 
   \   0000016E   0x1A2D             SUBS     R5,R5,R0
    329              BlackEndE+=w_m;
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable7_12
   \   00000174   0x6809             LDR      R1,[R1, #+0]
   \   00000176   0x1841             ADDS     R1,R0,R1
   \   00000178   0x.... 0x....      LDR.W    R2,??DataTable7_12
   \   0000017C   0x6011             STR      R1,[R2, #+0]
    330              if(w_n<2) w_m=0;
   \   0000017E   0x2D02             CMP      R5,#+2
   \   00000180   0xDA00             BGE.N    ??GetBlackEndParam2_11
   \   00000182   0x2000             MOVS     R0,#+0
    331            } 
   \                     ??GetBlackEndParam2_11: (+1)
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD1EE             BNE.N    ??GetBlackEndParam2_12
    332            if(BlackEndMax<BlackEndE)
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable7_12
   \   00000192   0x6809             LDR      R1,[R1, #+0]
   \   00000194   0x4288             CMP      R0,R1
   \   00000196   0xDA08             BGE.N    ??GetBlackEndParam2_13
    333            {
    334              BlackEndMax=  BlackEndE;
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable7_12
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   000001A2   0x6008             STR      R0,[R1, #+0]
    335            BlackEndColumnMax=find_column;
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   000001A8   0x6004             STR      R4,[R0, #+0]
    336            }
    337            
    338            
    339            find_column= ColumnMax*1/8; //6
   \                     ??GetBlackEndParam2_13: (+1)
   \   000001AA   0x240B             MOVS     R4,#+11
    340            w_n=RowMax-1;
   \   000001AC   0x2563             MOVS     R5,#+99
    341            w_m=1;
   \   000001AE   0x2001             MOVS     R0,#+1
   \   000001B0   0xE00E             B.N      ??GetBlackEndParam2_14
    342            while(w_m)
    343            {
    344              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_15: (+1)
   \   000001B2   0x0021             MOVS     R1,R4
   \   000001B4   0x0028             MOVS     R0,R5
   \   000001B6   0x.... 0x....      BL       Find_Endline
    345              w_n-=w_m; 
   \   000001BA   0x1A2D             SUBS     R5,R5,R0
    346              BlackEndF+=w_m;
   \   000001BC   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \   000001C0   0x6809             LDR      R1,[R1, #+0]
   \   000001C2   0x1841             ADDS     R1,R0,R1
   \   000001C4   0x.... 0x....      LDR.W    R2,??DataTable7_13
   \   000001C8   0x6011             STR      R1,[R2, #+0]
    347              if(w_n<2) w_m=0;
   \   000001CA   0x2D02             CMP      R5,#+2
   \   000001CC   0xDA00             BGE.N    ??GetBlackEndParam2_14
   \   000001CE   0x2000             MOVS     R0,#+0
    348            } 
   \                     ??GetBlackEndParam2_14: (+1)
   \   000001D0   0x2800             CMP      R0,#+0
   \   000001D2   0xD1EE             BNE.N    ??GetBlackEndParam2_15
    349            if(BlackEndMax<BlackEndF)
   \   000001D4   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000001D8   0x6800             LDR      R0,[R0, #+0]
   \   000001DA   0x.... 0x....      LDR.W    R1,??DataTable7_13
   \   000001DE   0x6809             LDR      R1,[R1, #+0]
   \   000001E0   0x4288             CMP      R0,R1
   \   000001E2   0xDA08             BGE.N    ??GetBlackEndParam2_16
    350            {
    351              BlackEndMax=  BlackEndF;
   \   000001E4   0x.... 0x....      LDR.W    R0,??DataTable7_13
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   000001EE   0x6008             STR      R0,[R1, #+0]
    352            BlackEndColumnMax=find_column;
   \   000001F0   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   000001F4   0x6004             STR      R4,[R0, #+0]
    353            }
    354            
    355            
    356            find_column= ColumnMax*7/8; //7
   \                     ??GetBlackEndParam2_16: (+1)
   \   000001F6   0x244E             MOVS     R4,#+78
    357            w_n=RowMax-1;
   \   000001F8   0x2563             MOVS     R5,#+99
    358            w_m=1;
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0xE00E             B.N      ??GetBlackEndParam2_17
    359            while(w_m)
    360            {
    361              w_m=Find_Endline(w_n,find_column);
   \                     ??GetBlackEndParam2_18: (+1)
   \   000001FE   0x0021             MOVS     R1,R4
   \   00000200   0x0028             MOVS     R0,R5
   \   00000202   0x.... 0x....      BL       Find_Endline
    362              w_n-=w_m; 
   \   00000206   0x1A2D             SUBS     R5,R5,R0
    363              BlackEndG+=w_m;
   \   00000208   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   0000020C   0x6809             LDR      R1,[R1, #+0]
   \   0000020E   0x1841             ADDS     R1,R0,R1
   \   00000210   0x.... 0x....      LDR.W    R2,??DataTable7_14
   \   00000214   0x6011             STR      R1,[R2, #+0]
    364              if(w_n<2) w_m=0;
   \   00000216   0x2D02             CMP      R5,#+2
   \   00000218   0xDA00             BGE.N    ??GetBlackEndParam2_17
   \   0000021A   0x2000             MOVS     R0,#+0
    365            } 
   \                     ??GetBlackEndParam2_17: (+1)
   \   0000021C   0x2800             CMP      R0,#+0
   \   0000021E   0xD1EE             BNE.N    ??GetBlackEndParam2_18
    366            if(BlackEndMax<BlackEndG)
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000224   0x6800             LDR      R0,[R0, #+0]
   \   00000226   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   0000022A   0x6809             LDR      R1,[R1, #+0]
   \   0000022C   0x4288             CMP      R0,R1
   \   0000022E   0xDA08             BGE.N    ??GetBlackEndParam2_19
    367            {
    368              BlackEndMax=  BlackEndG;
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable7_14
   \   00000234   0x6800             LDR      R0,[R0, #+0]
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable7_5
   \   0000023A   0x6008             STR      R0,[R1, #+0]
    369            BlackEndColumnMax=find_column;
   \   0000023C   0x.... 0x....      LDR.W    R0,??DataTable7_15
   \   00000240   0x6004             STR      R4,[R0, #+0]
    370            }
    371            
    372            BlackEndL=MAX(BlackEndB,BlackEndA);
   \                     ??GetBlackEndParam2_19: (+1)
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000246   0x6800             LDR      R0,[R0, #+0]
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable7_9
   \   0000024C   0x6809             LDR      R1,[R1, #+0]
   \   0000024E   0x4288             CMP      R0,R1
   \   00000250   0xDA06             BGE.N    ??GetBlackEndParam2_20
   \   00000252   0x.... 0x....      LDR.W    R0,??DataTable7_9
   \   00000256   0x6800             LDR      R0,[R0, #+0]
   \   00000258   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000025C   0x6008             STR      R0,[R1, #+0]
   \   0000025E   0xE005             B.N      ??GetBlackEndParam2_21
   \                     ??GetBlackEndParam2_20: (+1)
   \   00000260   0x.... 0x....      LDR.W    R0,??DataTable7_8
   \   00000264   0x6800             LDR      R0,[R0, #+0]
   \   00000266   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000026A   0x6008             STR      R0,[R1, #+0]
    373            BlackEndM=BlackEndD;
   \                     ??GetBlackEndParam2_21: (+1)
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable7_11
   \   00000270   0x6800             LDR      R0,[R0, #+0]
   \   00000272   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000276   0x6008             STR      R0,[R1, #+0]
    374            BlackEndR=MAX(BlackEndG,BlackEndF);
   \   00000278   0x.... 0x....      LDR.W    R0,??DataTable7_13
   \   0000027C   0x6800             LDR      R0,[R0, #+0]
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable7_14
   \   00000282   0x6809             LDR      R1,[R1, #+0]
   \   00000284   0x4288             CMP      R0,R1
   \   00000286   0xDA06             BGE.N    ??GetBlackEndParam2_22
   \   00000288   0x.... 0x....      LDR.W    R0,??DataTable7_14
   \   0000028C   0x6800             LDR      R0,[R0, #+0]
   \   0000028E   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   00000292   0x6008             STR      R0,[R1, #+0]
   \   00000294   0xE005             B.N      ??GetBlackEndParam2_23
   \                     ??GetBlackEndParam2_22: (+1)
   \   00000296   0x.... 0x....      LDR.W    R0,??DataTable7_13
   \   0000029A   0x6800             LDR      R0,[R0, #+0]
   \   0000029C   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   000002A0   0x6008             STR      R0,[R1, #+0]
    375            BlackEndLMR = BlackEndL + BlackEndM + BlackEndR;
   \                     ??GetBlackEndParam2_23: (+1)
   \   000002A2   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   000002A6   0x6800             LDR      R0,[R0, #+0]
   \   000002A8   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000002AC   0x6809             LDR      R1,[R1, #+0]
   \   000002AE   0x1808             ADDS     R0,R1,R0
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   000002B4   0x6809             LDR      R1,[R1, #+0]
   \   000002B6   0x1808             ADDS     R0,R1,R0
   \   000002B8   0x.... 0x....      LDR.W    R1,??DataTable7_6
   \   000002BC   0x6008             STR      R0,[R1, #+0]
    376            //		//判断十字左右倾
    377            if (BlackEndMax == BlackEndL)
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000002C2   0x6800             LDR      R0,[R0, #+0]
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   000002C8   0x6809             LDR      R1,[R1, #+0]
   \   000002CA   0x4288             CMP      R0,R1
   \   000002CC   0xD104             BNE.N    ??GetBlackEndParam2_24
    378            {
    379              g_Derict = 1;//左倾
   \   000002CE   0x2001             MOVS     R0,#+1
   \   000002D0   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000002D4   0x7008             STRB     R0,[R1, #+0]
   \   000002D6   0xE035             B.N      ??GetBlackEndParam2_25
    380            }
    381            else if (BlackEndMax == BlackEndR)
   \                     ??GetBlackEndParam2_24: (+1)
   \   000002D8   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000002DC   0x6800             LDR      R0,[R0, #+0]
   \   000002DE   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   000002E2   0x6809             LDR      R1,[R1, #+0]
   \   000002E4   0x4288             CMP      R0,R1
   \   000002E6   0xD104             BNE.N    ??GetBlackEndParam2_26
    382            {
    383              g_Derict =2;//右倾
   \   000002E8   0x2002             MOVS     R0,#+2
   \   000002EA   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   000002EE   0x7008             STRB     R0,[R1, #+0]
   \   000002F0   0xE028             B.N      ??GetBlackEndParam2_25
    384            }
    385            else if (BlackEndMax == BlackEndM)
   \                     ??GetBlackEndParam2_26: (+1)
   \   000002F2   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   000002F6   0x6800             LDR      R0,[R0, #+0]
   \   000002F8   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   000002FC   0x6809             LDR      R1,[R1, #+0]
   \   000002FE   0x4288             CMP      R0,R1
   \   00000300   0xD120             BNE.N    ??GetBlackEndParam2_25
    386            {
    387              if (fabss(BlackEndL-BlackEndR) < 5)
   \   00000302   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00000306   0x6800             LDR      R0,[R0, #+0]
   \   00000308   0x.... 0x....      LDR.W    R1,??DataTable7_4
   \   0000030C   0x6809             LDR      R1,[R1, #+0]
   \   0000030E   0x1A40             SUBS     R0,R0,R1
   \   00000310   0x.... 0x....      BL       `fabss`
   \   00000314   0x2805             CMP      R0,#+5
   \   00000316   0xDA04             BGE.N    ??GetBlackEndParam2_27
    388              {
    389                g_Derict = 0;//正十字
   \   00000318   0x2000             MOVS     R0,#+0
   \   0000031A   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   0000031E   0x7008             STRB     R0,[R1, #+0]
   \   00000320   0xE010             B.N      ??GetBlackEndParam2_25
    390              }
    391              else if (BlackEndL > BlackEndR)
   \                     ??GetBlackEndParam2_27: (+1)
   \   00000322   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   00000326   0x6800             LDR      R0,[R0, #+0]
   \   00000328   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000032C   0x6809             LDR      R1,[R1, #+0]
   \   0000032E   0x4288             CMP      R0,R1
   \   00000330   0xDA04             BGE.N    ??GetBlackEndParam2_28
    392              {
    393                g_Derict = 1;//左
   \   00000332   0x2001             MOVS     R0,#+1
   \   00000334   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000338   0x7008             STRB     R0,[R1, #+0]
   \   0000033A   0xE003             B.N      ??GetBlackEndParam2_25
    394              }
    395              else
    396              {
    397                g_Derict = 2;//右
   \                     ??GetBlackEndParam2_28: (+1)
   \   0000033C   0x2002             MOVS     R0,#+2
   \   0000033E   0x.... 0x....      LDR.W    R1,??DataTable7_7
   \   00000342   0x7008             STRB     R0,[R1, #+0]
    398              }
    399            }
    400            
    401            
    402            
    403          }
   \                     ??GetBlackEndParam2_25: (+1)
   \   00000344   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    404          int Find_Endline(int row,int column)
    405          {
    406            
    407            
    408            if(ThresholdData[row][column]==White)//起始点是白点
   \                     Find_Endline: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable7
   \   00000004   0x235A             MOVS     R3,#+90
   \   00000006   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   0000000A   0x5C8A             LDRB     R2,[R1, R2]
   \   0000000C   0x2AC8             CMP      R2,#+200
   \   0000000E   0xD10D             BNE.N    ??Find_Endline_0
    409            {
    410              if(ThresholdData[row-1][column]==White)
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable7
   \   00000014   0x235A             MOVS     R3,#+90
   \   00000016   0xFB03 0x2000      MLA      R0,R3,R0,R2
   \   0000001A   0x1808             ADDS     R0,R1,R0
   \   0000001C   0xF810 0x0C5A      LDRB     R0,[R0, #-90]
   \   00000020   0x28C8             CMP      R0,#+200
   \   00000022   0xD101             BNE.N    ??Find_Endline_1
    411                return 2;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xE018             B.N      ??Find_Endline_2
    412              else
    413                return 1;
   \                     ??Find_Endline_1: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE016             B.N      ??Find_Endline_2
    414              
    415            }
    416            else//如果起始点是黑点
    417            {
    418              if(ThresholdData[row-1][column]==Black&&ThresholdData[row-2][column]==Black) //黑黑黑 
   \                     ??Find_Endline_0: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable7
   \   00000030   0x235A             MOVS     R3,#+90
   \   00000032   0xFB03 0x2200      MLA      R2,R3,R0,R2
   \   00000036   0x188A             ADDS     R2,R1,R2
   \   00000038   0xF812 0x2C5A      LDRB     R2,[R2, #-90]
   \   0000003C   0x2A1E             CMP      R2,#+30
   \   0000003E   0xD10B             BNE.N    ??Find_Endline_3
   \   00000040   0x.... 0x....      LDR.W    R2,??DataTable7
   \   00000044   0x235A             MOVS     R3,#+90
   \   00000046   0xFB03 0x2000      MLA      R0,R3,R0,R2
   \   0000004A   0x1808             ADDS     R0,R1,R0
   \   0000004C   0xF810 0x0CB4      LDRB     R0,[R0, #-180]
   \   00000050   0x281E             CMP      R0,#+30
   \   00000052   0xD101             BNE.N    ??Find_Endline_3
    419                return 0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xE000             B.N      ??Find_Endline_2
    420              else 
    421                return 1;
   \                     ??Find_Endline_3: (+1)
   \   00000058   0x2001             MOVS     R0,#+1
   \                     ??Find_Endline_2: (+1)
   \   0000005A   0x4770             BX       LR               ;; return
    422            }
    423            
    424            
    425          }
    426          
    427          //中心线处理
    428          extern int flag_ren,IF_CAR_CONTROL1;

   \                                 In section .text, align 2, keep-with-next
    429          void MidLineProcess()
    430          {       
   \                     MidLineProcess: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    431            // gpio_turn(PTE1);
    432            //gpio_turn(PTE2);  
    433            StoreFlag = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable7_16
   \   00000008   0x6008             STR      R0,[R1, #+0]
    434            GetLMR();//提取左边缘、右边缘和中心线
   \   0000000A   0x.... 0x....      BL       GetLMR
    435            
    436            GetEPerCount();  //求有效偏移量,和平均每列偏移量	
   \   0000000E   0x.... 0x....      BL       GetEPerCount
    437            //getmidline();
    438            
    439            
    440            
    441            
    442            //		LAverageFilter();//左边缘滤波
    443            //		RAverageFilter();//右边缘滤波*/
    444            // GetFinalMidLine();//通过左右边缘取得控制舵机的中心线
    445            
    446            //AverageFilter();//中心线滤波处理
    447            //MidLineCompensate();//中心线补偿处
    448            //		StoreFlag=1;
    449            //		StoreMidLine();
    450            
    451            //RectificationMidLine();
    452            
    453            GetSectionParam();//对中心线分段提取偏差
   \   00000012   0x.... 0x....      BL       GetSectionParam
    454            GetMidLineVariance();//提取中心线方差
   \   00000016   0x.... 0x....      BL       GetMidLineVariance
    455            
    456            
    457            
    458            //        ProcessCrossing();	//检测并处理十字
    459            
    460            //		if(StoreFlag)
    461            //		{
    462            //			UseTemMidLine();
    463            //		}
    464            
    465            
    466          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    467          
    468          //

   \                                 In section .bss, align 4
    469          int HistoryRoadType[4] = {0};
   \                     HistoryRoadType:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
    470          int g_Head = 0,g_Rear=0;
   \                     g_Head:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     g_Rear:
   \   00000000                      DS8 4
    471          

   \                                 In section .data, align 1
    472          unsigned char StandardRoadType = 1;
   \                     StandardRoadType:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
    473          int StraightToBendCount = 0;
   \                     StraightToBendCount:
   \   00000000                      DS8 4
    474          //赛道识别

   \                                 In section .text, align 2, keep-with-next
    475          void RTRecognition()
    476          {
   \                     RTRecognition: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    477            signed char temRoadType = -1;
   \   00000002   0xF05F 0x30FF      MOVS     R0,#-1
    478            int MinStable = 0;
   \   00000006   0x2100             MOVS     R1,#+0
    479            //        
    480            //        if(StableNumbers >= RowMax*0.9)
    481            //        {
    482            //        temRoadType = 0;
    483            //        }
    484            //         else if(StableNumbers >= RowMax*0.8)
    485            //        {
    486            //        temRoadType = 1;
    487            //        }
    488            //        
    489            //        else if(StableNumbers >= RowMax*0.6)
    490            //        {
    491            //        temRoadType = 2;
    492            //        }
    493            //        
    494            //        else
    495            //        {
    496            //        temRoadType = 3;
    497            //        }
    498            //        RoadType = temRoadType;//赛道类型判断成功
    499            //   return;
    500            MinStable = MIN(StableNumbers,LeftStableNumbers);
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable7_17
   \   0000000C   0x6812             LDR      R2,[R2, #+0]
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable7_18
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0x429A             CMP      R2,R3
   \   00000016   0xDA03             BGE.N    ??RTRecognition_0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xE002             B.N      ??RTRecognition_1
   \                     ??RTRecognition_0: (+1)
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable7_18
   \   00000024   0x6809             LDR      R1,[R1, #+0]
    501            MinStable = MIN(MinStable,RightStableNumbers);
   \                     ??RTRecognition_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable7_19
   \   0000002A   0x6812             LDR      R2,[R2, #+0]
   \   0000002C   0x4291             CMP      R1,R2
   \   0000002E   0xDB02             BLT.N    ??RTRecognition_2
   \                     ??RTRecognition_3: (+1)
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable7_19
   \   00000034   0x6809             LDR      R1,[R1, #+0]
    502            //标准的赛道类型 3、2
    503            /*if(fabss(Excursion) > 30)
    504            {
    505            if(EPerCount >= 1.2 && BlackEndMax < 15)
    506            {
    507            temRoadType = 3;	
    508          }
    509          		else if(EPerCount >= 1.0 && StableNumbers <= 28 && BlackEndMax < 22)
    510            {
    511            temRoadType = 2;			   	
    512          }
    513            
    514          }
    515            //标准的赛道类型 1、0
    516            if(BlackEndMax >= RowMax-1)
    517            {
    518            if(fabss(Excursion)< 5 && MidLineVariance < 2&& EPerCount < 0.1)
    519            {
    520            temRoadType = 0;	
    521          }
    522          		else if(fabss(Excursion)< 15 && MidLineVariance < 20)
    523            {
    524            temRoadType = 1;
    525          }
    526          }*/
    527            
    528            
    529            //标准的赛道类型 1、0
    530            if(StableNumbers >= RowMax*0.7)
   \                     ??RTRecognition_2: (+1)
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0x2946             CMP      R1,#+70
   \   0000003E   0xDB23             BLT.N    ??RTRecognition_4
    531            {
    532              if( fabss(MidLineExcursion) < 35&&fabss(TopE1-TopE2)<20&&MidLineVariance<100||StableNumbers >= RowMax*0.9)
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x.... 0x....      BL       `fabss`
   \   0000004A   0x2823             CMP      R0,#+35
   \   0000004C   0xDA14             BGE.N    ??RTRecognition_5
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable7_21
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable7_22
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x1A40             SUBS     R0,R0,R1
   \   0000005C   0x.... 0x....      BL       `fabss`
   \   00000060   0x2814             CMP      R0,#+20
   \   00000062   0xDA09             BGE.N    ??RTRecognition_5
   \   00000064   0x.... 0x....      LDR.W    R2,??DataTable7_23
   \   00000068   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable7_24  ;; 0x40590000
   \   00000072   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000076   0xD304             BCC.N    ??RTRecognition_6
   \                     ??RTRecognition_5: (+1)
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable7_17
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x285A             CMP      R0,#+90
   \   00000080   0xDB01             BLT.N    ??RTRecognition_7
    533              {
    534                temRoadType = 0;	
   \                     ??RTRecognition_6: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xE000             B.N      ??RTRecognition_4
    535              }
    536              else// if(/*EPerCount < 0.9 &&*/ MidLineVariance > 25)
    537              {
    538                temRoadType = 1;
   \                     ??RTRecognition_7: (+1)
   \   00000086   0x2001             MOVS     R0,#+1
    539              }
    540            }
    541            if(StableNumbers < RowMax*0.7)
   \                     ??RTRecognition_4: (+1)
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable7_17
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x2946             CMP      R1,#+70
   \   00000090   0xDA18             BGE.N    ??RTRecognition_8
    542            {
    543              if( fabss(MidLineExcursion)<55&&MidLineVariance<150&&StableNumbers >= RowMax*0.5)
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable7_20
   \   00000096   0x6800             LDR      R0,[R0, #+0]
   \   00000098   0x.... 0x....      BL       `fabss`
   \   0000009C   0x2837             CMP      R0,#+55
   \   0000009E   0xDA10             BGE.N    ??RTRecognition_9
   \   000000A0   0x.... 0x....      LDR.W    R2,??DataTable7_23
   \   000000A4   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   000000A8   0x2200             MOVS     R2,#+0
   \   000000AA   0x.... 0x....      LDR.W    R3,??DataTable7_25  ;; 0x4062c000
   \   000000AE   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000B2   0xD206             BCS.N    ??RTRecognition_9
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable7_17
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x2832             CMP      R0,#+50
   \   000000BC   0xDB01             BLT.N    ??RTRecognition_9
    544              {
    545                temRoadType = 2;	
   \   000000BE   0x2002             MOVS     R0,#+2
   \   000000C0   0xE000             B.N      ??RTRecognition_8
    546              }
    547              else 
    548              {
    549                temRoadType = 3;	
   \                     ??RTRecognition_9: (+1)
   \   000000C2   0x2003             MOVS     R0,#+3
    550              }
    551              
    552            }
    553            //  //非标准的赛道处理
    554            //  if(temRoadType==-1)
    555            //  {
    556            //    StandardRoadType = 0;
    557            //    if(StableNumbers > RowMax*0.7)
    558            //    {
    559            //      temRoadType = 0;
    560            //      if (fabss(TopE1-TopE2) > 45 || Mid_K1 > 1.2 || Mid_K2 > 1.2)
    561            //      {		   
    562            //        temRoadType = 2;
    563            //        StandardRoadType = 2;
    564            //      }
    565            //      
    566            //    }
    567            //    else if (StableNumbers > RowMax*0.6/*&&fabss(TopE1-TopE2) > 27*/)
    568            //    {
    569            //      temRoadType = 2;
    570            //    }
    571            //    else 
    572            //    {
    573            //      temRoadType = 3;
    574            //    }
    575            //  }
    576            //  else
    577            //  {
    578            //    StandardRoadType = 1;
    579            //  }
    580            //	if(LastRoadType == 103)
    581            //	{
    582            //		StraightToBendCount++;
    583            //		if(StraightToBendCount > 15)
    584            //		{
    585            //			StraightToBendCount=0;	
    586            //		}
    587            //		else
    588            //		{
    589            //			temRoadType = 103;
    590            //		}
    591            //	}
    592            RoadType = temRoadType;//赛道类型判断成功
   \                     ??RTRecognition_8: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable7_26
   \   000000C8   0x7008             STRB     R0,[R1, #+0]
    593            return;
   \   000000CA   0xBD01             POP      {R0,PC}          ;; return
    594            HistoryRTProccess();//对历史赛道类型信息进行处理
    595            if(IsStraightToBend() /*&& ElementCount2 > 20 && AllSmallSCount > 30*/)//判断是否是直入弯
    596            {
    597              RoadType = 103;
    598            }
    599            if(RoadType != 103)
    600            {
    601              StraightToBendCount = 0;
    602            }
    603            
    604            HistoryRoadType[g_Rear] = RoadType;
    605            g_Rear = (g_Rear+1)%4;
    606            if(RoadType != HistoryRoadType[g_Head] && HistoryRoadType[g_Head] == HistoryRoadType[(g_Head+1)%4])
    607            {
    608              RoadType = HistoryRoadType[g_Head];	
    609            }
    610            if((g_Rear+1)%4 == g_Head)
    611            {
    612              g_Head = (g_Head+1)%4;
    613            }
    614            //	if(IsCrossing)
    615            //	{
    616            //		RoadType=2;
    617            //	}	
    618          }

   \                                 In section .bss, align 4
    619          int last_is_midline=0,this_is_midline=0;
   \                     last_is_midline:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     this_is_midline:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    620          int FindMidLine_lastismidline(int row,int lastmidline,int lastleft,int lastright)
    621          {
   \                     FindMidLine_lastismidline: (+1)
   \   00000000   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0014             MOVS     R4,R2
   \   00000008   0x001D             MOVS     R5,R3
    622            lastleft-=10;
   \   0000000A   0x3C0A             SUBS     R4,R4,#+10
    623            lastright+=10;
   \   0000000C   0x350A             ADDS     R5,R5,#+10
    624            this_is_midline=0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7_27
   \   00000014   0x6008             STR      R0,[R1, #+0]
    625            int FindMidLine_i,FindMidLine_j,FindMidLine_k;
    626            int FindMidLine_count=0,FindMidLine_count_Black=0;
   \   00000016   0x2700             MOVS     R7,#+0
   \   00000018   0xF05F 0x0800      MOVS     R8,#+0
    627            int FindMidLine_data[4]=0;
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x2110             MOVS     R1,#+16
   \   00000020   0x.... 0x....      BL       __aeabi_memclr4
    628            int row_a,row_b,row_c,row_d,row_e;
    629            int tezheng=0;
   \   00000024   0x2300             MOVS     R3,#+0
    630            if(lastleft<7) lastleft=7;
   \   00000026   0x2C07             CMP      R4,#+7
   \   00000028   0xDA00             BGE.N    ??FindMidLine_lastismidline_0
   \   0000002A   0x2407             MOVS     R4,#+7
    631            if(lastright>ColumnMax-8)lastright=ColumnMax-8;
   \                     ??FindMidLine_lastismidline_0: (+1)
   \   0000002C   0x2D53             CMP      R5,#+83
   \   0000002E   0xDB00             BLT.N    ??FindMidLine_lastismidline_1
   \   00000030   0x2552             MOVS     R5,#+82
    632            
    633            row_a=row-1;
   \                     ??FindMidLine_lastismidline_1: (+1)
   \   00000032   0x1E70             SUBS     R0,R6,#+1
    634            row_b=row;
   \   00000034   0x0031             MOVS     R1,R6
    635            row_c=row+1;
   \   00000036   0x1C72             ADDS     R2,R6,#+1
    636            row_d=row-4;
   \   00000038   0x1F33             SUBS     R3,R6,#+4
    637            row_e=row+4;
   \   0000003A   0xF116 0x0C04      ADDS     R12,R6,#+4
    638            if(row_a<0)row_a=0;
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD500             BPL.N    ??FindMidLine_lastismidline_2
   \   00000042   0x2000             MOVS     R0,#+0
    639            if(row_b<0)row_b=0;
   \                     ??FindMidLine_lastismidline_2: (+1)
   \   00000044   0x2900             CMP      R1,#+0
   \   00000046   0xD500             BPL.N    ??FindMidLine_lastismidline_3
   \   00000048   0x2100             MOVS     R1,#+0
    640            if(row_c<0)row_c=0;
   \                     ??FindMidLine_lastismidline_3: (+1)
   \   0000004A   0x2A00             CMP      R2,#+0
   \   0000004C   0xD500             BPL.N    ??FindMidLine_lastismidline_4
   \   0000004E   0x2200             MOVS     R2,#+0
    641            if(row_d<0)row_d=0;
   \                     ??FindMidLine_lastismidline_4: (+1)
   \   00000050   0x2B00             CMP      R3,#+0
   \   00000052   0xD500             BPL.N    ??FindMidLine_lastismidline_5
   \   00000054   0x2300             MOVS     R3,#+0
    642            if(row_e<0)row_e=0;
   \                     ??FindMidLine_lastismidline_5: (+1)
   \   00000056   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000005A   0xD501             BPL.N    ??FindMidLine_lastismidline_6
   \   0000005C   0xF05F 0x0C00      MOVS     R12,#+0
    643            if(row_a>RowMax-1)row_a=RowMax-1;
   \                     ??FindMidLine_lastismidline_6: (+1)
   \   00000060   0x2864             CMP      R0,#+100
   \   00000062   0xDB00             BLT.N    ??FindMidLine_lastismidline_7
   \   00000064   0x2063             MOVS     R0,#+99
    644            if(row_b>RowMax-1)row_b=RowMax-1;
   \                     ??FindMidLine_lastismidline_7: (+1)
   \   00000066   0x2964             CMP      R1,#+100
   \   00000068   0xDB00             BLT.N    ??FindMidLine_lastismidline_8
   \   0000006A   0x2163             MOVS     R1,#+99
    645            if(row_c>RowMax-1)row_c=RowMax-1;
   \                     ??FindMidLine_lastismidline_8: (+1)
   \   0000006C   0x2A64             CMP      R2,#+100
   \   0000006E   0xDB00             BLT.N    ??FindMidLine_lastismidline_9
   \   00000070   0x2263             MOVS     R2,#+99
    646            if(row_d>RowMax-1)row_d=RowMax-1;
   \                     ??FindMidLine_lastismidline_9: (+1)
   \   00000072   0x2B64             CMP      R3,#+100
   \   00000074   0xDB00             BLT.N    ??FindMidLine_lastismidline_10
   \   00000076   0x2363             MOVS     R3,#+99
    647            if(row_e>RowMax-1)row_e=RowMax-1;
   \                     ??FindMidLine_lastismidline_10: (+1)
   \   00000078   0xF1BC 0x0F64      CMP      R12,#+100
   \   0000007C   0xDB01             BLT.N    ??FindMidLine_lastismidline_11
   \   0000007E   0xF05F 0x0C63      MOVS     R12,#+99
    648            for(FindMidLine_i=lastleft;FindMidLine_i<=lastright;FindMidLine_i++)
   \                     ??FindMidLine_lastismidline_11: (+1)
   \   00000082   0xE000             B.N      ??FindMidLine_lastismidline_12
    649            {  tezheng=0;
    650            if(ThresholdData[row_b][FindMidLine_i]==Black&&
    651               ThresholdData[row_b][FindMidLine_i-3]==White&&
    652                 ThresholdData[row_b][FindMidLine_i+3]==White
    653                   ) 
    654              
    655              tezheng=1000;
    656            if(tezheng<1000) continue;
   \                     ??FindMidLine_lastismidline_13: (+1)
   \                     ??FindMidLine_lastismidline_14: (+1)
   \   00000084   0x1C64             ADDS     R4,R4,#+1
   \                     ??FindMidLine_lastismidline_12: (+1)
   \   00000086   0x42A5             CMP      R5,R4
   \   00000088   0xF2C0 0x80CC      BLT.W    ??FindMidLine_lastismidline_15
   \   0000008C   0x2300             MOVS     R3,#+0
   \   0000008E   0x.... 0x....      LDR.W    R12,??DataTable7
   \   00000092   0xF05F 0x0E5A      MOVS     LR,#+90
   \   00000096   0xFB0E 0xCC01      MLA      R12,LR,R1,R12
   \   0000009A   0xF814 0xC00C      LDRB     R12,[R4, R12]
   \   0000009E   0xF1BC 0x0F1E      CMP      R12,#+30
   \   000000A2   0xD11B             BNE.N    ??FindMidLine_lastismidline_16
   \   000000A4   0x.... 0x....      LDR.W    R12,??DataTable7
   \   000000A8   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000000AC   0xFB0E 0xCC01      MLA      R12,LR,R1,R12
   \   000000B0   0xEB14 0x0C0C      ADDS     R12,R4,R12
   \   000000B4   0xF81C 0xCC03      LDRB     R12,[R12, #-3]
   \   000000B8   0xF1BC 0x0FC8      CMP      R12,#+200
   \   000000BC   0xD10E             BNE.N    ??FindMidLine_lastismidline_16
   \   000000BE   0x.... 0x....      LDR.W    R12,??DataTable7
   \   000000C2   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000000C6   0xFB0E 0xCC01      MLA      R12,LR,R1,R12
   \   000000CA   0xEB14 0x0C0C      ADDS     R12,R4,R12
   \   000000CE   0xF89C 0xC003      LDRB     R12,[R12, #+3]
   \   000000D2   0xF1BC 0x0FC8      CMP      R12,#+200
   \   000000D6   0xD101             BNE.N    ??FindMidLine_lastismidline_16
   \   000000D8   0xF44F 0x737A      MOV      R3,#+1000
   \                     ??FindMidLine_lastismidline_16: (+1)
   \   000000DC   0xF5B3 0x7F7A      CMP      R3,#+1000
   \   000000E0   0xDBD0             BLT.N    ??FindMidLine_lastismidline_13
    657            if(row_c!=row_b&&
    658               (ThresholdData[row_c][FindMidLine_i]==Black||
    659                ThresholdData[row_c][FindMidLine_i-1]==Black||
    660                  ThresholdData[row_c][FindMidLine_i+1]==Black)
    661                 )
   \   000000E2   0x428A             CMP      R2,R1
   \   000000E4   0xD025             BEQ.N    ??FindMidLine_lastismidline_17
   \   000000E6   0x.... 0x....      LDR.W    R12,??DataTable7
   \   000000EA   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000000EE   0xFB0E 0xCC02      MLA      R12,LR,R2,R12
   \   000000F2   0xF814 0xC00C      LDRB     R12,[R4, R12]
   \   000000F6   0xF1BC 0x0F1E      CMP      R12,#+30
   \   000000FA   0xD019             BEQ.N    ??FindMidLine_lastismidline_18
   \   000000FC   0x.... 0x....      LDR.W    R12,??DataTable7
   \   00000100   0xF05F 0x0E5A      MOVS     LR,#+90
   \   00000104   0xFB0E 0xCC02      MLA      R12,LR,R2,R12
   \   00000108   0xEB14 0x0C0C      ADDS     R12,R4,R12
   \   0000010C   0xF81C 0xCC01      LDRB     R12,[R12, #-1]
   \   00000110   0xF1BC 0x0F1E      CMP      R12,#+30
   \   00000114   0xD00C             BEQ.N    ??FindMidLine_lastismidline_18
   \   00000116   0x.... 0x....      LDR.W    R12,??DataTable7
   \   0000011A   0xF05F 0x0E5A      MOVS     LR,#+90
   \   0000011E   0xFB0E 0xCC02      MLA      R12,LR,R2,R12
   \   00000122   0xEB14 0x0C0C      ADDS     R12,R4,R12
   \   00000126   0xF89C 0xC001      LDRB     R12,[R12, #+1]
   \   0000012A   0xF1BC 0x0F1E      CMP      R12,#+30
   \   0000012E   0xD100             BNE.N    ??FindMidLine_lastismidline_17
    662              tezheng+=100;
   \                     ??FindMidLine_lastismidline_18: (+1)
   \   00000130   0x3364             ADDS     R3,R3,#+100
    663            if(row_a!=row_b&&
    664               (ThresholdData[row_a][FindMidLine_i]==Black||
    665                ThresholdData[row_a][FindMidLine_i-1]==Black||
    666                  ThresholdData[row_a][FindMidLine_i+1]==Black)
    667                 &&tezheng<1100
    668                   )
   \                     ??FindMidLine_lastismidline_17: (+1)
   \   00000132   0x4288             CMP      R0,R1
   \   00000134   0xD029             BEQ.N    ??FindMidLine_lastismidline_19
   \   00000136   0x.... 0x....      LDR.W    R12,??DataTable7
   \   0000013A   0xF05F 0x0E5A      MOVS     LR,#+90
   \   0000013E   0xFB0E 0xCC00      MLA      R12,LR,R0,R12
   \   00000142   0xF814 0xC00C      LDRB     R12,[R4, R12]
   \   00000146   0xF1BC 0x0F1E      CMP      R12,#+30
   \   0000014A   0xD019             BEQ.N    ??FindMidLine_lastismidline_20
   \   0000014C   0x.... 0x....      LDR.W    R12,??DataTable7
   \   00000150   0xF05F 0x0E5A      MOVS     LR,#+90
   \   00000154   0xFB0E 0xCC00      MLA      R12,LR,R0,R12
   \   00000158   0xEB14 0x0C0C      ADDS     R12,R4,R12
   \   0000015C   0xF81C 0xCC01      LDRB     R12,[R12, #-1]
   \   00000160   0xF1BC 0x0F1E      CMP      R12,#+30
   \   00000164   0xD00C             BEQ.N    ??FindMidLine_lastismidline_20
   \   00000166   0x.... 0x....      LDR.W    R12,??DataTable7
   \   0000016A   0xF05F 0x0E5A      MOVS     LR,#+90
   \   0000016E   0xFB0E 0xCC00      MLA      R12,LR,R0,R12
   \   00000172   0xEB14 0x0C0C      ADDS     R12,R4,R12
   \   00000176   0xF89C 0xC001      LDRB     R12,[R12, #+1]
   \   0000017A   0xF1BC 0x0F1E      CMP      R12,#+30
   \   0000017E   0xD104             BNE.N    ??FindMidLine_lastismidline_19
   \                     ??FindMidLine_lastismidline_20: (+1)
   \   00000180   0xF240 0x4C4C      MOVW     R12,#+1100
   \   00000184   0x4563             CMP      R3,R12
   \   00000186   0xDA00             BGE.N    ??FindMidLine_lastismidline_19
    669              tezheng+=100;
   \   00000188   0x3364             ADDS     R3,R3,#+100
    670            if(tezheng<1100) continue;
   \                     ??FindMidLine_lastismidline_19: (+1)
   \   0000018A   0xF240 0x4C4C      MOVW     R12,#+1100
   \   0000018E   0x4563             CMP      R3,R12
   \   00000190   0xF6FF 0xAF78      BLT.W    ??FindMidLine_lastismidline_14
    671            FindMidLine_count_Black=0;
   \                     ??FindMidLine_lastismidline_21: (+1)
   \   00000194   0xF05F 0x0800      MOVS     R8,#+0
    672            for(FindMidLine_j=row_a;FindMidLine_j<=row_c;FindMidLine_j++)
   \   00000198   0x4684             MOV      R12,R0
   \   0000019A   0xE014             B.N      ??FindMidLine_lastismidline_22
    673            {
    674              for(FindMidLine_k=FindMidLine_i-7;FindMidLine_k<=FindMidLine_i+7;FindMidLine_k++)
    675              {
    676                if(ThresholdData[FindMidLine_j][FindMidLine_k]==Black)FindMidLine_count_Black++;
   \                     ??FindMidLine_lastismidline_23: (+1)
   \   0000019C   0x.... 0x....      LDR.W    R9,??DataTable7
   \   000001A0   0xF05F 0x0A5A      MOVS     R10,#+90
   \   000001A4   0xFB0A 0x990C      MLA      R9,R10,R12,R9
   \   000001A8   0xF81E 0x9009      LDRB     R9,[LR, R9]
   \   000001AC   0xF1B9 0x0F1E      CMP      R9,#+30
   \   000001B0   0xD101             BNE.N    ??FindMidLine_lastismidline_24
   \   000001B2   0xF118 0x0801      ADDS     R8,R8,#+1
    677              }   
   \                     ??FindMidLine_lastismidline_24: (+1)
   \   000001B6   0xF11E 0x0E01      ADDS     LR,LR,#+1
   \                     ??FindMidLine_lastismidline_25: (+1)
   \   000001BA   0xF114 0x0907      ADDS     R9,R4,#+7
   \   000001BE   0x45F1             CMP      R9,LR
   \   000001C0   0xDAEC             BGE.N    ??FindMidLine_lastismidline_23
   \   000001C2   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \                     ??FindMidLine_lastismidline_22: (+1)
   \   000001C6   0x4562             CMP      R2,R12
   \   000001C8   0xDB02             BLT.N    ??FindMidLine_lastismidline_26
   \   000001CA   0xF1B4 0x0E07      SUBS     LR,R4,#+7
   \   000001CE   0xE7F4             B.N      ??FindMidLine_lastismidline_25
    678            }
    679            
    680            if(FindMidLine_count_Black<=8*(row_c-row_a+1))tezheng+=10;
   \                     ??FindMidLine_lastismidline_26: (+1)
   \   000001D0   0xEBB2 0x0C00      SUBS     R12,R2,R0
   \   000001D4   0xF11C 0x0C01      ADDS     R12,R12,#+1
   \   000001D8   0xEA5F 0x0CCC      LSLS     R12,R12,#+3
   \   000001DC   0x45C4             CMP      R12,R8
   \   000001DE   0xDB00             BLT.N    ??FindMidLine_lastismidline_27
   \   000001E0   0x330A             ADDS     R3,R3,#+10
    681            
    682            if(tezheng>=1110) 
   \                     ??FindMidLine_lastismidline_27: (+1)
   \   000001E2   0xF240 0x4C56      MOVW     R12,#+1110
   \   000001E6   0x4563             CMP      R3,R12
   \   000001E8   0xF6FF 0xAF4C      BLT.W    ??FindMidLine_lastismidline_14
    683            {
    684              FindMidLine_data[FindMidLine_count++]=FindMidLine_i;
   \   000001EC   0xA800             ADD      R0,SP,#+0
   \   000001EE   0xF840 0x4027      STR      R4,[R0, R7, LSL #+2]
   \   000001F2   0x1C7F             ADDS     R7,R7,#+1
    685              FindMidLine_i+=7;
   \   000001F4   0x1DE4             ADDS     R4,R4,#+7
    686              if(row>RowMax-BlackEndMax&&(fabss(FindMidLine_data[0]-BlackEndColumnMax)>30))   return -1;
   \   000001F6   0x....             LDR.N    R0,??DataTable7_5
   \   000001F8   0x6800             LDR      R0,[R0, #+0]
   \   000001FA   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   000001FE   0x42B0             CMP      R0,R6
   \   00000200   0xDA0A             BGE.N    ??FindMidLine_lastismidline_28
   \   00000202   0x9800             LDR      R0,[SP, #+0]
   \   00000204   0x....             LDR.N    R1,??DataTable7_15
   \   00000206   0x6809             LDR      R1,[R1, #+0]
   \   00000208   0x1A40             SUBS     R0,R0,R1
   \   0000020A   0x.... 0x....      BL       `fabss`
   \   0000020E   0x281F             CMP      R0,#+31
   \   00000210   0xDB02             BLT.N    ??FindMidLine_lastismidline_28
   \   00000212   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000216   0xE01F             B.N      ??FindMidLine_lastismidline_29
    687              this_is_midline=1;
   \                     ??FindMidLine_lastismidline_28: (+1)
   \   00000218   0x2001             MOVS     R0,#+1
   \   0000021A   0x....             LDR.N    R1,??DataTable7_27
   \   0000021C   0x6008             STR      R0,[R1, #+0]
    688              return FindMidLine_data[0]+2;
   \   0000021E   0x9800             LDR      R0,[SP, #+0]
   \   00000220   0x1C80             ADDS     R0,R0,#+2
   \   00000222   0xE019             B.N      ??FindMidLine_lastismidline_29
    689              
    690            }
    691            
    692            }
    693            
    694            if(FindMidLine_count==0)
   \                     ??FindMidLine_lastismidline_15: (+1)
   \   00000224   0x2F00             CMP      R7,#+0
   \   00000226   0xD102             BNE.N    ??FindMidLine_lastismidline_30
    695            {
    696              return -1;
   \   00000228   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000022C   0xE014             B.N      ??FindMidLine_lastismidline_29
    697            }
    698            else 
    699            { if(row>RowMax-BlackEndMax&&(fabss(FindMidLine_data[0]-BlackEndColumnMax)>30))   return -1;
   \                     ??FindMidLine_lastismidline_30: (+1)
   \   0000022E   0x....             LDR.N    R0,??DataTable7_5
   \   00000230   0x6800             LDR      R0,[R0, #+0]
   \   00000232   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   00000236   0x42B0             CMP      R0,R6
   \   00000238   0xDA0A             BGE.N    ??FindMidLine_lastismidline_31
   \   0000023A   0x9800             LDR      R0,[SP, #+0]
   \   0000023C   0x....             LDR.N    R1,??DataTable7_15
   \   0000023E   0x6809             LDR      R1,[R1, #+0]
   \   00000240   0x1A40             SUBS     R0,R0,R1
   \   00000242   0x.... 0x....      BL       `fabss`
   \   00000246   0x281F             CMP      R0,#+31
   \   00000248   0xDB02             BLT.N    ??FindMidLine_lastismidline_31
   \   0000024A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000024E   0xE003             B.N      ??FindMidLine_lastismidline_29
    700              this_is_midline=1;
   \                     ??FindMidLine_lastismidline_31: (+1)
   \   00000250   0x2001             MOVS     R0,#+1
   \   00000252   0x....             LDR.N    R1,??DataTable7_27
   \   00000254   0x6008             STR      R0,[R1, #+0]
    701              return FindMidLine_data[0];
   \   00000256   0x9800             LDR      R0,[SP, #+0]
   \                     ??FindMidLine_lastismidline_29: (+1)
   \   00000258   0xB004             ADD      SP,SP,#+16
   \   0000025A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    702            }
    703            
    704            
    705            
    706            
    707            
    708            
    709            
    710            
    711          }
    712          
    713          

   \                                 In section .text, align 2, keep-with-next
    714          int FindMidLine_lastisnotmidline(int row,int lastmidline,int lastleft,int lastright)
    715          { return FindMidLine_lastismidline(row,lastmidline,lastleft,lastright);
   \                     FindMidLine_lastisnotmidline: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       FindMidLine_lastismidline
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    716          int i_FindMidLine=0;
    717          int i_Find_left,i_Find_right;
    718          int Find_leftline=-45,Find_rightline=-15;
    719          this_is_midline=0;
    720          int f_left,f_right;
    721          int found_left=-1,found_right=-1;
    722          for(i_FindMidLine=0;i_FindMidLine<40;i_FindMidLine++)
    723          {
    724            found_left=-1;found_right=-1;
    725            f_left=lastmidline-i_FindMidLine;
    726            f_right=lastmidline+i_FindMidLine;
    727            
    728            if(f_left<8)f_left=8;
    729            if(f_right>ColumnMax-9)f_right=ColumnMax-9;
    730            if(ThresholdData[row][f_left]==Black&&ThresholdData[row][f_left+2]==White&&ThresholdData[row][f_left+3]==White&&ThresholdData[row][f_left+1]==White&&ThresholdData[row][f_left-8]==White
    731               &&(ThresholdData[row][f_left+1]==Black||ThresholdData[row][f_left-1]==Black||ThresholdData[row+1][f_left]==Black||ThresholdData[row][f_left-1]==Black)) found_left=f_left;
    732            if(ThresholdData[row][f_right]==Black&&ThresholdData[row][f_right-2]==White&&ThresholdData[row][f_right-3]==White&&ThresholdData[row][f_right-1]==White&&ThresholdData[row][f_right+8]==White
    733               &&(ThresholdData[row][f_right+1]==Black==Black||ThresholdData[row][f_right-1]==Black||ThresholdData[row+1][f_right]==Black||ThresholdData[row][f_right-1]==Black)) found_right=f_right;  
    734            if(found_left>-1||found_right>-1) break;
    735          }
    736          
    737          if(found_left>-1)
    738          {
    739            this_is_midline=1;
    740            
    741            return found_left;
    742          }
    743          else if(found_right>-1)
    744          {
    745            this_is_midline=1;
    746            
    747            return found_right;
    748          }
    749          
    750          
    751          else
    752          {
    753            this_is_midline=0;
    754            return -1;
    755          }
    756          
    757          
    758          
    759          
    760          }

   \                                 In section .bss, align 4
    761          int hx_end[ColumnMax]=0;
   \                     hx_end:
   \   00000000                      DS8 360

   \                                 In section .data, align 4
    762          int hx_end_line=RowMax;
   \                     hx_end_line:
   \   00000000   0x00000064         DC32 100

   \                                 In section .text, align 2, keep-with-next
    763          int FindHeixian()
    764          {
   \                     FindHeixian: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    765            int hx_j,hx_k;
    766            int Cfind,Rfind;
    767            int hx_row=12;
   \   00000002   0x200C             MOVS     R0,#+12
    768            int hx_find_count;
    769            int find_white=0;
   \   00000004   0x2100             MOVS     R1,#+0
    770            hx_end_line=RowMax;
   \   00000006   0x2264             MOVS     R2,#+100
   \   00000008   0x....             LDR.N    R3,??DataTable7_28
   \   0000000A   0x601A             STR      R2,[R3, #+0]
    771            hx_find_count_max=0;
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x....             LDR.N    R3,??DataTable7_29
   \   00000010   0x601A             STR      R2,[R3, #+0]
    772            hx_found_Column=0;
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x....             LDR.N    R3,??DataTable7_30
   \   00000016   0x601A             STR      R2,[R3, #+0]
    773            Cfind=1;
   \   00000018   0x2201             MOVS     R2,#+1
    774            hx_find_count=0;
   \   0000001A   0x2400             MOVS     R4,#+0
    775            
    776            for(hx_j=0;hx_j<ColumnMax-1;hx_j++)
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0xE045             B.N      ??FindHeixian_0
    777            {find_white=0;
    778              Rfind=1;
    779             
    780              for(hx_k=RowMax-1;hx_k>40;hx_k--)
    781              {  if(hx_k>90)hx_row=14;else hx_row=12;
    782                if(ThresholdData[hx_k][hx_j]==White) 
    783                {find_white++;}
    784                else if(ThresholdData[hx_k-1][hx_j]==Black&&ThresholdData[hx_k-2][hx_j]==Black&&ThresholdData[hx_k-3][hx_j]==Black&&
    785                        ThresholdData[hx_k-hx_row][hx_j]==White&&ThresholdData[hx_k-hx_row-1][hx_j]==White&&(BlackEndMax<8||find_white>0)       
    786                        &&hx_k<(RowMax-BlackEndMax+15)
    787                          )
    788                {
    789                  hx_find_count++; 
    790                  hx_end[hx_j]=hx_k-hx_row;
    791                  break;
    792                }
    793                else if(ThresholdData[hx_k-1][hx_j]==Black&&ThresholdData[hx_k-2][hx_j]==Black&&ThresholdData[hx_k-3][hx_j]==Black&&
    794                        ThresholdData[hx_k-hx_row][hx_j]==Black&&ThresholdData[hx_k-hx_row-1][hx_j]==Black       
    795                          )
   \                     ??FindHeixian_1: (+1)
   \   00000020   0x....             LDR.N    R3,??DataTable7
   \   00000022   0x275A             MOVS     R7,#+90
   \   00000024   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   00000028   0x18EB             ADDS     R3,R5,R3
   \   0000002A   0xF813 0x3C5A      LDRB     R3,[R3, #-90]
   \   0000002E   0x2B1E             CMP      R3,#+30
   \   00000030   0xD14B             BNE.N    ??FindHeixian_2
   \   00000032   0x....             LDR.N    R3,??DataTable7
   \   00000034   0x275A             MOVS     R7,#+90
   \   00000036   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   0000003A   0x18EB             ADDS     R3,R5,R3
   \   0000003C   0xF813 0x3CB4      LDRB     R3,[R3, #-180]
   \   00000040   0x2B1E             CMP      R3,#+30
   \   00000042   0xD142             BNE.N    ??FindHeixian_2
   \   00000044   0x....             LDR.N    R3,??DataTable7
   \   00000046   0x275A             MOVS     R7,#+90
   \   00000048   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   0000004C   0x18EB             ADDS     R3,R5,R3
   \   0000004E   0xF5B3 0x7387      SUBS     R3,R3,#+270
   \   00000052   0x781B             LDRB     R3,[R3, #+0]
   \   00000054   0x2B1E             CMP      R3,#+30
   \   00000056   0xD138             BNE.N    ??FindHeixian_2
   \   00000058   0x....             LDR.N    R3,??DataTable7
   \   0000005A   0x1A17             SUBS     R7,R2,R0
   \   0000005C   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000060   0xFB0C 0x3307      MLA      R3,R12,R7,R3
   \   00000064   0x5CEB             LDRB     R3,[R5, R3]
   \   00000066   0x2B1E             CMP      R3,#+30
   \   00000068   0xD12F             BNE.N    ??FindHeixian_2
   \   0000006A   0x....             LDR.N    R3,??DataTable7
   \   0000006C   0x1A10             SUBS     R0,R2,R0
   \   0000006E   0x275A             MOVS     R7,#+90
   \   00000070   0xFB07 0x3000      MLA      R0,R7,R0,R3
   \   00000074   0x1828             ADDS     R0,R5,R0
   \   00000076   0xF810 0x0C5A      LDRB     R0,[R0, #-90]
   \   0000007A   0x281E             CMP      R0,#+30
   \   0000007C   0xD125             BNE.N    ??FindHeixian_2
    796                {
    797                  Rfind=0;
   \   0000007E   0x2600             MOVS     R6,#+0
    798                  break;
    799                }
    800                
    801              }
    802              if(hx_find_count>hx_find_count_max)
   \                     ??FindHeixian_3: (+1)
   \   00000080   0x....             LDR.N    R0,??DataTable7_29
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x42A0             CMP      R0,R4
   \   00000086   0xDA0D             BGE.N    ??FindHeixian_4
    803              {
    804                hx_find_count_max=hx_find_count;
   \   00000088   0x....             LDR.N    R0,??DataTable7_29
   \   0000008A   0x6004             STR      R4,[R0, #+0]
    805                hx_found_Column=hx_j-(int)(hx_find_count*0.5);    
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x.... 0x....      BL       __aeabi_i2d
   \   00000092   0x2200             MOVS     R2,#+0
   \   00000094   0x....             LDR.N    R3,??DataTable7_31  ;; 0x3fe00000
   \   00000096   0x.... 0x....      BL       __aeabi_dmul
   \   0000009A   0x.... 0x....      BL       __aeabi_d2iz
   \   0000009E   0x1A28             SUBS     R0,R5,R0
   \   000000A0   0x....             LDR.N    R1,??DataTable7_30
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    806              }
    807              
    808              if(Rfind==0){hx_find_count=0;}
   \                     ??FindHeixian_4: (+1)
   \   000000A4   0x2E00             CMP      R6,#+0
   \   000000A6   0xD100             BNE.N    ??FindHeixian_5
   \   000000A8   0x2400             MOVS     R4,#+0
   \                     ??FindHeixian_5: (+1)
   \   000000AA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??FindHeixian_0: (+1)
   \   000000AC   0x2D59             CMP      R5,#+89
   \   000000AE   0xDA59             BGE.N    ??FindHeixian_6
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x2601             MOVS     R6,#+1
   \   000000B4   0x2263             MOVS     R2,#+99
   \   000000B6   0xE009             B.N      ??FindHeixian_7
   \                     ??FindHeixian_8: (+1)
   \   000000B8   0x200C             MOVS     R0,#+12
   \                     ??FindHeixian_9: (+1)
   \   000000BA   0x....             LDR.N    R3,??DataTable7
   \   000000BC   0x275A             MOVS     R7,#+90
   \   000000BE   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   000000C2   0x5CEB             LDRB     R3,[R5, R3]
   \   000000C4   0x2BC8             CMP      R3,#+200
   \   000000C6   0xD107             BNE.N    ??FindHeixian_10
   \   000000C8   0x1C49             ADDS     R1,R1,#+1
   \                     ??FindHeixian_2: (+1)
   \   000000CA   0x1E52             SUBS     R2,R2,#+1
   \                     ??FindHeixian_7: (+1)
   \   000000CC   0x2A29             CMP      R2,#+41
   \   000000CE   0xDBD7             BLT.N    ??FindHeixian_3
   \   000000D0   0x2A5B             CMP      R2,#+91
   \   000000D2   0xDBF1             BLT.N    ??FindHeixian_8
   \   000000D4   0x200E             MOVS     R0,#+14
   \   000000D6   0xE7F0             B.N      ??FindHeixian_9
   \                     ??FindHeixian_10: (+1)
   \   000000D8   0x....             LDR.N    R3,??DataTable7
   \   000000DA   0x275A             MOVS     R7,#+90
   \   000000DC   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   000000E0   0x18EB             ADDS     R3,R5,R3
   \   000000E2   0xF813 0x3C5A      LDRB     R3,[R3, #-90]
   \   000000E6   0x2B1E             CMP      R3,#+30
   \   000000E8   0xD19A             BNE.N    ??FindHeixian_1
   \   000000EA   0x....             LDR.N    R3,??DataTable7
   \   000000EC   0x275A             MOVS     R7,#+90
   \   000000EE   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   000000F2   0x18EB             ADDS     R3,R5,R3
   \   000000F4   0xF813 0x3CB4      LDRB     R3,[R3, #-180]
   \   000000F8   0x2B1E             CMP      R3,#+30
   \   000000FA   0xD191             BNE.N    ??FindHeixian_1
   \   000000FC   0x....             LDR.N    R3,??DataTable7
   \   000000FE   0x275A             MOVS     R7,#+90
   \   00000100   0xFB07 0x3302      MLA      R3,R7,R2,R3
   \   00000104   0x18EB             ADDS     R3,R5,R3
   \   00000106   0xF5B3 0x7387      SUBS     R3,R3,#+270
   \   0000010A   0x781B             LDRB     R3,[R3, #+0]
   \   0000010C   0x2B1E             CMP      R3,#+30
   \   0000010E   0xD187             BNE.N    ??FindHeixian_1
   \   00000110   0x....             LDR.N    R3,??DataTable7
   \   00000112   0x1A17             SUBS     R7,R2,R0
   \   00000114   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000118   0xFB0C 0x3307      MLA      R3,R12,R7,R3
   \   0000011C   0x5CEB             LDRB     R3,[R5, R3]
   \   0000011E   0x2BC8             CMP      R3,#+200
   \   00000120   0xF47F 0xAF7E      BNE.W    ??FindHeixian_1
   \   00000124   0x....             LDR.N    R3,??DataTable7
   \   00000126   0x1A17             SUBS     R7,R2,R0
   \   00000128   0xF05F 0x0C5A      MOVS     R12,#+90
   \   0000012C   0xFB0C 0x3307      MLA      R3,R12,R7,R3
   \   00000130   0x18EB             ADDS     R3,R5,R3
   \   00000132   0xF813 0x3C5A      LDRB     R3,[R3, #-90]
   \   00000136   0x2BC8             CMP      R3,#+200
   \   00000138   0xF47F 0xAF72      BNE.W    ??FindHeixian_1
   \   0000013C   0x....             LDR.N    R3,??DataTable7_5
   \   0000013E   0x681B             LDR      R3,[R3, #+0]
   \   00000140   0x2B08             CMP      R3,#+8
   \   00000142   0xDB02             BLT.N    ??FindHeixian_11
   \   00000144   0x2901             CMP      R1,#+1
   \   00000146   0xF6FF 0xAF6B      BLT.W    ??FindHeixian_1
   \                     ??FindHeixian_11: (+1)
   \   0000014A   0x....             LDR.N    R3,??DataTable7_5
   \   0000014C   0x681B             LDR      R3,[R3, #+0]
   \   0000014E   0xF1D3 0x0373      RSBS     R3,R3,#+115
   \   00000152   0x429A             CMP      R2,R3
   \   00000154   0xF6BF 0xAF64      BGE.W    ??FindHeixian_1
   \   00000158   0x1C64             ADDS     R4,R4,#+1
   \   0000015A   0x1A10             SUBS     R0,R2,R0
   \   0000015C   0x....             LDR.N    R1,??DataTable7_32
   \   0000015E   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
   \   00000162   0xE78D             B.N      ??FindHeixian_3
    809              
    810              
    811              
    812            }
    813            
    814            hx_end_line=hx_end[hx_found_Column]-8;
   \                     ??FindHeixian_6: (+1)
   \   00000164   0x....             LDR.N    R0,??DataTable7_32
   \   00000166   0x....             LDR.N    R1,??DataTable7_30
   \   00000168   0x6809             LDR      R1,[R1, #+0]
   \   0000016A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000016E   0x3808             SUBS     R0,R0,#+8
   \   00000170   0x....             LDR.N    R1,??DataTable7_28
   \   00000172   0x6008             STR      R0,[R1, #+0]
    815            if(hx_end_line<10)hx_end_line=10;
   \   00000174   0x....             LDR.N    R0,??DataTable7_28
   \   00000176   0x6800             LDR      R0,[R0, #+0]
   \   00000178   0x280A             CMP      R0,#+10
   \   0000017A   0xDA02             BGE.N    ??FindHeixian_12
   \   0000017C   0x200A             MOVS     R0,#+10
   \   0000017E   0x....             LDR.N    R1,??DataTable7_28
   \   00000180   0x6008             STR      R0,[R1, #+0]
    816            return hx_find_count_max; 
   \                     ??FindHeixian_12: (+1)
   \   00000182   0x....             LDR.N    R0,??DataTable7_29
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    817            
    818            
    819          }
    820          
    821          
    822          
    823          
    824          

   \                                 In section .bss, align 4
    825          unsigned char ValidLine[RowMax] = {0};//1 - 左找到线 2--右找到线  两边都找到线-3 都找不到线-0
   \                     ValidLine:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
    826          int NoValidMax = 0;//连续两边找不到线计数
   \                     NoValidMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    827          int hx=0,hx_i=5000,sfminline=-1;
   \                     hx:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     hx_i:
   \   00000000   0x00001388         DC32 5000

   \                                 In section .data, align 4
   \                     sfminline:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .bss, align 4
    828          int EndType=0;
   \                     EndType:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    829          int mid_line_count=0;
   \                     mid_line_count:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    830          int mode1=0,mode2=0,mode3=0,mode4=0;
   \                     mode1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     mode2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     mode3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     mode4:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    831          int mode4_zhangai=0;
   \                     mode4_zhangai:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    832          int mid_line_count_ls=0;
   \                     mid_line_count_ls:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    833          int mid_line_count_last=0;
   \                     mid_line_count_last:
   \   00000000                      DS8 4
    834          //提取图像中心线

   \                                 In section .text, align 4, keep-with-next
    835          void GetLMR()
    836          {	
   \                     GetLMR: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB091             SUB      SP,SP,#+68
    837            int i=0,j=0;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x2000             MOVS     R0,#+0
    838            int temLeft = 0;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x9101             STR      R1,[SP, #+4]
    839            int temRight = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x9101             STR      R1,[SP, #+4]
    840            int pLeft = ColumnMax/2,pRight = ColumnMax/2;
   \   00000012   0xF05F 0x092D      MOVS     R9,#+45
   \   00000016   0x242D             MOVS     R4,#+45
    841            unsigned char bFoundLeft = 0;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xF88D 0x1000      STRB     R1,[SP, #+0]
    842            unsigned char bFoundRight = 0;
   \   0000001E   0xF05F 0x0800      MOVS     R8,#+0
    843            unsigned char TripLen = 3;
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0xF88D 0x1001      STRB     R1,[SP, #+1]
    844            
    845            int LeftEnd = 0;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x9106             STR      R1,[SP, #+24]
    846            int RightEnd = 0;
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x9105             STR      R1,[SP, #+20]
    847            int MidEnd = 0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x9103             STR      R1,[SP, #+12]
    848            unsigned char LeftMiss = 0;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0xF88D 0x1001      STRB     R1,[SP, #+1]
    849            unsigned char RightMiss = 0;
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF88D 0x1001      STRB     R1,[SP, #+1]
    850            
    851            unsigned char MidToBlackCount = 0;
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xF88D 0x1001      STRB     R1,[SP, #+1]
    852            int zhijiao=0;
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x9110             STR      R1,[SP, #+64]
    853            
    854            int NoValidCount = 0;
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x9101             STR      R1,[SP, #+4]
    855            NoValidMax = 0;
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0xF8DF 0x2CAC      LDR.W    R2,??GetLMR_0
   \   00000054   0x6011             STR      R1,[R2, #+0]
    856            
    857            StableNumbers = 0;
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0xF8DF 0x2CA8      LDR.W    R2,??GetLMR_0+0x4
   \   0000005C   0x6011             STR      R1,[R2, #+0]
    858            LeftStableNumbers = 0;
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xF8DF 0x2CA4      LDR.W    R2,??GetLMR_0+0x8
   \   00000064   0x6011             STR      R1,[R2, #+0]
    859            RightStableNumbers = 0;
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0xF8DF 0x2CA0      LDR.W    R2,??GetLMR_0+0xC
   \   0000006C   0x6011             STR      R1,[R2, #+0]
    860            EndType=0;
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0xF8DF 0x2C9C      LDR.W    R2,??GetLMR_0+0x10
   \   00000074   0x6011             STR      R1,[R2, #+0]
    861            ValidLineCount1 = 0;
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0xF8DF 0x2C98      LDR.W    R2,??GetLMR_0+0x14
   \   0000007C   0x6011             STR      R1,[R2, #+0]
    862            ValidLineCount2 = 0;
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0xF8DF 0x2C94      LDR.W    R2,??GetLMR_0+0x18
   \   00000084   0x6011             STR      R1,[R2, #+0]
    863            int CountBlack = 0;
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x910B             STR      R1,[SP, #+44]
    864            int CountWhite = 0;
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x910A             STR      R1,[SP, #+40]
    865            midline_fcount=0;
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0xF8DF 0x2C88      LDR.W    R2,??GetLMR_0+0x1C
   \   00000094   0x6011             STR      R1,[R2, #+0]
    866            midline_fcount_max=0;
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0xF8DF 0x2C84      LDR.W    R2,??GetLMR_0+0x20
   \   0000009C   0x6011             STR      R1,[R2, #+0]
    867            last_is_midline=0;
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0xF8DF 0x2C80      LDR.W    R2,??GetLMR_0+0x24
   \   000000A4   0x6011             STR      R1,[R2, #+0]
    868            this_is_midline=0;
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0xF8DF 0x2C7C      LDR.W    R2,??GetLMR_0+0x28
   \   000000AC   0x6011             STR      R1,[R2, #+0]
    869            BlackRow=0;
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0xF8DF 0x2C78      LDR.W    R2,??GetLMR_0+0x2C
   \   000000B4   0x7011             STRB     R1,[R2, #+0]
    870            WhiteRow=0;
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0xF8DF 0x2DE4      LDR.W    R2,??GetLMR_1
   \   000000BC   0x7011             STRB     R1,[R2, #+0]
    871            WhiteRow1=0;
   \   000000BE   0x2100             MOVS     R1,#+0
   \   000000C0   0xF8DF 0x2DE0      LDR.W    R2,??GetLMR_1+0x4
   \   000000C4   0x7011             STRB     R1,[R2, #+0]
    872            sfminline=-1;
   \   000000C6   0xF05F 0x31FF      MOVS     R1,#-1
   \   000000CA   0xF8DF 0x2DDC      LDR.W    R2,??GetLMR_1+0x8
   \   000000CE   0x6011             STR      R1,[R2, #+0]
    873            mid_line_count=0;
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0xF8DF 0x2DD8      LDR.W    R2,??GetLMR_1+0xC
   \   000000D6   0x6011             STR      R1,[R2, #+0]
    874            mid_line_count_ls=0;
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0xF8DF 0x2DD4      LDR.W    R2,??GetLMR_1+0x10
   \   000000DE   0x6011             STR      R1,[R2, #+0]
    875            LeftWhite = RightWhite = 0;
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0xF8DF 0x2DD0      LDR.W    R2,??GetLMR_1+0x14
   \   000000E6   0x7011             STRB     R1,[R2, #+0]
   \   000000E8   0xF8DF 0x1DC8      LDR.W    R1,??GetLMR_1+0x14
   \   000000EC   0x7809             LDRB     R1,[R1, #+0]
   \   000000EE   0xF8DF 0x2DC8      LDR.W    R2,??GetLMR_1+0x18
   \   000000F2   0x7011             STRB     R1,[R2, #+0]
    876            int czh; //要查找的列数
    877            int cz_z,cz_y;//左右查找截至列
    878            //定义左右查找黑白点数
    879            int CountWhite_Left=0,CountBlack_Left=0,CountWhite_Right=0,CountBlack_Right=0;
   \   000000F4   0xF05F 0x0B00      MOVS     R11,#+0
   \   000000F8   0xF05F 0x0A00      MOVS     R10,#+0
   \   000000FC   0x2700             MOVS     R7,#+0
   \   000000FE   0x2500             MOVS     R5,#+0
    880            int tb_z_r=0,tb_y_r=0;
   \   00000100   0x2100             MOVS     R1,#+0
   \   00000102   0x910D             STR      R1,[SP, #+52]
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0x910C             STR      R1,[SP, #+48]
    881            yxhs=0;
   \   00000108   0x2100             MOVS     R1,#+0
   \   0000010A   0xF8DF 0x2DD4      LDR.W    R2,??GetLMR_2
   \   0000010E   0x6011             STR      R1,[R2, #+0]
    882            tbs_z=0;
   \   00000110   0x2100             MOVS     R1,#+0
   \   00000112   0xF8DF 0x2DD0      LDR.W    R2,??GetLMR_2+0x4
   \   00000116   0x6011             STR      R1,[R2, #+0]
    883            tbs_y=0;
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0xF8DF 0x2DCC      LDR.W    R2,??GetLMR_2+0x8
   \   0000011E   0x6011             STR      R1,[R2, #+0]
    884            
    885            int shizi=0;
   \   00000120   0x2100             MOVS     R1,#+0
   \   00000122   0x9101             STR      R1,[SP, #+4]
    886            int last_all_find=RowMax;
   \   00000124   0x2164             MOVS     R1,#+100
   \   00000126   0x9108             STR      R1,[SP, #+32]
    887            mode1=0;mode2=0;mode3=0;mode4=0;
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0xF8DF 0x2DC0      LDR.W    R2,??GetLMR_2+0xC
   \   0000012E   0x6011             STR      R1,[R2, #+0]
   \   00000130   0x2100             MOVS     R1,#+0
   \   00000132   0xF8DF 0x2DBC      LDR.W    R2,??GetLMR_2+0x10
   \   00000136   0x6011             STR      R1,[R2, #+0]
   \   00000138   0x2100             MOVS     R1,#+0
   \   0000013A   0xF8DF 0x2DB8      LDR.W    R2,??GetLMR_2+0x14
   \   0000013E   0x6011             STR      R1,[R2, #+0]
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0xF8DF 0x2DB4      LDR.W    R2,??GetLMR_2+0x18
   \   00000146   0x6011             STR      R1,[R2, #+0]
    888            mode4_zhangai=0;
   \   00000148   0x2100             MOVS     R1,#+0
   \   0000014A   0xF8DF 0x2DB0      LDR.W    R2,??GetLMR_2+0x1C
   \   0000014E   0x6011             STR      R1,[R2, #+0]
    889            zaw_mode=0;
   \   00000150   0x2100             MOVS     R1,#+0
   \   00000152   0xF8DF 0x2DAC      LDR.W    R2,??GetLMR_2+0x20
   \   00000156   0x6011             STR      R1,[R2, #+0]
    890            int heixian=RowMax;
   \   00000158   0x2164             MOVS     R1,#+100
   \   0000015A   0x9102             STR      R1,[SP, #+8]
    891            int heidian_count=0;
   \   0000015C   0x2100             MOVS     R1,#+0
    892            int line_7=1;
   \   0000015E   0x2201             MOVS     R2,#+1
   \   00000160   0x920F             STR      R2,[SP, #+60]
    893            int line_8=1;
   \   00000162   0x2201             MOVS     R2,#+1
   \   00000164   0x920E             STR      R2,[SP, #+56]
    894            
    895            
    896            int heixian_find_start=RowMax-1;
   \   00000166   0x2263             MOVS     R2,#+99
    897            
    898            int hx_j=0;
   \   00000168   0x2300             MOVS     R3,#+0
    899            int hx_count=0;
   \   0000016A   0xF05F 0x0C00      MOVS     R12,#+0
    900            int hx_ls_find;
    901            if(BlackEndMax<RowMax*0.6&&FindMidLine_lastismidline(RowMax-1,MidPos,0,ColumnMax)==-1)
   \   0000016E   0xF8DF 0xED94      LDR.W    LR,??GetLMR_2+0x24
   \   00000172   0xF8DE 0xE000      LDR      LR,[LR, #+0]
   \   00000176   0xF1BE 0x0F3C      CMP      LR,#+60
   \   0000017A   0xDA1D             BGE.N    ??GetLMR_3
   \   0000017C   0x235A             MOVS     R3,#+90
   \   0000017E   0x2200             MOVS     R2,#+0
   \   00000180   0xF8DF 0x0DC8      LDR.W    R0,??GetLMR_4
   \   00000184   0x6801             LDR      R1,[R0, #+0]
   \   00000186   0x2063             MOVS     R0,#+99
   \   00000188   0x.... 0x....      BL       FindMidLine_lastismidline
   \   0000018C   0xF110 0x0F01      CMN      R0,#+1
   \   00000190   0xD112             BNE.N    ??GetLMR_3
    902            {
    903            hx_find_count_max=0;
   \   00000192   0x2000             MOVS     R0,#+0
   \   00000194   0xF8DF 0x1DB8      LDR.W    R1,??GetLMR_4+0x4
   \   00000198   0x6008             STR      R0,[R1, #+0]
    904            hx_ls_find=FindHeixian();
   \   0000019A   0x.... 0x....      BL       FindHeixian
    905            if(hx_find_count_max>20)
   \   0000019E   0xF8DF 0x1DB0      LDR.W    R1,??GetLMR_4+0x4
   \   000001A2   0x6809             LDR      R1,[R1, #+0]
   \   000001A4   0x2915             CMP      R1,#+21
   \   000001A6   0xDB07             BLT.N    ??GetLMR_3
    906            {hx_i=0;
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0xF8DF 0x1DA8      LDR.W    R1,??GetLMR_4+0x8
   \   000001AE   0x6008             STR      R0,[R1, #+0]
    907            heixian=hx_end_line;
   \   000001B0   0xF8DF 0x0DA4      LDR.W    R0,??GetLMR_4+0xC
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x9002             STR      R0,[SP, #+8]
    908            }   
    909            }
    910            //  if(ThresholdData[(int)(RowMax*0.7)][MidPos]==White&&BlackEndMax<RowMax*0.5)
    911            //  { int baidian=0,heidian=0;
    912            //  for(i = RowMax-1;i >= RowMax*0.7;i--)
    913            //  {
    914            //    if(ThresholdData[i][MidPos]==White) baidian++;
    915            //    else heidian++;               
    916            //  }
    917            //  
    918            //  if(heidian>0&&heidian<14)
    919            //  {
    920            //    
    921            //    for(i = RowMax-1;i >=RowMax*0.7;i--)
    922            //    {
    923            //      if(ThresholdData[i][MidPos]==Black&&ThresholdData[i-1][MidPos]==White&&ThresholdData[i-2][MidPos]==White)
    924            //        //        for(hx_i=i;hx_i<RowMax-1;hx_i++)
    925            //        //        {hx_count=0;
    926            //        //        for(hx_j=(int)(ColumnMax*0.25);hx_j<ColumnMax*0.75;hx_j++)
    927            //        //        {
    928            //        //          if(ThresholdData[hx_i][hx_j]==White) hx_count++;
    929            //        //        }
    930            //        //        if(hx_count<8) break;
    931            //        //        }
    932            //        //      if(hx_count<8)  heixian=i-2;
    933            //        heixian=i-2;
    934            //      
    935            //    }
    936            //    
    937            //  }
    938            //  } 
    939            
    940            
    941            if(hx_i<92) hx_i++;
   \                     ??GetLMR_3: (+1)
   \   000001B8   0xF8DF 0x0D98      LDR.W    R0,??GetLMR_4+0x8
   \   000001BC   0x6800             LDR      R0,[R0, #+0]
   \   000001BE   0x285C             CMP      R0,#+92
   \   000001C0   0xDA06             BGE.N    ??GetLMR_5
   \   000001C2   0xF8DF 0x0D90      LDR.W    R0,??GetLMR_4+0x8
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0x1C40             ADDS     R0,R0,#+1
   \   000001CA   0xF8DF 0x1D88      LDR.W    R1,??GetLMR_4+0x8
   \   000001CE   0x6008             STR      R0,[R1, #+0]
    942            if(hx_i<90) hx=1;else hx=0; 
   \                     ??GetLMR_5: (+1)
   \   000001D0   0xF8DF 0x0D80      LDR.W    R0,??GetLMR_4+0x8
   \   000001D4   0x6800             LDR      R0,[R0, #+0]
   \   000001D6   0x285A             CMP      R0,#+90
   \   000001D8   0xDA04             BGE.N    ??GetLMR_6
   \   000001DA   0x2001             MOVS     R0,#+1
   \   000001DC   0xF8DF 0x1D7C      LDR.W    R1,??GetLMR_4+0x10
   \   000001E0   0x6008             STR      R0,[R1, #+0]
   \   000001E2   0xE003             B.N      ??GetLMR_7
   \                     ??GetLMR_6: (+1)
   \   000001E4   0x2000             MOVS     R0,#+0
   \   000001E6   0xF8DF 0x1D74      LDR.W    R1,??GetLMR_4+0x10
   \   000001EA   0x6008             STR      R0,[R1, #+0]
    943            
    944            
    945            //    if (mid_line_count_last>4)
    946            //  {
    947            //  
    948            //  heixian=RowMax-15;
    949            //  }
    950          label_hx:       
    951            if(heixian!=RowMax)
   \                     ??GetLMR_7: (+1)
   \   000001EC   0x9802             LDR      R0,[SP, #+8]
   \   000001EE   0x2864             CMP      R0,#+100
   \   000001F0   0xD010             BEQ.N    ??GetLMR_8
    952            {
    953              hx_i=0;
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0xF8DF 0x1D5C      LDR.W    R1,??GetLMR_4+0x8
   \   000001F8   0x6008             STR      R0,[R1, #+0]
    954              for(i=RowMax-1;i>=heixian;i--)
   \   000001FA   0x2663             MOVS     R6,#+99
   \   000001FC   0xE007             B.N      ??GetLMR_9
    955              {
    956                BlackLineData[i] = hx_found_Column;
   \                     ??GetLMR_10: (+1)
   \   000001FE   0xF8DF 0x0D60      LDR.W    R0,??GetLMR_4+0x14
   \   00000202   0x6800             LDR      R0,[R0, #+0]
   \   00000204   0xF8DF 0x1D5C      LDR.W    R1,??GetLMR_4+0x18
   \   00000208   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    957              }
   \   0000020C   0x1E76             SUBS     R6,R6,#+1
   \                     ??GetLMR_9: (+1)
   \   0000020E   0x9802             LDR      R0,[SP, #+8]
   \   00000210   0x4286             CMP      R6,R0
   \   00000212   0xDAF4             BGE.N    ??GetLMR_10
    958              
    959            }
    960            
    961            
    962            
    963            
    964            StableNumbers=RowMax-heixian;
   \                     ??GetLMR_8: (+1)
   \   00000214   0x9802             LDR      R0,[SP, #+8]
   \   00000216   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   0000021A   0xF8DF 0x1AE8      LDR.W    R1,??GetLMR_0+0x4
   \   0000021E   0x6008             STR      R0,[R1, #+0]
    965            for (i = heixian-1;i >= 0 && !MidEnd;i--)
   \   00000220   0x9802             LDR      R0,[SP, #+8]
   \   00000222   0x1E46             SUBS     R6,R0,#+1
   \   00000224   0xE007             B.N      ??GetLMR_11
    966            {tiaobian_Left[i]=0;tiaobian_Right[i]=0;
    967            int sdk;
    968            if(i>=RowMax*0.55)
    969            {
    970              sdk=i*0.4*100/RowMax;
    971              
    972            }
    973            else
    974              
    975            {
    976              sdk=5+i*0.3*100/RowMax;
    977            }
    978            // 初始化遍历指针
    979            //    BlackEndColumnMax=1;BlackEndMax = 0;
    980            if (i>RowMax*2/3) czh=30; else if (i>RowMax/3) czh=20; else czh=13;
    981            if(RowMax-i<BlackEndMax-5&&line_7)
    982            {
    983              czh=40;  
    984              pLeft = BlackEndColumnMax;
    985              pRight = BlackEndColumnMax;
    986              if (pLeft<0) pLeft=0;
    987              if (pLeft>ColumnMax-2) pLeft=ColumnMax-2;
    988              if (pRight<0) pRight=0;
    989              if (pRight>ColumnMax-2) pRight=ColumnMax-2;
    990              cz_z=3;
    991              cz_y=ColumnMax-3;
    992              
    993              
    994              
    995            }
    996            else if (i < RowMax - 3&&i != heixian-1)
    997            {       
    998              
    999              
   1000              
   1001              if(tb_z_r>0&&(tb_z_r-i)<RowMax*0.4&&MAX(RightBlack[i+1],RightBlack[i+2])>ColumnMax-12)  //左边有过跳变 
   1002              {
   1003                pLeft = ColumnMax;
   1004                pRight = ColumnMax;
   1005              }
   1006              else if(tb_y_r>0&&(tb_y_r-i)<RowMax*0.4&&MIN(LeftBlack[i+1],LeftBlack[i+2])<10)//右边有过跳变
   1007              {
   1008                pLeft = 0;
   1009                pRight = 0;
   1010              }
   1011              else
   1012              {
   1013                pLeft = LeftBlack[i+1]+czh;
   1014                pRight = RightBlack[i+1]-czh;
   1015              }
   1016              
   1017              
   1018              if (pLeft<0) pLeft=0;
   1019              if (pLeft>ColumnMax-2) pLeft=ColumnMax-2;
   1020              if (pRight<0) pRight=0;
   1021              if (pRight>ColumnMax-2) pRight=ColumnMax-2;
   1022              cz_z=LeftBlack[i+1]-czh;
   1023              cz_y=RightBlack[i+1]+czh;
   1024              
   1025              if (cz_z<0) cz_z=0;
   1026              if (cz_z>ColumnMax-1) cz_z=ColumnMax-1;
   1027              if (cz_y<0) cz_y=0;
   1028              if (cz_y>ColumnMax-1) cz_y=ColumnMax-1;
   1029              
   1030            }
   1031            else
   1032            {     
   1033              int ss;
   1034              if(BlackEndL < 5 && BlackEndR > BlackEndM)
   1035              {
   1036                pLeft = (int)(ColumnMax*3/4);//3/4
   1037                pRight = (int)(ColumnMax*3/4);	
   1038                
   1039              }
   1040              else if(BlackEndR < 5 && BlackEndL > BlackEndM)
   1041              {
   1042                pLeft = (int)(ColumnMax*1/4);//1/4
   1043                pRight = (int)(ColumnMax*1/4);
   1044              }
   1045              else
   1046              {
   1047                pLeft = (int)(ColumnMax/2);
   1048                pRight = (int)(ColumnMax/2);
   1049              }
   1050              
   1051              cz_z=3;
   1052              cz_y=ColumnMax-3;
   1053              if(heixian!=RowMax)
   1054              {
   1055                pLeft = (int)hx_found_Column;
   1056                pRight = (int)hx_found_Column;
   1057              }
   1058              
   1059              
   1060            }
   1061            
   1062            
   1063            // 初始化标记
   1064            bFoundLeft = bFoundRight = 0;
   1065            CountBlack = CountWhite = 0;
   1066            // 两条黑线边缘提取
   1067            LeftBlack[i]=-1;
   1068            RightBlack[i]=ColumnMax+1;
   1069            CountWhite_Left=0;CountBlack_Left=0;CountWhite_Right=0;CountBlack_Right=0;
   1070            //============================================================================================                
   1071            int middata=0,lastmiddata=0;
   1072            if(i > RowMax - 3)lastmiddata=MidPos; else lastmiddata=BlackLineData[i+1];
   1073            
   1074            if(last_is_midline)
   1075            {
   1076              if(i == heixian-1) middata=FindMidLine_lastismidline(i,MidPos,0,ColumnMax);
   1077               else middata=FindMidLine_lastismidline(i,BlackLineData[i+1],LeftBlack[i+1],RightBlack[i+1]);
   1078              last_is_midline=this_is_midline;
   1079              
   1080              
   1081               if(this_is_midline)
   1082              {
   1083                midline_fcount++;
   1084                if(midline_fcount_max<midline_fcount)midline_fcount_max=midline_fcount;
   1085              
   1086              }
   1087              else
   1088              {
   1089               midline_fcount=0;
   1090              }
   1091              if(middata==-1&&sfminline)
   1092              {
   1093                if(i<RowMax*0.85&&(BlackLineData[i+1]<ColumnMax*0.4||BlackLineData[i+1]>ColumnMax*0.6)&&midline_fcount_max>4)  
   1094                {EndType=5;
   1095                MidEnd = 1;                   
   1096                goto lable;
   1097                }
   1098                else if((BlackLineData[i+1]<ColumnMax*0.2||BlackLineData[i+1]>ColumnMax*0.8)&&midline_fcount_max>4)
   1099                {EndType=6;
   1100                MidEnd = 1;
   1101                goto lable;
   1102                }
   1103                if( mid_line_count_ls>4&&i>30)
   1104                {
   1105                  int mid_line_i_ls=0;
   1106                  int mid_line_i_stop=i-12;
   1107                  for(mid_line_i_ls=i;mid_line_i_ls>mid_line_i_stop&&mid_line_i_ls>=0;mid_line_i_ls--)
   1108                  {
   1109                    BlackLineData[mid_line_i_ls]=BlackEndColumnMax;
   1110                    LeftBlack[mid_line_i_ls]=BlackEndColumnMax-sdk*1;
   1111                    RightBlack[mid_line_i_ls]= BlackEndColumnMax+sdk*1;
   1112                    i--;
   1113                    StableNumbers++;
   1114                  }
   1115                  mid_line_count_ls=0; 
   1116                  goto lable;
   1117                }
   1118                mid_line_count_ls=0;
   1119              }
   1120              
   1121              
   1122              
   1123            } 
   1124            else   
   1125            {
   1126              if(i == heixian-1) middata=FindMidLine_lastisnotmidline(i,MidPos,LeftBlack[i+1],RightBlack[i+1]);
   1127              else middata=FindMidLine_lastisnotmidline(i,BlackLineData[i+1],0,ColumnMax);
   1128              last_is_midline=this_is_midline;
   1129            }                
   1130            if(this_is_midline&&sfminline<0) 
   1131            {
   1132            BlackLineData[i]=BlackEndColumnMax;
   1133            LeftBlack[i]=BlackEndColumnMax-sdk*1;
   1134            RightBlack[i]= BlackEndColumnMax+sdk*1;
   1135            sfminline+=1;
   1136            
   1137            goto lable;
   1138            }
   1139            
   1140            if(this_is_midline)
   1141            {  
   1142           
   1143              //    if(heixian!=RowMax) 
   1144              //    {
   1145              //      heixian=RowMax;
   1146              //      i=RowMax-1;
   1147              //      StableNumbers=0;
   1148              //      
   1149              //      
   1150              //      goto label_end;
   1151              //    }
   1152              
   1153              mid_line_count++;
   1154              mid_line_count_last=mid_line_count;
   1155              BlackLineData[i]=middata;
   1156              if(last_is_midline) 
   1157              { mid_line_count_ls++;
   1158              
   1159              LeftBlack[i]=middata-sdk*1;
   1160              RightBlack[i]=middata+sdk*1;
   1161              }
   1162              
   1163              goto lable;
   1164            }
   1165            
   1166            
   1167            //================================================================================                
   1168            for (j = 0;j < ColumnMax;j++)
   1169            { //定义左右查找黑白点数
   1170              
   1171              
   1172              if (ThresholdData[i][j] == Black){CountBlack++;}
   1173              else{CountWhite++;}
   1174              
   1175              // 往左搜索
   1176              if (bFoundLeft == 0 && pLeft >= cz_z )
   1177              {// 未找到左边缘则寻找
   1178                if (ThresholdData[i][pLeft+2] == Black){CountBlack_Left++;}
   1179                else{CountWhite_Left++;}
   1180                
   1181                if (ThresholdData[i][pLeft] == Black&&ThresholdData[i][pLeft+3]== White&& 
   1182                    ThresholdData[i][pLeft+1] == Black&& ThresholdData[i][pLeft+4]== White&&
   1183                      ThresholdData[i][pLeft+2] == Black&& ThresholdData[i][pLeft+5]== White)
   1184                {	// 找到左边缘
   1185                  
   1186                  
   1187                  if (pLeft+2 > 0)
   1188                  {       LeftBlack[i] = pLeft+2;
   1189                  bFoundLeft = 1;
   1190                  }
   1191                  
   1192                  
   1193                  // 如果右边缘也找到则退出
   1194                  if (bFoundRight)
   1195                  {
   1196                    break;
   1197                  }
   1198                }
   1199                else
   1200                {
   1201                  pLeft--;
   1202                  //        if(pLeft<10)
   1203                  //                 LeftEnd = 1;
   1204                  
   1205                }
   1206              }// if结束--从左到右搜索边缘
   1207              
   1208              //往右搜索
   1209              if (bFoundRight == 0 && pRight <= cz_y)
   1210              {//未找到右边缘则寻找
   1211                //if (pRight > ColumnMax - 3){break;}
   1212                if (ThresholdData[i][pRight-2] == Black)
   1213                {CountBlack_Right++;}
   1214                else{CountWhite_Right++;}
   1215                if (ThresholdData[i][pRight] == Black &&ThresholdData[i][pRight-3]== White&& 
   1216                    ThresholdData[i][pRight-1] == Black &&ThresholdData[i][pRight-4]== White&& 
   1217                      ThresholdData[i][pRight-2] == Black &&ThresholdData[i][pRight-5]== White)
   1218                {  
   1219                  
   1220                  
   1221                  // 找到右边缘
   1222                  
   1223                  if (pRight-2 < ColumnMax-1)
   1224                  {       RightBlack[i] = pRight-2;
   1225                  bFoundRight = 1;
   1226                  }
   1227                  
   1228                  // 如果左边缘也找到则退出
   1229                  if (bFoundLeft)
   1230                  {
   1231                    break;
   1232                  }
   1233                }
   1234                else
   1235                {
   1236                  pRight++;
   1237                  
   1238                }
   1239              }// if结束
   1240            }//for结束
   1241            
   1242            //===============================左边线没找到处理==============================================             
   1243            if (!bFoundLeft&&pLeft>-2&&CountWhite_Left>CountBlack_Left) //左边线没找到，且查找范围内超过一半是白点
   1244            {
   1245              CountBlack_Left=0;
   1246              CountWhite_Left=0;
   1247              tiaobian_Left[i]=1;
   1248              if(pLeft<5)pLeft=5;
   1249              for (j = pLeft+czh;j>0;j--)   // 继续往左搜索
   1250              {
   1251                if (bFoundLeft == 0 && pLeft >= 0)
   1252                {// 未找到左边缘则寻找
   1253                  if (ThresholdData[i][pLeft+2] == Black){CountBlack_Left++;}
   1254                  else{CountWhite_Left++;}
   1255                  
   1256                  if (ThresholdData[i][pLeft] == Black&&ThresholdData[i][pLeft+3]== White&& 
   1257                      ThresholdData[i][pLeft+1] == Black&& ThresholdData[i][pLeft+4]== White&&
   1258                        ThresholdData[i][pLeft+2] == Black&& ThresholdData[i][pLeft+5]== White)
   1259                  {	// 找到左边缘
   1260                    
   1261                    
   1262                    if (pLeft+2 > 0)
   1263                    {       LeftBlack[i] = pLeft+2;
   1264                    bFoundLeft = 1;
   1265                    }
   1266                    
   1267                    
   1268                    break;
   1269                    
   1270                  }
   1271                  else
   1272                  {
   1273                    pLeft--;
   1274                    
   1275                  }
   1276                }// if结束--从左到右搜索边缘
   1277                
   1278                
   1279              }   //左边继续超找for结束
   1280              if(!bFoundLeft&&CountWhite_Left>CountBlack_Left) //仍然未找到，且大部分是白点    
   1281              {
   1282                tiaobian_Left[i]=2;
   1283                LeftBlack[i]=-5;
   1284                bFoundLeft = 1;
   1285              }    
   1286            }
   1287            
   1288            
   1289            
   1290            else if(!bFoundLeft&&pLeft<ColumnMax&&CountWhite_Left<CountBlack_Left)//左边线没找到，且查找范围内超过一半是黑点
   1291            {
   1292              CountBlack_Left=0;
   1293              CountWhite_Left=0;
   1294              tiaobian_Left[i]=-1;
   1295              for (j = pLeft;j<ColumnMax;j++)   // 继续往右搜索
   1296              {
   1297                if (bFoundLeft == 0 && pLeft >= 0)
   1298                {// 未找到左边缘则寻找
   1299                  if (ThresholdData[i][pLeft+2] == Black){CountBlack_Left++;}
   1300                  else{CountWhite_Left++;}
   1301                  
   1302                  if (ThresholdData[i][pLeft] == Black&&ThresholdData[i][pLeft+3]== White&& 
   1303                      ThresholdData[i][pLeft+1] == Black&& ThresholdData[i][pLeft+4]== White&&
   1304                        ThresholdData[i][pLeft+2] == Black&& ThresholdData[i][pLeft+5]== White)
   1305                  {	// 找到左边缘
   1306                    
   1307                    
   1308                    if (pLeft+2 > 0)
   1309                    {       LeftBlack[i] = pLeft+2;
   1310                    bFoundLeft = 1;
   1311                    }
   1312                    
   1313                    
   1314                  }
   1315                  else
   1316                  {
   1317                    pLeft++;
   1318                    
   1319                  }
   1320                }// if结束--从左到右搜索边缘
   1321                
   1322                
   1323              }   //左边继续超找for结束
   1324              if(!bFoundLeft&&CountWhite_Left<CountBlack_Left) //向右查找仍然未找到，且大部分是黑点    
   1325              {
   1326                tiaobian_Left[i]=-2;
   1327                LeftEnd=1;
   1328                LeftBlack[i]=ColumnMax+5;
   1329              }    
   1330            }
   1331            
   1332            //===============================右边线没找到处理==============================================        
   1333            if (!bFoundRight&&pRight<=ColumnMax&&CountWhite_Right>CountBlack_Right) //右边线没找到，且查找范围内超过一半是白点
   1334            {
   1335              CountBlack_Right=0;
   1336              CountWhite_Right=0;
   1337              tiaobian_Right[i]=1;
   1338              if(pRight>ColumnMax-1) pRight=ColumnMax-6;
   1339              for (j = pRight-czh;j<ColumnMax;j++)   // 继续往右搜索
   1340              {
   1341                //往右搜索
   1342                if (bFoundRight == 0 && pRight <ColumnMax)
   1343                {//未找到右边缘则寻找
   1344                  
   1345                  if (ThresholdData[i][pRight-2] == Black){CountBlack_Right++;}
   1346                  else{CountWhite_Right++;}
   1347                  if (ThresholdData[i][pRight] == Black &&ThresholdData[i][pRight-3]== White&& 
   1348                      ThresholdData[i][pRight-1] == Black &&ThresholdData[i][pRight-4]== White&& 
   1349                        ThresholdData[i][pRight-2] == Black &&ThresholdData[i][pRight-5]== White)
   1350                  {
   1351                    // 找到右边缘
   1352                    
   1353                    if (pRight-2 < ColumnMax-1)
   1354                    {       RightBlack[i] = pRight-2;
   1355                    bFoundRight = 1;
   1356                    }
   1357                    
   1358                    break;
   1359                    
   1360                  }
   1361                  else
   1362                  {
   1363                    pRight++;
   1364                    
   1365                  }
   1366                }// if结束
   1367                
   1368                
   1369              }   //右边继续超找for结束
   1370              if(!bFoundRight&&CountWhite_Right>CountBlack_Right) //仍然未找到，且大部分是白点    
   1371              {
   1372                tiaobian_Right[i]=2;
   1373                RightBlack[i]=ColumnMax+5;
   1374                bFoundRight = 1;
   1375              }      
   1376            }
   1377            
   1378            
   1379            
   1380            else if(!bFoundRight&&pRight>0&&CountWhite_Right<CountBlack_Right)   //右边线没找到，且查找范围内超过一半是黑点
   1381            {
   1382              CountBlack_Right=0;
   1383              CountWhite_Right=0;
   1384              tiaobian_Right[i]=-1;
   1385              for (j = pRight;j>0;j--)   // 继续往左搜索
   1386              {
   1387                //往右搜索
   1388                if (bFoundRight == 0 && pRight <ColumnMax)
   1389                {//未找到右边缘则寻找
   1390                  
   1391                  if (ThresholdData[i][pRight-2] == Black){CountBlack_Right++;}
   1392                  else{CountWhite_Right++;}
   1393                  if (ThresholdData[i][pRight] == Black &&ThresholdData[i][pRight-3]== White&& 
   1394                      ThresholdData[i][pRight-1] == Black &&ThresholdData[i][pRight-4]== White&& 
   1395                        ThresholdData[i][pRight-2] == Black &&ThresholdData[i][pRight-5]== White)
   1396                  {
   1397                    // 找到右边缘
   1398                    
   1399                    if (pRight-2 < ColumnMax-1)
   1400                    { RightBlack[i] = pRight-2;
   1401                    bFoundRight = 1;
   1402                    }
   1403                    
   1404                    break;
   1405                    
   1406                  }
   1407                  else
   1408                  {
   1409                    pRight++;
   1410                    
   1411                  }
   1412                }// if结束
   1413                
   1414                
   1415              }   //右边继续超找for结束
   1416              if(!bFoundRight&&CountBlack_Right>CountWhite_Right) //向左查找仍然未找到，且大部分是黑点    
   1417              {
   1418                tiaobian_Right[i]=-2;
   1419                RightBlack[i]=-5;
   1420                RightEnd=1;
   1421              }    
   1422            }
   1423            //======================找线结束============================================================================== 
   1424            
   1425            if (RightBlack[i]-LeftBlack[i]<8)
   1426              
   1427            {  
   1428              if(i<60) {StableNumbers=RowMax-i-6;}
   1429              LeftEnd=1;
   1430              RightEnd=1;
   1431              MidEnd=1;
   1432              EndType=7;
   1433              if(BlackEndMax-(RowMax-i)>10)
   1434              {
   1435                LeftEnd=0;
   1436                RightEnd=0;
   1437                MidEnd=0;
   1438                RightBlack[i] =  BlackEndColumnMax+30;
   1439                LeftBlack[i] =  BlackEndColumnMax-30;
   1440              }
   1441              
   1442              
   1443            }
   1444          //  if (RightBlack[i]-LeftBlack[i]<15&& i>50
   1445          //      &&LeftBlack[i]>0&&LeftBlack[i]<ColumnMax&&RightBlack[i]>0&&RightBlack[i]<ColumnMax)
   1446          //  {  if(i<70) {StableNumbers=RowMax-i-6;}
   1447          //  LeftEnd=1;
   1448          //  RightEnd=1;
   1449          //  MidEnd=1;
   1450          //  EndType=8;
   1451          //  }
   1452          //  if (RightBlack[i]-LeftBlack[i]<20&& i>60
   1453          //      &&LeftBlack[i]>0&&LeftBlack[i]<ColumnMax&&RightBlack[i]>0&&RightBlack[i]<ColumnMax)
   1454          //  {  if(i<70) {StableNumbers=RowMax-i-3;}
   1455          //  LeftEnd=1;
   1456          //  RightEnd=1;
   1457          //  MidEnd=1;
   1458          //  EndType=9;
   1459          //  }
   1460          //  if (RightBlack[i]-LeftBlack[i]<25&& i>80
   1461          //      &&LeftBlack[i]>0&&LeftBlack[i]<ColumnMax&&RightBlack[i]>0&&RightBlack[i]<ColumnMax)
   1462          //  { if(i<90) {StableNumbers=RowMax-i-3;}
   1463          //  LeftEnd=1;
   1464          //  RightEnd=1;
   1465          //  MidEnd=1;
   1466          //  EndType=10;
   1467          //  }
   1468          //  
   1469            if (RightBlack[i]<14||LeftBlack[i]>ColumnMax-14)
   1470            {  LeftEnd=1;
   1471            RightEnd=1;
   1472            MidEnd=1;
   1473            EndType=11;
   1474            }
   1475            
   1476          //  if (LeftBlack[i] > RightBlack[i])
   1477          //  { if(tiaobian_Left[i]<0) LeftEnd=1;
   1478          //  if(tiaobian_Right[i]<0) RightEnd=1;
   1479          //  
   1480          //  }
   1481          //  
   1482            
   1483            
   1484            
   1485            if(CountBlack >=ColumnMax - 10)
   1486            {
   1487              
   1488              CountBlack = 0;
   1489              LineType[i] = 1;//全黑行标志
   1490              BlackRow++;
   1491              LeftEnd=1;
   1492              RightEnd=1;
   1493              MidEnd=1;
   1494              EndType=12;
   1495            }
   1496            else if(CountWhite >= ColumnMax - 10 )
   1497            {
   1498              CountWhite = 0;
   1499              
   1500              WhiteRow++;
   1501              LineType[i] = 2;//全白行标志
   1502              
   1503            }
   1504            else
   1505            {
   1506              LineType[i] = 0;	
   1507            }
   1508            
   1509            
   1510            
   1511            if (!LeftEnd){LeftStableNumbers++;}
   1512            if (!RightEnd){RightStableNumbers++;}
   1513            int useable_left,useable_right;
   1514            useable_left=LeftEnd||!bFoundLeft; //1-左边线无效 0-左边线有效
   1515            useable_right=RightEnd||!bFoundRight;
   1516            if(useable_left+useable_right>0)
   1517            {
   1518              if (tiaobian_Left[i]!=0) tbs_z++;
   1519              if (tiaobian_Right[i]!=0) tbs_y++;
   1520              tbs_all=tbs_z+tbs_y;
   1521            }
   1522            
   1523            if(!useable_left && !useable_right)//判断是否有一个边缘在屏幕外
   1524            {
   1525              if(RightBlack[i]>ColumnMax&&LeftBlack[i]>0 )
   1526              {
   1527                useable_right=!useable_right;
   1528                
   1529              }
   1530              else if(RightBlack[i]<ColumnMax&&LeftBlack[i]<0 )
   1531              {
   1532                useable_left=!useable_left;
   1533                
   1534              }
   1535              else if (RightBlack[i]>ColumnMax&&LeftBlack[i]<0 )
   1536              {
   1537                
   1538              }
   1539              
   1540            }
   1541          //  if((RightBlack[i]-RightBlack[i+1]>3||RightBlack[i]==ColumnMax+5) && LeftBlack[i+1]-LeftBlack[i]>3)//赛道变宽
   1542          //    
   1543          //  {
   1544          //    if(shizi==0) shizi=i+3;
   1545          //    
   1546          //  }
   1547          //  if((LeftBlack[i+1]-LeftBlack[i]>3||LeftBlack[i]==-5) && RightBlack[i]-RightBlack[i+1]>3)//赛道变宽
   1548          //    
   1549          //  {
   1550          //    if(shizi==0) shizi=i+3;
   1551          //    
   1552          //  }
   1553          //  
   1554            if (useable_left && !useable_right)//只找到右边
   1555            {   yxhs++;
   1556            mode1++;
   1557            RoadMode[i]=1;
   1558            if( RoadType == 0||i > RowMax - 4)
   1559            {
   1560              BlackLineData[i] =  RightBlack[i] - sdk;
   1561              
   1562              
   1563            }                    
   1564            else
   1565            {                       
   1566              BlackLineData[i] = BlackLineData[i+1] + (RightBlack[i] - RightBlack[i+1]);
   1567            }
   1568            if(LeftBlack[i]==-5 && BlackLineData[i]>RightBlack[i]*0.4 && RightBlack[i]>RowMax*0.4) //0.2
   1569            {                 
   1570              BlackLineData[i]=RightBlack[i]*0.4;
   1571              
   1572            }
   1573            
   1574            if(mode1>10&&(RowMax-i)<41&&hx&&BlackEndMax<RowMax*0.6&&sfzj)
   1575            { int zji;
   1576            for(zji=RowMax-1;zji>(RowMax-43);zji--)
   1577            {
   1578              BlackLineData[zji]=1;                   
   1579            }
   1580            zhijiao=i;
   1581            
   1582            }
   1583            if(i==(RowMax-1)) {  
   1584              firstline_l=-1;
   1585              firstline_r=RightBlack[i];
   1586              firstline_m=BlackLineData[i];
   1587            }
   1588          //  //跳边边缘检测
   1589          //  if(LeftBlack[i]==-5&& RightBlack[i+2]<RightBlack[i]&&RightBlack[i+2]<RightBlack[i+1]
   1590          //     &&RightBlack[i+2]<RightBlack[i+3]&&RightBlack[i+2]<RightBlack[i+4]
   1591          //       &&RightBlack[i+3]<RightBlack[i+5]&& i<(RowMax-5))
   1592          //  {
   1593          //    BlackLineData[i]= BlackLineData[i+2]-5;
   1594          //    BlackLineData[i+1]= BlackLineData[i+2]-5;
   1595          //    MidEnd=1;
   1596          //    LeftEnd=1;
   1597          //    RightEnd=1;
   1598          //    
   1599          //  }
   1600            }   
   1601            else if (!useable_left && useable_right)//只找到左边
   1602            {  yxhs++;
   1603            mode2++;
   1604            RoadMode[i]=2;
   1605            if( RoadType == 0||i < RowMax - 4 )
   1606            {
   1607              
   1608              BlackLineData[i] =  LeftBlack[i] +sdk;
   1609              
   1610            }
   1611            
   1612            else
   1613            {
   1614              BlackLineData[i] = BlackLineData[i] + (LeftBlack[i] - LeftBlack[i+1]);
   1615            }
   1616            if(RightBlack[i]==ColumnMax+5 && BlackLineData[i]<(0.6*(ColumnMax-LeftBlack[i])+LeftBlack[i]) && LeftBlack[i] <RowMax*0.6)//0.8 
   1617            {                 
   1618              BlackLineData[i]=(0.6*(ColumnMax-LeftBlack[i])+LeftBlack[i]);
   1619              
   1620            }
   1621            if(mode2>10&&(RowMax-i)<44&&hx&&BlackEndMax<RowMax*0.6&&sfzj)
   1622            { int zji;
   1623            for(zji=RowMax-1;zji>(RowMax-44);zji--)
   1624            {
   1625              BlackLineData[zji]=ColumnMax-1;                   
   1626            }
   1627            MidEnd=1;
   1628            LeftEnd=1;
   1629            RightEnd=1;
   1630            
   1631            }
   1632            //                 
   1633            //                 if(mode2>20&&(RowMax-i)<40)
   1634            //                 { int zji;
   1635            //                   for(zji=RowMax-1;zji>(RowMax-40);zji--)
   1636            //                   {
   1637            //                   BlackLineData[zji]=ColumnMax-1;                   
   1638            //                   }
   1639            //                    MidEnd=1;
   1640            //                  LeftEnd=1;
   1641            //                  RightEnd=1;
   1642            //                 
   1643            //                 }
   1644            
   1645          //  //跳边边缘检测
   1646          //  if(RightBlack[i]>ColumnMax&& LeftBlack[i+2]>LeftBlack[i]&&LeftBlack[i+2]>LeftBlack[i+1]
   1647          //     &&LeftBlack[i+2]>LeftBlack[i+3]&&LeftBlack[i+2]>LeftBlack[i+4]
   1648          //       &&LeftBlack[i+3]>LeftBlack[i+5]&& i<(RowMax-5))
   1649          //  {
   1650          //    BlackLineData[i]= BlackLineData[i+2]+5;
   1651          //    BlackLineData[i+1]= BlackLineData[i+2]+5;
   1652          //    MidEnd=1;
   1653          //    LeftEnd=1;
   1654          //    RightEnd=1;
   1655          //    
   1656          //  }
   1657            if(i==(RowMax-1)) 
   1658            {  
   1659              firstline_l=LeftBlack[i];
   1660              firstline_r=-1;
   1661              firstline_m=BlackLineData[i];
   1662            }
   1663            }  
   1664            else if (useable_left && useable_right)//左右都没找到
   1665            {   mode3++;
   1666            RoadMode[i]=3;
   1667            if(LineType[i] == 2) 
   1668            {
   1669              BlackLineData[i]=BlackEndColumnMax;
   1670            }
   1671            else
   1672            {
   1673              BlackLineData[i] = 298;
   1674              if(i==(RowMax-1)) {  
   1675                firstline_l=-1;
   1676                firstline_r=-1;
   1677                firstline_m=BlackLineData[i];}
   1678              if(LeftEnd&&RightEnd)MidEnd = 1;
   1679            }
   1680            
   1681            
   1682            }
   1683            else                         //左右都找到
   1684            {       yxhs++;
   1685            RoadMode[i]=5;
   1686            if(LeftBlack[i]>1&&RightBlack[i]<ColumnMax-2) {mode4++;RoadMode[i]=4;}
   1687          //===============障碍物处理=================================
   1688           if(mode4>=heixian-3-i&&line_8)
   1689           {
   1690             if(fabss(LeftBlack[i]-LeftBlack[i+1])<=4&&(RightBlack[i+1]-RightBlack[i])>4&&RoadMode[i+1]==4)mode4_zhangai=i;    
   1691             if(fabss(RightBlack[i]-RightBlack[i+1])<=4&&(LeftBlack[i]-LeftBlack[i+1])>4&&RoadMode[i+1]==4)mode4_zhangai=-i;
   1692             if(mode4_zhangai<0&&(mode4_zhangai*-1-i)>5&&RoadMode[i+1]==4&&fabss(RightBlack[i]-RightBlack[i+1])<=4//确定左侧有障碍
   1693                &&(LeftBlack[i+1]-LeftBlack[i])>4      
   1694                )
   1695             {mode4_zhangai=0;
   1696              zaw_mode=-6;
   1697              }
   1698             
   1699              if(mode4_zhangai>0&&(mode4_zhangai-i)>5&&RoadMode[i+1]==4&&fabss(LeftBlack[i]-LeftBlack[i+1])<=4//确定右侧有障碍
   1700                &&(RightBlack[i]-RightBlack[i+1])>4      
   1701                )
   1702             {mode4_zhangai=0;
   1703             zaw_mode=6;
   1704              }
   1705           
   1706           
   1707           
   1708           
   1709           
   1710           }
   1711          //==========================================================
   1712           if(mode4==3&&(heixian-1-i)>0)
   1713           { int mode4_i;
   1714             for(mode4_i=heixian-1;mode4_i>i;mode4_i--)
   1715               BlackLineData[mode4_i] =  (BlackLineData[i]+BlackLineData[i+1])/2;
   1716           
   1717           
   1718           }
   1719            
   1720            BlackLineData[i] = LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2;
   1721           if(LeftBlack[i]<1&&RightBlack[i]>ColumnMax-2) BlackLineData[i]=BlackEndColumnMax;
   1722           if(RightBlack[i]-LeftBlack[i]>sdk*2.5&&i>50)BlackLineData[i]=BlackEndColumnMax;
   1723          //  int szcli;
   1724          //  if(shizi>0)//检测到十字
   1725          //  { 
   1726          //    for(szcli=shizi;szcli<i;szcli++)
   1727          //      
   1728          //    {
   1729          //      BlackLineData[szcli]= (BlackLineData[i]+ BlackLineData[shizi])/2;
   1730          //      
   1731          //    }
   1732          //    
   1733          //  }
   1734            
   1735            if((last_all_find-i)>3&&last_all_find<RowMax)
   1736            {int last_find_i;
   1737            for(last_find_i=last_all_find-1;last_find_i<i;last_find_i++)
   1738            {
   1739              if(BlackLineData[last_all_find]- BlackLineData[i]>=5)
   1740              {
   1741                BlackLineData[last_find_i]=( BlackLineData[last_all_find]+ BlackLineData[i])/2-1;
   1742              }
   1743              if(BlackLineData[last_all_find]- BlackLineData[i]<=-5)
   1744              {
   1745                BlackLineData[last_find_i]=( BlackLineData[last_all_find]+ BlackLineData[i])/2+1;
   1746              }
   1747              
   1748            }
   1749            
   1750            
   1751            }
   1752            else if((last_all_find-i)>3&&0)
   1753            {int last_find_i;
   1754            for(last_find_i=last_all_find-1;last_find_i<i;last_find_i++)
   1755            {
   1756              
   1757              BlackLineData[last_find_i]= BlackLineData[i];
   1758            }
   1759            
   1760            
   1761            }
   1762            
   1763            last_all_find=i;
   1764            if(i==(RowMax-1)) {  
   1765              firstline_l=LeftBlack[i];
   1766              firstline_r=RightBlack[i];
   1767              firstline_m=BlackLineData[i];}
   1768            
   1769            }
   1770            
   1771            
   1772            lable:		if (!MidEnd)
   1773            {
   1774              StableNumbers++;
   \                     ??GetLMR_12: (+1)
   \   00000226   0xF8DF 0x0ADC      LDR.W    R0,??GetLMR_0+0x4
   \   0000022A   0x6800             LDR      R0,[R0, #+0]
   \   0000022C   0x1C40             ADDS     R0,R0,#+1
   \   0000022E   0xF8DF 0x1AD4      LDR.W    R1,??GetLMR_0+0x4
   \   00000232   0x6008             STR      R0,[R1, #+0]
   1775              
   1776            }
   \   00000234   0x1E76             SUBS     R6,R6,#+1
   \                     ??GetLMR_11: (+1)
   \   00000236   0x2E00             CMP      R6,#+0
   \   00000238   0xF101 0x82B1      BMI.W    ??GetLMR_13
   \   0000023C   0x9803             LDR      R0,[SP, #+12]
   \   0000023E   0x2800             CMP      R0,#+0
   \   00000240   0xF041 0x82AD      BNE.W    ??GetLMR_13
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0xF8DF 0x1D20      LDR.W    R1,??GetLMR_4+0x1C
   \   0000024A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000024E   0x2000             MOVS     R0,#+0
   \   00000250   0xF8DF 0x1DC0      LDR.W    R1,??GetLMR_14
   \   00000254   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000258   0x2E38             CMP      R6,#+56
   \   0000025A   0xDB16             BLT.N    ??GetLMR_15
   \   0000025C   0x0030             MOVS     R0,R6
   \   0000025E   0x.... 0x....      BL       __aeabi_i2d
   \   00000262   0xF8DF 0x2DB4      LDR.W    R2,??GetLMR_14+0x4  ;; 0x9999999a
   \   00000266   0xF8DF 0x3DB4      LDR.W    R3,??GetLMR_14+0x8  ;; 0x3fd99999
   \   0000026A   0x.... 0x....      BL       __aeabi_dmul
   \   0000026E   0x2200             MOVS     R2,#+0
   \   00000270   0xF8DF 0x3DAC      LDR.W    R3,??GetLMR_14+0xC  ;; 0x40590000
   \   00000274   0x.... 0x....      BL       __aeabi_dmul
   \   00000278   0x2200             MOVS     R2,#+0
   \   0000027A   0xF8DF 0x3DA4      LDR.W    R3,??GetLMR_14+0xC  ;; 0x40590000
   \   0000027E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000282   0x.... 0x....      BL       __aeabi_d2iz
   \   00000286   0x9004             STR      R0,[SP, #+16]
   \   00000288   0xE01A             B.N      ??GetLMR_16
   \                     ??GetLMR_15: (+1)
   \   0000028A   0x0030             MOVS     R0,R6
   \   0000028C   0x.... 0x....      BL       __aeabi_i2d
   \   00000290   0xF05F 0x3233      MOVS     R2,#+858993459
   \   00000294   0xF8DF 0x3D8C      LDR.W    R3,??GetLMR_14+0x10  ;; 0x3fd33333
   \   00000298   0x.... 0x....      BL       __aeabi_dmul
   \   0000029C   0x2200             MOVS     R2,#+0
   \   0000029E   0xF8DF 0x3D80      LDR.W    R3,??GetLMR_14+0xC  ;; 0x40590000
   \   000002A2   0x.... 0x....      BL       __aeabi_dmul
   \   000002A6   0x2200             MOVS     R2,#+0
   \   000002A8   0xF8DF 0x3D74      LDR.W    R3,??GetLMR_14+0xC  ;; 0x40590000
   \   000002AC   0x.... 0x....      BL       __aeabi_ddiv
   \   000002B0   0x2200             MOVS     R2,#+0
   \   000002B2   0xF8DF 0x3D74      LDR.W    R3,??GetLMR_14+0x14  ;; 0x40140000
   \   000002B6   0x.... 0x....      BL       __aeabi_dadd
   \   000002BA   0x.... 0x....      BL       __aeabi_d2iz
   \   000002BE   0x9004             STR      R0,[SP, #+16]
   \                     ??GetLMR_16: (+1)
   \   000002C0   0x2E43             CMP      R6,#+67
   \   000002C2   0xDB02             BLT.N    ??GetLMR_17
   \   000002C4   0x201E             MOVS     R0,#+30
   \   000002C6   0x9007             STR      R0,[SP, #+28]
   \   000002C8   0xE006             B.N      ??GetLMR_18
   \                     ??GetLMR_17: (+1)
   \   000002CA   0x2E22             CMP      R6,#+34
   \   000002CC   0xDB02             BLT.N    ??GetLMR_19
   \   000002CE   0x2014             MOVS     R0,#+20
   \   000002D0   0x9007             STR      R0,[SP, #+28]
   \   000002D2   0xE001             B.N      ??GetLMR_18
   \                     ??GetLMR_19: (+1)
   \   000002D4   0x200D             MOVS     R0,#+13
   \   000002D6   0x9007             STR      R0,[SP, #+28]
   \                     ??GetLMR_18: (+1)
   \   000002D8   0xF1D6 0x0064      RSBS     R0,R6,#+100
   \   000002DC   0xF8DF 0x1C24      LDR.W    R1,??GetLMR_2+0x24
   \   000002E0   0x6809             LDR      R1,[R1, #+0]
   \   000002E2   0x1F49             SUBS     R1,R1,#+5
   \   000002E4   0x4288             CMP      R0,R1
   \   000002E6   0xDA20             BGE.N    ??GetLMR_20
   \   000002E8   0x980F             LDR      R0,[SP, #+60]
   \   000002EA   0x2800             CMP      R0,#+0
   \   000002EC   0xD01D             BEQ.N    ??GetLMR_20
   \   000002EE   0x2028             MOVS     R0,#+40
   \   000002F0   0x9007             STR      R0,[SP, #+28]
   \   000002F2   0xF8DF 0x0D38      LDR.W    R0,??GetLMR_14+0x18
   \   000002F6   0xF8D0 0x9000      LDR      R9,[R0, #+0]
   \   000002FA   0xF8DF 0x0D30      LDR.W    R0,??GetLMR_14+0x18
   \   000002FE   0x6804             LDR      R4,[R0, #+0]
   \   00000300   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000304   0xD501             BPL.N    ??GetLMR_21
   \   00000306   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??GetLMR_21: (+1)
   \   0000030A   0xF1B9 0x0F59      CMP      R9,#+89
   \   0000030E   0xDB01             BLT.N    ??GetLMR_22
   \   00000310   0xF05F 0x0958      MOVS     R9,#+88
   \                     ??GetLMR_22: (+1)
   \   00000314   0x2C00             CMP      R4,#+0
   \   00000316   0xD500             BPL.N    ??GetLMR_23
   \   00000318   0x2400             MOVS     R4,#+0
   \                     ??GetLMR_23: (+1)
   \   0000031A   0x2C59             CMP      R4,#+89
   \   0000031C   0xDB00             BLT.N    ??GetLMR_24
   \   0000031E   0x2458             MOVS     R4,#+88
   \                     ??GetLMR_24: (+1)
   \   00000320   0x2003             MOVS     R0,#+3
   \   00000322   0x9001             STR      R0,[SP, #+4]
   \   00000324   0x2057             MOVS     R0,#+87
   \   00000326   0x9009             STR      R0,[SP, #+36]
   \   00000328   0xE0C6             B.N      ??GetLMR_25
   \                     ??GetLMR_20: (+1)
   \   0000032A   0x2E61             CMP      R6,#+97
   \   0000032C   0xF280 0x8091      BGE.W    ??GetLMR_26
   \   00000330   0x9802             LDR      R0,[SP, #+8]
   \   00000332   0x1E40             SUBS     R0,R0,#+1
   \   00000334   0x4286             CMP      R6,R0
   \   00000336   0xF000 0x808C      BEQ.W    ??GetLMR_26
   \   0000033A   0x980D             LDR      R0,[SP, #+52]
   \   0000033C   0x2801             CMP      R0,#+1
   \   0000033E   0xDB20             BLT.N    ??GetLMR_27
   \   00000340   0x980D             LDR      R0,[SP, #+52]
   \   00000342   0x1B80             SUBS     R0,R0,R6
   \   00000344   0x2828             CMP      R0,#+40
   \   00000346   0xDA1C             BGE.N    ??GetLMR_27
   \   00000348   0xF8DF 0x0CE4      LDR.W    R0,??GetLMR_14+0x1C
   \   0000034C   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000350   0x6880             LDR      R0,[R0, #+8]
   \   00000352   0xF8DF 0x1CDC      LDR.W    R1,??GetLMR_14+0x1C
   \   00000356   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   0000035A   0x6849             LDR      R1,[R1, #+4]
   \   0000035C   0x4288             CMP      R0,R1
   \   0000035E   0xDA05             BGE.N    ??GetLMR_28
   \   00000360   0xF8DF 0x0CCC      LDR.W    R0,??GetLMR_14+0x1C
   \   00000364   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000368   0x6840             LDR      R0,[R0, #+4]
   \   0000036A   0xE004             B.N      ??GetLMR_29
   \                     ??GetLMR_28: (+1)
   \   0000036C   0xF8DF 0x0CC0      LDR.W    R0,??GetLMR_14+0x1C
   \   00000370   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000374   0x6880             LDR      R0,[R0, #+8]
   \                     ??GetLMR_29: (+1)
   \   00000376   0x284F             CMP      R0,#+79
   \   00000378   0xDB03             BLT.N    ??GetLMR_27
   \   0000037A   0xF05F 0x095A      MOVS     R9,#+90
   \   0000037E   0x245A             MOVS     R4,#+90
   \   00000380   0xE032             B.N      ??GetLMR_30
   \                     ??GetLMR_27: (+1)
   \   00000382   0x980C             LDR      R0,[SP, #+48]
   \   00000384   0x2801             CMP      R0,#+1
   \   00000386   0xDB20             BLT.N    ??GetLMR_31
   \   00000388   0x980C             LDR      R0,[SP, #+48]
   \   0000038A   0x1B80             SUBS     R0,R0,R6
   \   0000038C   0x2828             CMP      R0,#+40
   \   0000038E   0xDA1C             BGE.N    ??GetLMR_31
   \   00000390   0xF8DF 0x0CA0      LDR.W    R0,??GetLMR_14+0x20
   \   00000394   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000398   0x6840             LDR      R0,[R0, #+4]
   \   0000039A   0xF8DF 0x1C98      LDR.W    R1,??GetLMR_14+0x20
   \   0000039E   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   000003A2   0x6889             LDR      R1,[R1, #+8]
   \   000003A4   0x4288             CMP      R0,R1
   \   000003A6   0xDA05             BGE.N    ??GetLMR_32
   \   000003A8   0xF8DF 0x0C88      LDR.W    R0,??GetLMR_14+0x20
   \   000003AC   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000003B0   0x6840             LDR      R0,[R0, #+4]
   \   000003B2   0xE004             B.N      ??GetLMR_33
   \                     ??GetLMR_32: (+1)
   \   000003B4   0xF8DF 0x0C7C      LDR.W    R0,??GetLMR_14+0x20
   \   000003B8   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000003BC   0x6880             LDR      R0,[R0, #+8]
   \                     ??GetLMR_33: (+1)
   \   000003BE   0x280A             CMP      R0,#+10
   \   000003C0   0xDA03             BGE.N    ??GetLMR_31
   \   000003C2   0xF05F 0x0900      MOVS     R9,#+0
   \   000003C6   0x2400             MOVS     R4,#+0
   \   000003C8   0xE00E             B.N      ??GetLMR_30
   \                     ??GetLMR_31: (+1)
   \   000003CA   0xF8DF 0x0C68      LDR.W    R0,??GetLMR_14+0x20
   \   000003CE   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000003D2   0x6840             LDR      R0,[R0, #+4]
   \   000003D4   0x9907             LDR      R1,[SP, #+28]
   \   000003D6   0xEB11 0x0900      ADDS     R9,R1,R0
   \   000003DA   0xF8DF 0x0C54      LDR.W    R0,??GetLMR_14+0x1C
   \   000003DE   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000003E2   0x6840             LDR      R0,[R0, #+4]
   \   000003E4   0x9907             LDR      R1,[SP, #+28]
   \   000003E6   0x1A44             SUBS     R4,R0,R1
   \                     ??GetLMR_30: (+1)
   \   000003E8   0xF1B9 0x0F00      CMP      R9,#+0
   \   000003EC   0xD501             BPL.N    ??GetLMR_34
   \   000003EE   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??GetLMR_34: (+1)
   \   000003F2   0xF1B9 0x0F59      CMP      R9,#+89
   \   000003F6   0xDB01             BLT.N    ??GetLMR_35
   \   000003F8   0xF05F 0x0958      MOVS     R9,#+88
   \                     ??GetLMR_35: (+1)
   \   000003FC   0x2C00             CMP      R4,#+0
   \   000003FE   0xD500             BPL.N    ??GetLMR_36
   \   00000400   0x2400             MOVS     R4,#+0
   \                     ??GetLMR_36: (+1)
   \   00000402   0x2C59             CMP      R4,#+89
   \   00000404   0xDB00             BLT.N    ??GetLMR_37
   \   00000406   0x2458             MOVS     R4,#+88
   \                     ??GetLMR_37: (+1)
   \   00000408   0xF8DF 0x0C28      LDR.W    R0,??GetLMR_14+0x20
   \   0000040C   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000410   0x6840             LDR      R0,[R0, #+4]
   \   00000412   0x9907             LDR      R1,[SP, #+28]
   \   00000414   0x1A40             SUBS     R0,R0,R1
   \   00000416   0x9001             STR      R0,[SP, #+4]
   \   00000418   0xF8DF 0x0C14      LDR.W    R0,??GetLMR_14+0x1C
   \   0000041C   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000420   0x6840             LDR      R0,[R0, #+4]
   \   00000422   0x9907             LDR      R1,[SP, #+28]
   \   00000424   0x1808             ADDS     R0,R1,R0
   \   00000426   0x9009             STR      R0,[SP, #+36]
   \   00000428   0x9801             LDR      R0,[SP, #+4]
   \   0000042A   0x2800             CMP      R0,#+0
   \   0000042C   0xD501             BPL.N    ??GetLMR_38
   \   0000042E   0x2000             MOVS     R0,#+0
   \   00000430   0x9001             STR      R0,[SP, #+4]
   \                     ??GetLMR_38: (+1)
   \   00000432   0x9801             LDR      R0,[SP, #+4]
   \   00000434   0x285A             CMP      R0,#+90
   \   00000436   0xDB01             BLT.N    ??GetLMR_39
   \   00000438   0x2059             MOVS     R0,#+89
   \   0000043A   0x9001             STR      R0,[SP, #+4]
   \                     ??GetLMR_39: (+1)
   \   0000043C   0x9809             LDR      R0,[SP, #+36]
   \   0000043E   0x2800             CMP      R0,#+0
   \   00000440   0xD501             BPL.N    ??GetLMR_40
   \   00000442   0x2000             MOVS     R0,#+0
   \   00000444   0x9009             STR      R0,[SP, #+36]
   \                     ??GetLMR_40: (+1)
   \   00000446   0x9809             LDR      R0,[SP, #+36]
   \   00000448   0x285A             CMP      R0,#+90
   \   0000044A   0xDB35             BLT.N    ??GetLMR_25
   \   0000044C   0x2059             MOVS     R0,#+89
   \   0000044E   0x9009             STR      R0,[SP, #+36]
   \   00000450   0xE032             B.N      ??GetLMR_25
   \                     ??GetLMR_26: (+1)
   \   00000452   0xF8DF 0x0BE4      LDR.W    R0,??GetLMR_14+0x24
   \   00000456   0x6800             LDR      R0,[R0, #+0]
   \   00000458   0x2805             CMP      R0,#+5
   \   0000045A   0xDA0B             BGE.N    ??GetLMR_41
   \   0000045C   0xF8DF 0x0BDC      LDR.W    R0,??GetLMR_14+0x28
   \   00000460   0x6800             LDR      R0,[R0, #+0]
   \   00000462   0xF8DF 0x1BDC      LDR.W    R1,??GetLMR_14+0x2C
   \   00000466   0x6809             LDR      R1,[R1, #+0]
   \   00000468   0x4288             CMP      R0,R1
   \   0000046A   0xDA03             BGE.N    ??GetLMR_41
   \   0000046C   0xF05F 0x0943      MOVS     R9,#+67
   \   00000470   0x2443             MOVS     R4,#+67
   \   00000472   0xE013             B.N      ??GetLMR_42
   \                     ??GetLMR_41: (+1)
   \   00000474   0xF8DF 0x0BC8      LDR.W    R0,??GetLMR_14+0x2C
   \   00000478   0x6800             LDR      R0,[R0, #+0]
   \   0000047A   0x2805             CMP      R0,#+5
   \   0000047C   0xDA0B             BGE.N    ??GetLMR_43
   \   0000047E   0xF8DF 0x0BBC      LDR.W    R0,??GetLMR_14+0x28
   \   00000482   0x6800             LDR      R0,[R0, #+0]
   \   00000484   0xF8DF 0x1BB0      LDR.W    R1,??GetLMR_14+0x24
   \   00000488   0x6809             LDR      R1,[R1, #+0]
   \   0000048A   0x4288             CMP      R0,R1
   \   0000048C   0xDA03             BGE.N    ??GetLMR_43
   \   0000048E   0xF05F 0x0916      MOVS     R9,#+22
   \   00000492   0x2416             MOVS     R4,#+22
   \   00000494   0xE002             B.N      ??GetLMR_42
   \                     ??GetLMR_43: (+1)
   \   00000496   0xF05F 0x092D      MOVS     R9,#+45
   \   0000049A   0x242D             MOVS     R4,#+45
   \                     ??GetLMR_42: (+1)
   \   0000049C   0x2003             MOVS     R0,#+3
   \   0000049E   0x9001             STR      R0,[SP, #+4]
   \   000004A0   0x2057             MOVS     R0,#+87
   \   000004A2   0x9009             STR      R0,[SP, #+36]
   \   000004A4   0x9802             LDR      R0,[SP, #+8]
   \   000004A6   0x2864             CMP      R0,#+100
   \   000004A8   0xD006             BEQ.N    ??GetLMR_25
   \   000004AA   0xF8DF 0x0AB4      LDR.W    R0,??GetLMR_4+0x14
   \   000004AE   0xF8D0 0x9000      LDR      R9,[R0, #+0]
   \   000004B2   0xF8DF 0x0AAC      LDR.W    R0,??GetLMR_4+0x14
   \   000004B6   0x6804             LDR      R4,[R0, #+0]
   \                     ??GetLMR_25: (+1)
   \   000004B8   0xF05F 0x0800      MOVS     R8,#+0
   \   000004BC   0xF88D 0x8000      STRB     R8,[SP, #+0]
   \   000004C0   0x2000             MOVS     R0,#+0
   \   000004C2   0x900A             STR      R0,[SP, #+40]
   \   000004C4   0x980A             LDR      R0,[SP, #+40]
   \   000004C6   0x900B             STR      R0,[SP, #+44]
   \   000004C8   0xF05F 0x30FF      MOVS     R0,#-1
   \   000004CC   0xF8DF 0x1B64      LDR.W    R1,??GetLMR_14+0x20
   \   000004D0   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000004D4   0x205B             MOVS     R0,#+91
   \   000004D6   0xF8DF 0x1B58      LDR.W    R1,??GetLMR_14+0x1C
   \   000004DA   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000004DE   0xF05F 0x0B00      MOVS     R11,#+0
   \   000004E2   0xF05F 0x0A00      MOVS     R10,#+0
   \   000004E6   0x2700             MOVS     R7,#+0
   \   000004E8   0x2500             MOVS     R5,#+0
   \   000004EA   0x2000             MOVS     R0,#+0
   \   000004EC   0x2100             MOVS     R1,#+0
   \   000004EE   0x2E62             CMP      R6,#+98
   \   000004F0   0xDB03             BLT.N    ??GetLMR_44
   \   000004F2   0xF8DF 0x0A58      LDR.W    R0,??GetLMR_4
   \   000004F6   0x6801             LDR      R1,[R0, #+0]
   \   000004F8   0xE004             B.N      ??GetLMR_45
   \                     ??GetLMR_44: (+1)
   \   000004FA   0xF8DF 0x0A68      LDR.W    R0,??GetLMR_4+0x18
   \   000004FE   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000502   0x6841             LDR      R1,[R0, #+4]
   \                     ??GetLMR_45: (+1)
   \   00000504   0xF8DF 0x081C      LDR.W    R0,??GetLMR_0+0x24
   \   00000508   0x6800             LDR      R0,[R0, #+0]
   \   0000050A   0x2800             CMP      R0,#+0
   \   0000050C   0xF000 0x80B7      BEQ.W    ??GetLMR_46
   \   00000510   0x9802             LDR      R0,[SP, #+8]
   \   00000512   0x1E40             SUBS     R0,R0,#+1
   \   00000514   0x4286             CMP      R6,R0
   \   00000516   0xD108             BNE.N    ??GetLMR_47
   \   00000518   0x235A             MOVS     R3,#+90
   \   0000051A   0x2200             MOVS     R2,#+0
   \   0000051C   0xF8DF 0x0A2C      LDR.W    R0,??GetLMR_4
   \   00000520   0x6801             LDR      R1,[R0, #+0]
   \   00000522   0x0030             MOVS     R0,R6
   \   00000524   0x.... 0x....      BL       FindMidLine_lastismidline
   \   00000528   0xE011             B.N      ??GetLMR_48
   \                     ??GetLMR_47: (+1)
   \   0000052A   0xF8DF 0x0B04      LDR.W    R0,??GetLMR_14+0x1C
   \   0000052E   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000532   0x6843             LDR      R3,[R0, #+4]
   \   00000534   0xF8DF 0x0AFC      LDR.W    R0,??GetLMR_14+0x20
   \   00000538   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000053C   0x6842             LDR      R2,[R0, #+4]
   \   0000053E   0xF8DF 0x0A24      LDR.W    R0,??GetLMR_4+0x18
   \   00000542   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000546   0x6841             LDR      R1,[R0, #+4]
   \   00000548   0x0030             MOVS     R0,R6
   \   0000054A   0x.... 0x....      BL       FindMidLine_lastismidline
   \                     ??GetLMR_48: (+1)
   \   0000054E   0xF8DF 0x17D8      LDR.W    R1,??GetLMR_0+0x28
   \   00000552   0x6809             LDR      R1,[R1, #+0]
   \   00000554   0xF8DF 0x27CC      LDR.W    R2,??GetLMR_0+0x24
   \   00000558   0x6011             STR      R1,[R2, #+0]
   \   0000055A   0xF8DF 0x17CC      LDR.W    R1,??GetLMR_0+0x28
   \   0000055E   0x6809             LDR      R1,[R1, #+0]
   \   00000560   0x2900             CMP      R1,#+0
   \   00000562   0xD015             BEQ.N    ??GetLMR_49
   \   00000564   0xF8DF 0x17B4      LDR.W    R1,??GetLMR_0+0x1C
   \   00000568   0x6809             LDR      R1,[R1, #+0]
   \   0000056A   0x1C49             ADDS     R1,R1,#+1
   \   0000056C   0xF8DF 0x27AC      LDR.W    R2,??GetLMR_0+0x1C
   \   00000570   0x6011             STR      R1,[R2, #+0]
   \   00000572   0xF8DF 0x17AC      LDR.W    R1,??GetLMR_0+0x20
   \   00000576   0x6809             LDR      R1,[R1, #+0]
   \   00000578   0xF8DF 0x27A0      LDR.W    R2,??GetLMR_0+0x1C
   \   0000057C   0x6812             LDR      R2,[R2, #+0]
   \   0000057E   0x4291             CMP      R1,R2
   \   00000580   0xDA0A             BGE.N    ??GetLMR_50
   \   00000582   0xF8DF 0x1798      LDR.W    R1,??GetLMR_0+0x1C
   \   00000586   0x6809             LDR      R1,[R1, #+0]
   \   00000588   0xF8DF 0x2794      LDR.W    R2,??GetLMR_0+0x20
   \   0000058C   0x6011             STR      R1,[R2, #+0]
   \   0000058E   0xE003             B.N      ??GetLMR_50
   \                     ??GetLMR_49: (+1)
   \   00000590   0x2100             MOVS     R1,#+0
   \   00000592   0xF8DF 0x2788      LDR.W    R2,??GetLMR_0+0x1C
   \   00000596   0x6011             STR      R1,[R2, #+0]
   \                     ??GetLMR_50: (+1)
   \   00000598   0xF110 0x0F01      CMN      R0,#+1
   \   0000059C   0xF040 0x8094      BNE.W    ??GetLMR_51
   \   000005A0   0xF8DF 0x1904      LDR.W    R1,??GetLMR_1+0x8
   \   000005A4   0x6809             LDR      R1,[R1, #+0]
   \   000005A6   0x2900             CMP      R1,#+0
   \   000005A8   0xF000 0x808E      BEQ.W    ??GetLMR_51
   \   000005AC   0x2E55             CMP      R6,#+85
   \   000005AE   0xDA14             BGE.N    ??GetLMR_52
   \   000005B0   0xF8DF 0x19B0      LDR.W    R1,??GetLMR_4+0x18
   \   000005B4   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   000005B8   0x6849             LDR      R1,[R1, #+4]
   \   000005BA   0x3924             SUBS     R1,R1,#+36
   \   000005BC   0x2913             CMP      R1,#+19
   \   000005BE   0xD30C             BCC.N    ??GetLMR_52
   \   000005C0   0xF8DF 0x175C      LDR.W    R1,??GetLMR_0+0x20
   \   000005C4   0x6809             LDR      R1,[R1, #+0]
   \   000005C6   0x2905             CMP      R1,#+5
   \   000005C8   0xDB07             BLT.N    ??GetLMR_52
   \   000005CA   0x2005             MOVS     R0,#+5
   \   000005CC   0xF8DF 0x1740      LDR.W    R1,??GetLMR_0+0x10
   \   000005D0   0x6008             STR      R0,[R1, #+0]
   \   000005D2   0x2001             MOVS     R0,#+1
   \   000005D4   0x9003             STR      R0,[SP, #+12]
   \   000005D6   0xF001 0xB8D0      B.W      ??GetLMR_53
   \                     ??GetLMR_52: (+1)
   \   000005DA   0xF8DF 0x1988      LDR.W    R1,??GetLMR_4+0x18
   \   000005DE   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   000005E2   0x6849             LDR      R1,[R1, #+4]
   \   000005E4   0x3912             SUBS     R1,R1,#+18
   \   000005E6   0x2937             CMP      R1,#+55
   \   000005E8   0xD30C             BCC.N    ??GetLMR_54
   \   000005EA   0xF8DF 0x1734      LDR.W    R1,??GetLMR_0+0x20
   \   000005EE   0x6809             LDR      R1,[R1, #+0]
   \   000005F0   0x2905             CMP      R1,#+5
   \   000005F2   0xDB07             BLT.N    ??GetLMR_54
   \   000005F4   0x2006             MOVS     R0,#+6
   \   000005F6   0xF8DF 0x1718      LDR.W    R1,??GetLMR_0+0x10
   \   000005FA   0x6008             STR      R0,[R1, #+0]
   \   000005FC   0x2001             MOVS     R0,#+1
   \   000005FE   0x9003             STR      R0,[SP, #+12]
   \   00000600   0xF001 0xB8BB      B.W      ??GetLMR_53
   \                     ??GetLMR_54: (+1)
   \   00000604   0xF8DF 0x18A8      LDR.W    R1,??GetLMR_1+0x10
   \   00000608   0x6809             LDR      R1,[R1, #+0]
   \   0000060A   0x2905             CMP      R1,#+5
   \   0000060C   0xDB32             BLT.N    ??GetLMR_55
   \   0000060E   0x2E1F             CMP      R6,#+31
   \   00000610   0xDB30             BLT.N    ??GetLMR_55
   \   00000612   0x2000             MOVS     R0,#+0
   \   00000614   0xF1B6 0x010C      SUBS     R1,R6,#+12
   \   00000618   0x0030             MOVS     R0,R6
   \   0000061A   0xE021             B.N      ??GetLMR_56
   \                     ??GetLMR_57: (+1)
   \   0000061C   0xF8DF 0x2A0C      LDR.W    R2,??GetLMR_14+0x18
   \   00000620   0x6812             LDR      R2,[R2, #+0]
   \   00000622   0xF8DF 0x3940      LDR.W    R3,??GetLMR_4+0x18
   \   00000626   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   0000062A   0xF8DF 0x2A00      LDR.W    R2,??GetLMR_14+0x18
   \   0000062E   0x6812             LDR      R2,[R2, #+0]
   \   00000630   0x9B04             LDR      R3,[SP, #+16]
   \   00000632   0x1AD2             SUBS     R2,R2,R3
   \   00000634   0xF8DF 0x39FC      LDR.W    R3,??GetLMR_14+0x20
   \   00000638   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   0000063C   0xF8DF 0x29EC      LDR.W    R2,??GetLMR_14+0x18
   \   00000640   0x6812             LDR      R2,[R2, #+0]
   \   00000642   0x9B04             LDR      R3,[SP, #+16]
   \   00000644   0x189A             ADDS     R2,R3,R2
   \   00000646   0xF8DF 0x39E8      LDR.W    R3,??GetLMR_14+0x1C
   \   0000064A   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \   0000064E   0x1E76             SUBS     R6,R6,#+1
   \   00000650   0xF8DF 0x26B0      LDR.W    R2,??GetLMR_0+0x4
   \   00000654   0x6812             LDR      R2,[R2, #+0]
   \   00000656   0x1C52             ADDS     R2,R2,#+1
   \   00000658   0xF8DF 0x36A8      LDR.W    R3,??GetLMR_0+0x4
   \   0000065C   0x601A             STR      R2,[R3, #+0]
   \   0000065E   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_56: (+1)
   \   00000660   0x4281             CMP      R1,R0
   \   00000662   0xDA01             BGE.N    ??GetLMR_58
   \   00000664   0x2800             CMP      R0,#+0
   \   00000666   0xD5D9             BPL.N    ??GetLMR_57
   \                     ??GetLMR_58: (+1)
   \   00000668   0x2000             MOVS     R0,#+0
   \   0000066A   0xF8DF 0x1844      LDR.W    R1,??GetLMR_1+0x10
   \   0000066E   0x6008             STR      R0,[R1, #+0]
   \   00000670   0xF001 0xB883      B.W      ??GetLMR_53
   \                     ??GetLMR_55: (+1)
   \   00000674   0x2100             MOVS     R1,#+0
   \   00000676   0xF8DF 0x2838      LDR.W    R2,??GetLMR_1+0x10
   \   0000067A   0x6011             STR      R1,[R2, #+0]
   \   0000067C   0xE024             B.N      ??GetLMR_51
   \                     ??GetLMR_46: (+1)
   \   0000067E   0x9802             LDR      R0,[SP, #+8]
   \   00000680   0x1E40             SUBS     R0,R0,#+1
   \   00000682   0x4286             CMP      R6,R0
   \   00000684   0xD110             BNE.N    ??GetLMR_59
   \   00000686   0xF8DF 0x09A8      LDR.W    R0,??GetLMR_14+0x1C
   \   0000068A   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000068E   0x6843             LDR      R3,[R0, #+4]
   \   00000690   0xF8DF 0x09A0      LDR.W    R0,??GetLMR_14+0x20
   \   00000694   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000698   0x6842             LDR      R2,[R0, #+4]
   \   0000069A   0xF8DF 0x08B0      LDR.W    R0,??GetLMR_4
   \   0000069E   0x6801             LDR      R1,[R0, #+0]
   \   000006A0   0x0030             MOVS     R0,R6
   \   000006A2   0x.... 0x....      BL       FindMidLine_lastisnotmidline
   \   000006A6   0xE009             B.N      ??GetLMR_60
   \                     ??GetLMR_59: (+1)
   \   000006A8   0x235A             MOVS     R3,#+90
   \   000006AA   0x2200             MOVS     R2,#+0
   \   000006AC   0xF8DF 0x08B4      LDR.W    R0,??GetLMR_4+0x18
   \   000006B0   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000006B4   0x6841             LDR      R1,[R0, #+4]
   \   000006B6   0x0030             MOVS     R0,R6
   \   000006B8   0x.... 0x....      BL       FindMidLine_lastisnotmidline
   \                     ??GetLMR_60: (+1)
   \   000006BC   0xF8DF 0x1668      LDR.W    R1,??GetLMR_0+0x28
   \   000006C0   0x6809             LDR      R1,[R1, #+0]
   \   000006C2   0xF8DF 0x2660      LDR.W    R2,??GetLMR_0+0x24
   \   000006C6   0x6011             STR      R1,[R2, #+0]
   \                     ??GetLMR_51: (+1)
   \   000006C8   0xF8DF 0x165C      LDR.W    R1,??GetLMR_0+0x28
   \   000006CC   0x6809             LDR      R1,[R1, #+0]
   \   000006CE   0x2900             CMP      R1,#+0
   \   000006D0   0xD026             BEQ.N    ??GetLMR_61
   \   000006D2   0xF8DF 0x17D4      LDR.W    R1,??GetLMR_1+0x8
   \   000006D6   0x6809             LDR      R1,[R1, #+0]
   \   000006D8   0x2900             CMP      R1,#+0
   \   000006DA   0xD521             BPL.N    ??GetLMR_61
   \   000006DC   0xF8DF 0x094C      LDR.W    R0,??GetLMR_14+0x18
   \   000006E0   0x6800             LDR      R0,[R0, #+0]
   \   000006E2   0xF8DF 0x1880      LDR.W    R1,??GetLMR_4+0x18
   \   000006E6   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000006EA   0xF8DF 0x0940      LDR.W    R0,??GetLMR_14+0x18
   \   000006EE   0x6800             LDR      R0,[R0, #+0]
   \   000006F0   0x9904             LDR      R1,[SP, #+16]
   \   000006F2   0x1A40             SUBS     R0,R0,R1
   \   000006F4   0xF8DF 0x193C      LDR.W    R1,??GetLMR_14+0x20
   \   000006F8   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000006FC   0xF8DF 0x092C      LDR.W    R0,??GetLMR_14+0x18
   \   00000700   0x6800             LDR      R0,[R0, #+0]
   \   00000702   0x9904             LDR      R1,[SP, #+16]
   \   00000704   0x1808             ADDS     R0,R1,R0
   \   00000706   0xF8DF 0x1928      LDR.W    R1,??GetLMR_14+0x1C
   \   0000070A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000070E   0xF8DF 0x0798      LDR.W    R0,??GetLMR_1+0x8
   \   00000712   0x6800             LDR      R0,[R0, #+0]
   \   00000714   0x1C40             ADDS     R0,R0,#+1
   \   00000716   0xF8DF 0x1790      LDR.W    R1,??GetLMR_1+0x8
   \   0000071A   0x6008             STR      R0,[R1, #+0]
   \   0000071C   0xF001 0xB82D      B.W      ??GetLMR_53
   \                     ??GetLMR_61: (+1)
   \   00000720   0xF8DF 0x1604      LDR.W    R1,??GetLMR_0+0x28
   \   00000724   0x6809             LDR      R1,[R1, #+0]
   \   00000726   0x2900             CMP      R1,#+0
   \   00000728   0xD02A             BEQ.N    ??GetLMR_62
   \   0000072A   0xF8DF 0x1780      LDR.W    R1,??GetLMR_1+0xC
   \   0000072E   0x6809             LDR      R1,[R1, #+0]
   \   00000730   0x1C49             ADDS     R1,R1,#+1
   \   00000732   0xF8DF 0x2778      LDR.W    R2,??GetLMR_1+0xC
   \   00000736   0x6011             STR      R1,[R2, #+0]
   \   00000738   0xF8DF 0x1770      LDR.W    R1,??GetLMR_1+0xC
   \   0000073C   0x6809             LDR      R1,[R1, #+0]
   \   0000073E   0xF8DF 0x2BCC      LDR.W    R2,??GetLMR_63
   \   00000742   0x6011             STR      R1,[R2, #+0]
   \   00000744   0xF8DF 0x181C      LDR.W    R1,??GetLMR_4+0x18
   \   00000748   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000074C   0xF8DF 0x15D4      LDR.W    R1,??GetLMR_0+0x24
   \   00000750   0x6809             LDR      R1,[R1, #+0]
   \   00000752   0x2900             CMP      R1,#+0
   \   00000754   0xD012             BEQ.N    ??GetLMR_64
   \   00000756   0xF8DF 0x1758      LDR.W    R1,??GetLMR_1+0x10
   \   0000075A   0x6809             LDR      R1,[R1, #+0]
   \   0000075C   0x1C49             ADDS     R1,R1,#+1
   \   0000075E   0xF8DF 0x2750      LDR.W    R2,??GetLMR_1+0x10
   \   00000762   0x6011             STR      R1,[R2, #+0]
   \   00000764   0x9904             LDR      R1,[SP, #+16]
   \   00000766   0x1A41             SUBS     R1,R0,R1
   \   00000768   0xF8DF 0x28C8      LDR.W    R2,??GetLMR_14+0x20
   \   0000076C   0xF842 0x1026      STR      R1,[R2, R6, LSL #+2]
   \   00000770   0x9904             LDR      R1,[SP, #+16]
   \   00000772   0x1808             ADDS     R0,R1,R0
   \   00000774   0xF8DF 0x18B8      LDR.W    R1,??GetLMR_14+0x1C
   \   00000778   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_64: (+1)
   \   0000077C   0xF000 0xBFFD      B.W      ??GetLMR_53
   \                     ??GetLMR_62: (+1)
   \   00000780   0x2000             MOVS     R0,#+0
   \   00000782   0xE001             B.N      ??GetLMR_65
   \                     ??GetLMR_66: (+1)
   \   00000784   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetLMR_67: (+1)
   \   00000786   0x1C40             ADDS     R0,R0,#+1
   \                     ??GetLMR_65: (+1)
   \   00000788   0x285A             CMP      R0,#+90
   \   0000078A   0xF280 0x80DB      BGE.W    ??GetLMR_68
   \   0000078E   0xF8DF 0x1B80      LDR.W    R1,??GetLMR_63+0x4
   \   00000792   0x225A             MOVS     R2,#+90
   \   00000794   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000798   0x5C41             LDRB     R1,[R0, R1]
   \   0000079A   0x291E             CMP      R1,#+30
   \   0000079C   0xD103             BNE.N    ??GetLMR_69
   \   0000079E   0x990B             LDR      R1,[SP, #+44]
   \   000007A0   0x1C49             ADDS     R1,R1,#+1
   \   000007A2   0x910B             STR      R1,[SP, #+44]
   \   000007A4   0xE002             B.N      ??GetLMR_70
   \                     ??GetLMR_69: (+1)
   \   000007A6   0x990A             LDR      R1,[SP, #+40]
   \   000007A8   0x1C49             ADDS     R1,R1,#+1
   \   000007AA   0x910A             STR      R1,[SP, #+40]
   \                     ??GetLMR_70: (+1)
   \   000007AC   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000007B0   0x2900             CMP      R1,#+0
   \   000007B2   0xD161             BNE.N    ??GetLMR_71
   \   000007B4   0x9901             LDR      R1,[SP, #+4]
   \   000007B6   0x4589             CMP      R9,R1
   \   000007B8   0xDB5E             BLT.N    ??GetLMR_71
   \   000007BA   0xF8DF 0x1B54      LDR.W    R1,??GetLMR_63+0x4
   \   000007BE   0x225A             MOVS     R2,#+90
   \   000007C0   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000007C4   0xEB19 0x0101      ADDS     R1,R9,R1
   \   000007C8   0x7889             LDRB     R1,[R1, #+2]
   \   000007CA   0x291E             CMP      R1,#+30
   \   000007CC   0xD102             BNE.N    ??GetLMR_72
   \   000007CE   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000007D2   0xE001             B.N      ??GetLMR_73
   \                     ??GetLMR_72: (+1)
   \   000007D4   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??GetLMR_73: (+1)
   \   000007D8   0xF8DF 0x1B34      LDR.W    R1,??GetLMR_63+0x4
   \   000007DC   0x225A             MOVS     R2,#+90
   \   000007DE   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000007E2   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   000007E6   0x291E             CMP      R1,#+30
   \   000007E8   0xD144             BNE.N    ??GetLMR_74
   \   000007EA   0xF8DF 0x1B24      LDR.W    R1,??GetLMR_63+0x4
   \   000007EE   0x225A             MOVS     R2,#+90
   \   000007F0   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000007F4   0xEB19 0x0101      ADDS     R1,R9,R1
   \   000007F8   0x78C9             LDRB     R1,[R1, #+3]
   \   000007FA   0x29C8             CMP      R1,#+200
   \   000007FC   0xD13A             BNE.N    ??GetLMR_74
   \   000007FE   0xF8DF 0x1B10      LDR.W    R1,??GetLMR_63+0x4
   \   00000802   0x225A             MOVS     R2,#+90
   \   00000804   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000808   0xEB19 0x0101      ADDS     R1,R9,R1
   \   0000080C   0x7849             LDRB     R1,[R1, #+1]
   \   0000080E   0x291E             CMP      R1,#+30
   \   00000810   0xD130             BNE.N    ??GetLMR_74
   \   00000812   0xF8DF 0x1AFC      LDR.W    R1,??GetLMR_63+0x4
   \   00000816   0x225A             MOVS     R2,#+90
   \   00000818   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   0000081C   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000820   0x7909             LDRB     R1,[R1, #+4]
   \   00000822   0x29C8             CMP      R1,#+200
   \   00000824   0xD126             BNE.N    ??GetLMR_74
   \   00000826   0xF8DF 0x1AE8      LDR.W    R1,??GetLMR_63+0x4
   \   0000082A   0x225A             MOVS     R2,#+90
   \   0000082C   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000830   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000834   0x7889             LDRB     R1,[R1, #+2]
   \   00000836   0x291E             CMP      R1,#+30
   \   00000838   0xD11C             BNE.N    ??GetLMR_74
   \   0000083A   0xF8DF 0x1AD4      LDR.W    R1,??GetLMR_63+0x4
   \   0000083E   0x225A             MOVS     R2,#+90
   \   00000840   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000844   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000848   0x7949             LDRB     R1,[R1, #+5]
   \   0000084A   0x29C8             CMP      R1,#+200
   \   0000084C   0xD112             BNE.N    ??GetLMR_74
   \   0000084E   0xF119 0x0102      ADDS     R1,R9,#+2
   \   00000852   0x2901             CMP      R1,#+1
   \   00000854   0xDB08             BLT.N    ??GetLMR_75
   \   00000856   0xF119 0x0102      ADDS     R1,R9,#+2
   \   0000085A   0xF8DF 0x27D8      LDR.W    R2,??GetLMR_14+0x20
   \   0000085E   0xF842 0x1026      STR      R1,[R2, R6, LSL #+2]
   \   00000862   0x2101             MOVS     R1,#+1
   \   00000864   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \                     ??GetLMR_75: (+1)
   \   00000868   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000086C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000870   0xD002             BEQ.N    ??GetLMR_71
   \   00000872   0xE067             B.N      ??GetLMR_68
   \                     ??GetLMR_74: (+1)
   \   00000874   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \                     ??GetLMR_71: (+1)
   \   00000878   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000087C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000880   0xF47F 0xAF81      BNE.W    ??GetLMR_67
   \   00000884   0x9909             LDR      R1,[SP, #+36]
   \   00000886   0x42A1             CMP      R1,R4
   \   00000888   0xF6FF 0xAF7D      BLT.W    ??GetLMR_67
   \   0000088C   0xF8DF 0x1A80      LDR.W    R1,??GetLMR_63+0x4
   \   00000890   0x225A             MOVS     R2,#+90
   \   00000892   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000896   0x1861             ADDS     R1,R4,R1
   \   00000898   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   0000089C   0x291E             CMP      R1,#+30
   \   0000089E   0xD101             BNE.N    ??GetLMR_76
   \   000008A0   0x1C6D             ADDS     R5,R5,#+1
   \   000008A2   0xE000             B.N      ??GetLMR_77
   \                     ??GetLMR_76: (+1)
   \   000008A4   0x1C7F             ADDS     R7,R7,#+1
   \                     ??GetLMR_77: (+1)
   \   000008A6   0xF8DF 0x1A68      LDR.W    R1,??GetLMR_63+0x4
   \   000008AA   0x225A             MOVS     R2,#+90
   \   000008AC   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000008B0   0x5C61             LDRB     R1,[R4, R1]
   \   000008B2   0x291E             CMP      R1,#+30
   \   000008B4   0xF47F 0xAF66      BNE.W    ??GetLMR_66
   \   000008B8   0xF8DF 0x1A54      LDR.W    R1,??GetLMR_63+0x4
   \   000008BC   0x225A             MOVS     R2,#+90
   \   000008BE   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000008C2   0x1861             ADDS     R1,R4,R1
   \   000008C4   0xF811 0x1C03      LDRB     R1,[R1, #-3]
   \   000008C8   0x29C8             CMP      R1,#+200
   \   000008CA   0xF47F 0xAF5B      BNE.W    ??GetLMR_66
   \   000008CE   0xF8DF 0x1A40      LDR.W    R1,??GetLMR_63+0x4
   \   000008D2   0x225A             MOVS     R2,#+90
   \   000008D4   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000008D8   0x1861             ADDS     R1,R4,R1
   \   000008DA   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   000008DE   0x291E             CMP      R1,#+30
   \   000008E0   0xF47F 0xAF50      BNE.W    ??GetLMR_66
   \   000008E4   0xF8DF 0x1A28      LDR.W    R1,??GetLMR_63+0x4
   \   000008E8   0x225A             MOVS     R2,#+90
   \   000008EA   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000008EE   0x1861             ADDS     R1,R4,R1
   \   000008F0   0xF811 0x1C04      LDRB     R1,[R1, #-4]
   \   000008F4   0x29C8             CMP      R1,#+200
   \   000008F6   0xF47F 0xAF45      BNE.W    ??GetLMR_66
   \   000008FA   0xF8DF 0x1A14      LDR.W    R1,??GetLMR_63+0x4
   \   000008FE   0x225A             MOVS     R2,#+90
   \   00000900   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000904   0x1861             ADDS     R1,R4,R1
   \   00000906   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   0000090A   0x291E             CMP      R1,#+30
   \   0000090C   0xF47F 0xAF3A      BNE.W    ??GetLMR_66
   \   00000910   0xF8DF 0x19FC      LDR.W    R1,??GetLMR_63+0x4
   \   00000914   0x225A             MOVS     R2,#+90
   \   00000916   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   0000091A   0x1861             ADDS     R1,R4,R1
   \   0000091C   0xF811 0x1C05      LDRB     R1,[R1, #-5]
   \   00000920   0x29C8             CMP      R1,#+200
   \   00000922   0xF47F 0xAF2F      BNE.W    ??GetLMR_66
   \   00000926   0x1EA1             SUBS     R1,R4,#+2
   \   00000928   0x2959             CMP      R1,#+89
   \   0000092A   0xDA06             BGE.N    ??GetLMR_78
   \   0000092C   0x1EA1             SUBS     R1,R4,#+2
   \   0000092E   0xF8DF 0x2700      LDR.W    R2,??GetLMR_14+0x1C
   \   00000932   0xF842 0x1026      STR      R1,[R2, R6, LSL #+2]
   \   00000936   0xF05F 0x0801      MOVS     R8,#+1
   \                     ??GetLMR_78: (+1)
   \   0000093A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000093E   0x2900             CMP      R1,#+0
   \   00000940   0xF43F 0xAF21      BEQ.W    ??GetLMR_67
   \                     ??GetLMR_68: (+1)
   \   00000944   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000948   0x2800             CMP      R0,#+0
   \   0000094A   0xF040 0x8093      BNE.W    ??GetLMR_79
   \   0000094E   0xF119 0x0F01      CMN      R9,#+1
   \   00000952   0xF2C0 0x808F      BLT.W    ??GetLMR_79
   \   00000956   0x45DA             CMP      R10,R11
   \   00000958   0xF280 0x808C      BGE.W    ??GetLMR_79
   \   0000095C   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000960   0xF05F 0x0B00      MOVS     R11,#+0
   \   00000964   0x2001             MOVS     R0,#+1
   \   00000966   0xF8DF 0x1600      LDR.W    R1,??GetLMR_4+0x1C
   \   0000096A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000096E   0xF1B9 0x0F05      CMP      R9,#+5
   \   00000972   0xDA01             BGE.N    ??GetLMR_80
   \   00000974   0xF05F 0x0905      MOVS     R9,#+5
   \                     ??GetLMR_80: (+1)
   \   00000978   0x9807             LDR      R0,[SP, #+28]
   \   0000097A   0xEB10 0x0009      ADDS     R0,R0,R9
   \   0000097E   0xE002             B.N      ??GetLMR_81
   \                     ??GetLMR_82: (+1)
   \   00000980   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \                     ??GetLMR_83: (+1)
   \   00000984   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_81: (+1)
   \   00000986   0x2801             CMP      R0,#+1
   \   00000988   0xDB5D             BLT.N    ??GetLMR_84
   \   0000098A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000098E   0x2900             CMP      R1,#+0
   \   00000990   0xD1F8             BNE.N    ??GetLMR_83
   \   00000992   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000996   0xD4F5             BMI.N    ??GetLMR_83
   \   00000998   0xF8DF 0x1974      LDR.W    R1,??GetLMR_63+0x4
   \   0000099C   0x225A             MOVS     R2,#+90
   \   0000099E   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000009A2   0xEB19 0x0101      ADDS     R1,R9,R1
   \   000009A6   0x7889             LDRB     R1,[R1, #+2]
   \   000009A8   0x291E             CMP      R1,#+30
   \   000009AA   0xD102             BNE.N    ??GetLMR_85
   \   000009AC   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000009B0   0xE001             B.N      ??GetLMR_86
   \                     ??GetLMR_85: (+1)
   \   000009B2   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??GetLMR_86: (+1)
   \   000009B6   0xF8DF 0x1958      LDR.W    R1,??GetLMR_63+0x4
   \   000009BA   0x225A             MOVS     R2,#+90
   \   000009BC   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000009C0   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   000009C4   0x291E             CMP      R1,#+30
   \   000009C6   0xD1DB             BNE.N    ??GetLMR_82
   \   000009C8   0xF8DF 0x1944      LDR.W    R1,??GetLMR_63+0x4
   \   000009CC   0x225A             MOVS     R2,#+90
   \   000009CE   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000009D2   0xEB19 0x0101      ADDS     R1,R9,R1
   \   000009D6   0x78C9             LDRB     R1,[R1, #+3]
   \   000009D8   0x29C8             CMP      R1,#+200
   \   000009DA   0xD1D1             BNE.N    ??GetLMR_82
   \   000009DC   0xF8DF 0x1930      LDR.W    R1,??GetLMR_63+0x4
   \   000009E0   0x225A             MOVS     R2,#+90
   \   000009E2   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000009E6   0xEB19 0x0101      ADDS     R1,R9,R1
   \   000009EA   0x7849             LDRB     R1,[R1, #+1]
   \   000009EC   0x291E             CMP      R1,#+30
   \   000009EE   0xD1C7             BNE.N    ??GetLMR_82
   \   000009F0   0xF8DF 0x191C      LDR.W    R1,??GetLMR_63+0x4
   \   000009F4   0x225A             MOVS     R2,#+90
   \   000009F6   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   000009FA   0xEB19 0x0101      ADDS     R1,R9,R1
   \   000009FE   0x7909             LDRB     R1,[R1, #+4]
   \   00000A00   0x29C8             CMP      R1,#+200
   \   00000A02   0xD1BD             BNE.N    ??GetLMR_82
   \   00000A04   0xF8DF 0x1908      LDR.W    R1,??GetLMR_63+0x4
   \   00000A08   0x225A             MOVS     R2,#+90
   \   00000A0A   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000A0E   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000A12   0x7889             LDRB     R1,[R1, #+2]
   \   00000A14   0x291E             CMP      R1,#+30
   \   00000A16   0xD1B3             BNE.N    ??GetLMR_82
   \   00000A18   0xF8DF 0x18F4      LDR.W    R1,??GetLMR_63+0x4
   \   00000A1C   0x225A             MOVS     R2,#+90
   \   00000A1E   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000A22   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000A26   0x7949             LDRB     R1,[R1, #+5]
   \   00000A28   0x29C8             CMP      R1,#+200
   \   00000A2A   0xD1A9             BNE.N    ??GetLMR_82
   \   00000A2C   0xF119 0x0002      ADDS     R0,R9,#+2
   \   00000A30   0x2801             CMP      R0,#+1
   \   00000A32   0xDB08             BLT.N    ??GetLMR_87
   \   00000A34   0xF119 0x0002      ADDS     R0,R9,#+2
   \   00000A38   0xF8DF 0x15F8      LDR.W    R1,??GetLMR_14+0x20
   \   00000A3C   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000A40   0x2001             MOVS     R0,#+1
   \   00000A42   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??GetLMR_87: (+1)
   \                     ??GetLMR_84: (+1)
   \   00000A46   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000A4A   0x2800             CMP      R0,#+0
   \   00000A4C   0xF040 0x80A1      BNE.W    ??GetLMR_88
   \   00000A50   0x45DA             CMP      R10,R11
   \   00000A52   0xF280 0x809E      BGE.W    ??GetLMR_88
   \   00000A56   0x2002             MOVS     R0,#+2
   \   00000A58   0xF8DF 0x150C      LDR.W    R1,??GetLMR_4+0x1C
   \   00000A5C   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000A60   0xF07F 0x0004      MVNS     R0,#+4
   \   00000A64   0xF8DF 0x15CC      LDR.W    R1,??GetLMR_14+0x20
   \   00000A68   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000A6C   0x2001             MOVS     R0,#+1
   \   00000A6E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000A72   0xE08E             B.N      ??GetLMR_88
   \                     ??GetLMR_79: (+1)
   \   00000A74   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000A78   0x2800             CMP      R0,#+0
   \   00000A7A   0xF040 0x808A      BNE.W    ??GetLMR_88
   \   00000A7E   0xF1B9 0x0F5A      CMP      R9,#+90
   \   00000A82   0xF280 0x8086      BGE.W    ??GetLMR_88
   \   00000A86   0x45D3             CMP      R11,R10
   \   00000A88   0xF280 0x8083      BGE.W    ??GetLMR_88
   \   00000A8C   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000A90   0xF05F 0x0B00      MOVS     R11,#+0
   \   00000A94   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000A98   0xF8DF 0x14CC      LDR.W    R1,??GetLMR_4+0x1C
   \   00000A9C   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000AA0   0x4648             MOV      R0,R9
   \   00000AA2   0xE002             B.N      ??GetLMR_89
   \                     ??GetLMR_90: (+1)
   \   00000AA4   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??GetLMR_91: (+1)
   \   00000AA8   0x1C40             ADDS     R0,R0,#+1
   \                     ??GetLMR_89: (+1)
   \   00000AAA   0x285A             CMP      R0,#+90
   \   00000AAC   0xDA5E             BGE.N    ??GetLMR_92
   \   00000AAE   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000AB2   0x2900             CMP      R1,#+0
   \   00000AB4   0xD1F8             BNE.N    ??GetLMR_91
   \   00000AB6   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000ABA   0xD4F5             BMI.N    ??GetLMR_91
   \   00000ABC   0xF8DF 0x1850      LDR.W    R1,??GetLMR_63+0x4
   \   00000AC0   0x225A             MOVS     R2,#+90
   \   00000AC2   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000AC6   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000ACA   0x7889             LDRB     R1,[R1, #+2]
   \   00000ACC   0x291E             CMP      R1,#+30
   \   00000ACE   0xD102             BNE.N    ??GetLMR_93
   \   00000AD0   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000AD4   0xE001             B.N      ??GetLMR_94
   \                     ??GetLMR_93: (+1)
   \   00000AD6   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \                     ??GetLMR_94: (+1)
   \   00000ADA   0xF8DF 0x1834      LDR.W    R1,??GetLMR_63+0x4
   \   00000ADE   0x225A             MOVS     R2,#+90
   \   00000AE0   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000AE4   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   00000AE8   0x291E             CMP      R1,#+30
   \   00000AEA   0xD1DB             BNE.N    ??GetLMR_90
   \   00000AEC   0xF8DF 0x1820      LDR.W    R1,??GetLMR_63+0x4
   \   00000AF0   0x225A             MOVS     R2,#+90
   \   00000AF2   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000AF6   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000AFA   0x78C9             LDRB     R1,[R1, #+3]
   \   00000AFC   0x29C8             CMP      R1,#+200
   \   00000AFE   0xD1D1             BNE.N    ??GetLMR_90
   \   00000B00   0xF8DF 0x180C      LDR.W    R1,??GetLMR_63+0x4
   \   00000B04   0x225A             MOVS     R2,#+90
   \   00000B06   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000B0A   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000B0E   0x7849             LDRB     R1,[R1, #+1]
   \   00000B10   0x291E             CMP      R1,#+30
   \   00000B12   0xD1C7             BNE.N    ??GetLMR_90
   \   00000B14   0xF8DF 0x17F8      LDR.W    R1,??GetLMR_63+0x4
   \   00000B18   0x225A             MOVS     R2,#+90
   \   00000B1A   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000B1E   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000B22   0x7909             LDRB     R1,[R1, #+4]
   \   00000B24   0x29C8             CMP      R1,#+200
   \   00000B26   0xD1BD             BNE.N    ??GetLMR_90
   \   00000B28   0xF8DF 0x17E4      LDR.W    R1,??GetLMR_63+0x4
   \   00000B2C   0x225A             MOVS     R2,#+90
   \   00000B2E   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000B32   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000B36   0x7889             LDRB     R1,[R1, #+2]
   \   00000B38   0x291E             CMP      R1,#+30
   \   00000B3A   0xD1B3             BNE.N    ??GetLMR_90
   \   00000B3C   0xF8DF 0x17D0      LDR.W    R1,??GetLMR_63+0x4
   \   00000B40   0x225A             MOVS     R2,#+90
   \   00000B42   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000B46   0xEB19 0x0101      ADDS     R1,R9,R1
   \   00000B4A   0x7949             LDRB     R1,[R1, #+5]
   \   00000B4C   0x29C8             CMP      R1,#+200
   \   00000B4E   0xD1A9             BNE.N    ??GetLMR_90
   \   00000B50   0xF119 0x0102      ADDS     R1,R9,#+2
   \   00000B54   0x2901             CMP      R1,#+1
   \   00000B56   0xDBA7             BLT.N    ??GetLMR_91
   \   00000B58   0xF119 0x0102      ADDS     R1,R9,#+2
   \   00000B5C   0xF8DF 0x24D4      LDR.W    R2,??GetLMR_14+0x20
   \   00000B60   0xF842 0x1026      STR      R1,[R2, R6, LSL #+2]
   \   00000B64   0x2101             MOVS     R1,#+1
   \   00000B66   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   00000B6A   0xE79D             B.N      ??GetLMR_91
   \                     ??GetLMR_92: (+1)
   \   00000B6C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000B70   0x2800             CMP      R0,#+0
   \   00000B72   0xD10E             BNE.N    ??GetLMR_88
   \   00000B74   0x45D3             CMP      R11,R10
   \   00000B76   0xDA0C             BGE.N    ??GetLMR_88
   \   00000B78   0xF07F 0x0001      MVNS     R0,#+1
   \   00000B7C   0xF8DF 0x13E8      LDR.W    R1,??GetLMR_4+0x1C
   \   00000B80   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000B84   0x2001             MOVS     R0,#+1
   \   00000B86   0x9006             STR      R0,[SP, #+24]
   \   00000B88   0x205F             MOVS     R0,#+95
   \   00000B8A   0xF8DF 0x14A8      LDR.W    R1,??GetLMR_14+0x20
   \   00000B8E   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_88: (+1)
   \   00000B92   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000B96   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000B9A   0xF040 0x8085      BNE.W    ??GetLMR_95
   \   00000B9E   0x2C5B             CMP      R4,#+91
   \   00000BA0   0xF280 0x8082      BGE.W    ??GetLMR_95
   \   00000BA4   0x42BD             CMP      R5,R7
   \   00000BA6   0xF280 0x807F      BGE.W    ??GetLMR_95
   \   00000BAA   0x2500             MOVS     R5,#+0
   \   00000BAC   0x2700             MOVS     R7,#+0
   \   00000BAE   0x2001             MOVS     R0,#+1
   \   00000BB0   0xF8DF 0x1460      LDR.W    R1,??GetLMR_14
   \   00000BB4   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000BB8   0x2C5A             CMP      R4,#+90
   \   00000BBA   0xDB00             BLT.N    ??GetLMR_96
   \   00000BBC   0x2454             MOVS     R4,#+84
   \                     ??GetLMR_96: (+1)
   \   00000BBE   0x9807             LDR      R0,[SP, #+28]
   \   00000BC0   0x1A20             SUBS     R0,R4,R0
   \   00000BC2   0xE001             B.N      ??GetLMR_97
   \                     ??GetLMR_98: (+1)
   \   00000BC4   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetLMR_99: (+1)
   \   00000BC6   0x1C40             ADDS     R0,R0,#+1
   \                     ??GetLMR_97: (+1)
   \   00000BC8   0x285A             CMP      R0,#+90
   \   00000BCA   0xDA57             BGE.N    ??GetLMR_100
   \   00000BCC   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000BD0   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000BD4   0xD1F7             BNE.N    ??GetLMR_99
   \   00000BD6   0x2C5A             CMP      R4,#+90
   \   00000BD8   0xDAF5             BGE.N    ??GetLMR_99
   \   00000BDA   0xF8DF 0x1734      LDR.W    R1,??GetLMR_63+0x4
   \   00000BDE   0x225A             MOVS     R2,#+90
   \   00000BE0   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000BE4   0x1861             ADDS     R1,R4,R1
   \   00000BE6   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   00000BEA   0x291E             CMP      R1,#+30
   \   00000BEC   0xD101             BNE.N    ??GetLMR_101
   \   00000BEE   0x1C6D             ADDS     R5,R5,#+1
   \   00000BF0   0xE000             B.N      ??GetLMR_102
   \                     ??GetLMR_101: (+1)
   \   00000BF2   0x1C7F             ADDS     R7,R7,#+1
   \                     ??GetLMR_102: (+1)
   \   00000BF4   0xF8DF 0x1718      LDR.W    R1,??GetLMR_63+0x4
   \   00000BF8   0x225A             MOVS     R2,#+90
   \   00000BFA   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000BFE   0x5C61             LDRB     R1,[R4, R1]
   \   00000C00   0x291E             CMP      R1,#+30
   \   00000C02   0xD1DF             BNE.N    ??GetLMR_98
   \   00000C04   0xF8DF 0x1708      LDR.W    R1,??GetLMR_63+0x4
   \   00000C08   0x225A             MOVS     R2,#+90
   \   00000C0A   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000C0E   0x1861             ADDS     R1,R4,R1
   \   00000C10   0xF811 0x1C03      LDRB     R1,[R1, #-3]
   \   00000C14   0x29C8             CMP      R1,#+200
   \   00000C16   0xD1D5             BNE.N    ??GetLMR_98
   \   00000C18   0xF8DF 0x16F4      LDR.W    R1,??GetLMR_63+0x4
   \   00000C1C   0x225A             MOVS     R2,#+90
   \   00000C1E   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000C22   0x1861             ADDS     R1,R4,R1
   \   00000C24   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000C28   0x291E             CMP      R1,#+30
   \   00000C2A   0xD1CB             BNE.N    ??GetLMR_98
   \   00000C2C   0xF8DF 0x16E0      LDR.W    R1,??GetLMR_63+0x4
   \   00000C30   0x225A             MOVS     R2,#+90
   \   00000C32   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000C36   0x1861             ADDS     R1,R4,R1
   \   00000C38   0xF811 0x1C04      LDRB     R1,[R1, #-4]
   \   00000C3C   0x29C8             CMP      R1,#+200
   \   00000C3E   0xD1C1             BNE.N    ??GetLMR_98
   \   00000C40   0xF8DF 0x16CC      LDR.W    R1,??GetLMR_63+0x4
   \   00000C44   0x225A             MOVS     R2,#+90
   \   00000C46   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000C4A   0x1861             ADDS     R1,R4,R1
   \   00000C4C   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   00000C50   0x291E             CMP      R1,#+30
   \   00000C52   0xD1B7             BNE.N    ??GetLMR_98
   \   00000C54   0xF8DF 0x16B8      LDR.W    R1,??GetLMR_63+0x4
   \   00000C58   0x225A             MOVS     R2,#+90
   \   00000C5A   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000C5E   0x1861             ADDS     R1,R4,R1
   \   00000C60   0xF811 0x1C05      LDRB     R1,[R1, #-5]
   \   00000C64   0x29C8             CMP      R1,#+200
   \   00000C66   0xD1AD             BNE.N    ??GetLMR_98
   \   00000C68   0x1EA0             SUBS     R0,R4,#+2
   \   00000C6A   0x2859             CMP      R0,#+89
   \   00000C6C   0xDA06             BGE.N    ??GetLMR_103
   \   00000C6E   0x1EA0             SUBS     R0,R4,#+2
   \   00000C70   0xF8DF 0x13BC      LDR.W    R1,??GetLMR_14+0x1C
   \   00000C74   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000C78   0xF05F 0x0801      MOVS     R8,#+1
   \                     ??GetLMR_103: (+1)
   \                     ??GetLMR_100: (+1)
   \   00000C7C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000C80   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000C84   0xF040 0x80AB      BNE.W    ??GetLMR_104
   \   00000C88   0x42BD             CMP      R5,R7
   \   00000C8A   0xF280 0x80A8      BGE.W    ??GetLMR_104
   \   00000C8E   0x2002             MOVS     R0,#+2
   \   00000C90   0xF8DF 0x1380      LDR.W    R1,??GetLMR_14
   \   00000C94   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000C98   0x205F             MOVS     R0,#+95
   \   00000C9A   0xF8DF 0x1394      LDR.W    R1,??GetLMR_14+0x1C
   \   00000C9E   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000CA2   0xF05F 0x0801      MOVS     R8,#+1
   \   00000CA6   0xE09A             B.N      ??GetLMR_104
   \                     ??GetLMR_95: (+1)
   \   00000CA8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000CAC   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000CB0   0xF040 0x8095      BNE.W    ??GetLMR_104
   \   00000CB4   0x2C01             CMP      R4,#+1
   \   00000CB6   0xF2C0 0x8092      BLT.W    ??GetLMR_104
   \   00000CBA   0x42AF             CMP      R7,R5
   \   00000CBC   0xF280 0x808F      BGE.W    ??GetLMR_104
   \   00000CC0   0x2500             MOVS     R5,#+0
   \   00000CC2   0x2700             MOVS     R7,#+0
   \   00000CC4   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000CC8   0x49D2             LDR.N    R1,??GetLMR_14
   \   00000CCA   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000CCE   0x0020             MOVS     R0,R4
   \   00000CD0   0xE001             B.N      ??GetLMR_105
   \                     ??GetLMR_106: (+1)
   \   00000CD2   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetLMR_107: (+1)
   \   00000CD4   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_105: (+1)
   \   00000CD6   0x2801             CMP      R0,#+1
   \   00000CD8   0xDB6E             BLT.N    ??GetLMR_108
   \   00000CDA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000CDE   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000CE2   0xD1F7             BNE.N    ??GetLMR_107
   \   00000CE4   0x2C5A             CMP      R4,#+90
   \   00000CE6   0xDAF5             BGE.N    ??GetLMR_107
   \   00000CE8   0xF8DF 0x1624      LDR.W    R1,??GetLMR_63+0x4
   \   00000CEC   0x225A             MOVS     R2,#+90
   \   00000CEE   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000CF2   0x1861             ADDS     R1,R4,R1
   \   00000CF4   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   00000CF8   0x291E             CMP      R1,#+30
   \   00000CFA   0xD119             BNE.N    ??GetLMR_109
   \   00000CFC   0x1C6D             ADDS     R5,R5,#+1
   \   00000CFE   0xE018             B.N      ??GetLMR_110
   \                     ??GetLMR_0:
   \   00000D00   0x........         DC32     NoValidMax
   \   00000D04   0x........         DC32     StableNumbers
   \   00000D08   0x........         DC32     LeftStableNumbers
   \   00000D0C   0x........         DC32     RightStableNumbers
   \   00000D10   0x........         DC32     EndType
   \   00000D14   0x........         DC32     ValidLineCount1
   \   00000D18   0x........         DC32     ValidLineCount2
   \   00000D1C   0x........         DC32     midline_fcount
   \   00000D20   0x........         DC32     midline_fcount_max
   \   00000D24   0x........         DC32     last_is_midline
   \   00000D28   0x........         DC32     this_is_midline
   \   00000D2C   0x........         DC32     BlackRow
   \                     ??GetLMR_109: (+1)
   \   00000D30   0x1C7F             ADDS     R7,R7,#+1
   \                     ??GetLMR_110: (+1)
   \   00000D32   0xF8DF 0x15DC      LDR.W    R1,??GetLMR_63+0x4
   \   00000D36   0x225A             MOVS     R2,#+90
   \   00000D38   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000D3C   0x5C61             LDRB     R1,[R4, R1]
   \   00000D3E   0x291E             CMP      R1,#+30
   \   00000D40   0xD1C7             BNE.N    ??GetLMR_106
   \   00000D42   0xF8DF 0x15CC      LDR.W    R1,??GetLMR_63+0x4
   \   00000D46   0x225A             MOVS     R2,#+90
   \   00000D48   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000D4C   0x1861             ADDS     R1,R4,R1
   \   00000D4E   0xF811 0x1C03      LDRB     R1,[R1, #-3]
   \   00000D52   0x29C8             CMP      R1,#+200
   \   00000D54   0xD1BD             BNE.N    ??GetLMR_106
   \   00000D56   0xF8DF 0x15B8      LDR.W    R1,??GetLMR_63+0x4
   \   00000D5A   0x225A             MOVS     R2,#+90
   \   00000D5C   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000D60   0x1861             ADDS     R1,R4,R1
   \   00000D62   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \   00000D66   0x291E             CMP      R1,#+30
   \   00000D68   0xD1B3             BNE.N    ??GetLMR_106
   \   00000D6A   0xF8DF 0x15A4      LDR.W    R1,??GetLMR_63+0x4
   \   00000D6E   0x225A             MOVS     R2,#+90
   \   00000D70   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000D74   0x1861             ADDS     R1,R4,R1
   \   00000D76   0xF811 0x1C04      LDRB     R1,[R1, #-4]
   \   00000D7A   0x29C8             CMP      R1,#+200
   \   00000D7C   0xD1A9             BNE.N    ??GetLMR_106
   \   00000D7E   0xF8DF 0x1590      LDR.W    R1,??GetLMR_63+0x4
   \   00000D82   0x225A             MOVS     R2,#+90
   \   00000D84   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000D88   0x1861             ADDS     R1,R4,R1
   \   00000D8A   0xF811 0x1C02      LDRB     R1,[R1, #-2]
   \   00000D8E   0x291E             CMP      R1,#+30
   \   00000D90   0xD19F             BNE.N    ??GetLMR_106
   \   00000D92   0xF8DF 0x157C      LDR.W    R1,??GetLMR_63+0x4
   \   00000D96   0x225A             MOVS     R2,#+90
   \   00000D98   0xFB02 0x1106      MLA      R1,R2,R6,R1
   \   00000D9C   0x1861             ADDS     R1,R4,R1
   \   00000D9E   0xF811 0x1C05      LDRB     R1,[R1, #-5]
   \   00000DA2   0x29C8             CMP      R1,#+200
   \   00000DA4   0xD195             BNE.N    ??GetLMR_106
   \   00000DA6   0x1EA0             SUBS     R0,R4,#+2
   \   00000DA8   0x2859             CMP      R0,#+89
   \   00000DAA   0xDA05             BGE.N    ??GetLMR_111
   \   00000DAC   0x1EA0             SUBS     R0,R4,#+2
   \   00000DAE   0x49A0             LDR.N    R1,??GetLMR_14+0x1C
   \   00000DB0   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000DB4   0xF05F 0x0801      MOVS     R8,#+1
   \                     ??GetLMR_111: (+1)
   \                     ??GetLMR_108: (+1)
   \   00000DB8   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000DBC   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000DC0   0xD10D             BNE.N    ??GetLMR_104
   \   00000DC2   0x42AF             CMP      R7,R5
   \   00000DC4   0xDA0B             BGE.N    ??GetLMR_104
   \   00000DC6   0xF07F 0x0001      MVNS     R0,#+1
   \   00000DCA   0x4992             LDR.N    R1,??GetLMR_14
   \   00000DCC   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000DD0   0xF07F 0x0004      MVNS     R0,#+4
   \   00000DD4   0x4996             LDR.N    R1,??GetLMR_14+0x1C
   \   00000DD6   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000DDA   0x2001             MOVS     R0,#+1
   \   00000DDC   0x9005             STR      R0,[SP, #+20]
   \                     ??GetLMR_104: (+1)
   \   00000DDE   0x4894             LDR.N    R0,??GetLMR_14+0x1C
   \   00000DE0   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000DE4   0x4993             LDR.N    R1,??GetLMR_14+0x20
   \   00000DE6   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00000DEA   0x1A40             SUBS     R0,R0,R1
   \   00000DEC   0x2808             CMP      R0,#+8
   \   00000DEE   0xDA28             BGE.N    ??GetLMR_112
   \   00000DF0   0x2E3C             CMP      R6,#+60
   \   00000DF2   0xDA04             BGE.N    ??GetLMR_113
   \   00000DF4   0xF1D6 0x005E      RSBS     R0,R6,#+94
   \   00000DF8   0x.... 0x....      LDR.W    R1,??DataTable9
   \   00000DFC   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_113: (+1)
   \   00000DFE   0x2001             MOVS     R0,#+1
   \   00000E00   0x9006             STR      R0,[SP, #+24]
   \   00000E02   0x2001             MOVS     R0,#+1
   \   00000E04   0x9005             STR      R0,[SP, #+20]
   \   00000E06   0x2001             MOVS     R0,#+1
   \   00000E08   0x9003             STR      R0,[SP, #+12]
   \   00000E0A   0x2007             MOVS     R0,#+7
   \   00000E0C   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000E10   0x6008             STR      R0,[R1, #+0]
   \   00000E12   0x483C             LDR.N    R0,??GetLMR_2+0x24
   \   00000E14   0x6800             LDR      R0,[R0, #+0]
   \   00000E16   0x3864             SUBS     R0,R0,#+100
   \   00000E18   0x1830             ADDS     R0,R6,R0
   \   00000E1A   0x280B             CMP      R0,#+11
   \   00000E1C   0xDB11             BLT.N    ??GetLMR_112
   \   00000E1E   0x2000             MOVS     R0,#+0
   \   00000E20   0x9006             STR      R0,[SP, #+24]
   \   00000E22   0x2000             MOVS     R0,#+0
   \   00000E24   0x9005             STR      R0,[SP, #+20]
   \   00000E26   0x2000             MOVS     R0,#+0
   \   00000E28   0x9003             STR      R0,[SP, #+12]
   \   00000E2A   0x4880             LDR.N    R0,??GetLMR_14+0x18
   \   00000E2C   0x6800             LDR      R0,[R0, #+0]
   \   00000E2E   0x301E             ADDS     R0,R0,#+30
   \   00000E30   0x497F             LDR.N    R1,??GetLMR_14+0x1C
   \   00000E32   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00000E36   0x487D             LDR.N    R0,??GetLMR_14+0x18
   \   00000E38   0x6800             LDR      R0,[R0, #+0]
   \   00000E3A   0x381E             SUBS     R0,R0,#+30
   \   00000E3C   0x497D             LDR.N    R1,??GetLMR_14+0x20
   \   00000E3E   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_112: (+1)
   \   00000E42   0x487B             LDR.N    R0,??GetLMR_14+0x1C
   \   00000E44   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000E48   0x280E             CMP      R0,#+14
   \   00000E4A   0xDB04             BLT.N    ??GetLMR_114
   \   00000E4C   0x4879             LDR.N    R0,??GetLMR_14+0x20
   \   00000E4E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000E52   0x284D             CMP      R0,#+77
   \   00000E54   0xDB09             BLT.N    ??GetLMR_115
   \                     ??GetLMR_114: (+1)
   \   00000E56   0x2001             MOVS     R0,#+1
   \   00000E58   0x9006             STR      R0,[SP, #+24]
   \   00000E5A   0x2001             MOVS     R0,#+1
   \   00000E5C   0x9005             STR      R0,[SP, #+20]
   \   00000E5E   0x2001             MOVS     R0,#+1
   \   00000E60   0x9003             STR      R0,[SP, #+12]
   \   00000E62   0x200B             MOVS     R0,#+11
   \   00000E64   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000E68   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_115: (+1)
   \   00000E6A   0x980B             LDR      R0,[SP, #+44]
   \   00000E6C   0x2850             CMP      R0,#+80
   \   00000E6E   0xDB25             BLT.N    ??GetLMR_116
   \   00000E70   0x2000             MOVS     R0,#+0
   \   00000E72   0x900B             STR      R0,[SP, #+44]
   \   00000E74   0x2001             MOVS     R0,#+1
   \   00000E76   0x.... 0x....      LDR.W    R1,??DataTable9_2
   \   00000E7A   0x5470             STRB     R0,[R6, R1]
   \   00000E7C   0x.... 0x....      LDR.W    R0,??DataTable9_3
   \   00000E80   0x7800             LDRB     R0,[R0, #+0]
   \   00000E82   0x1C40             ADDS     R0,R0,#+1
   \   00000E84   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   00000E88   0x7008             STRB     R0,[R1, #+0]
   \   00000E8A   0x2001             MOVS     R0,#+1
   \   00000E8C   0x9006             STR      R0,[SP, #+24]
   \   00000E8E   0x2001             MOVS     R0,#+1
   \   00000E90   0x9005             STR      R0,[SP, #+20]
   \   00000E92   0x2001             MOVS     R0,#+1
   \   00000E94   0x9003             STR      R0,[SP, #+12]
   \   00000E96   0x200C             MOVS     R0,#+12
   \   00000E98   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000E9C   0x6008             STR      R0,[R1, #+0]
   \   00000E9E   0xE037             B.N      ??GetLMR_117
   \                     ??GetLMR_1:
   \   00000EA0   0x........         DC32     WhiteRow
   \   00000EA4   0x........         DC32     WhiteRow1
   \   00000EA8   0x........         DC32     sfminline
   \   00000EAC   0x........         DC32     mid_line_count
   \   00000EB0   0x........         DC32     mid_line_count_ls
   \   00000EB4   0x........         DC32     RightWhite
   \   00000EB8   0x........         DC32     LeftWhite
   \                     ??GetLMR_116: (+1)
   \   00000EBC   0x980A             LDR      R0,[SP, #+40]
   \   00000EBE   0x2850             CMP      R0,#+80
   \   00000EC0   0xDB22             BLT.N    ??GetLMR_118
   \   00000EC2   0x2000             MOVS     R0,#+0
   \   00000EC4   0x900A             STR      R0,[SP, #+40]
   \   00000EC6   0x.... 0x....      LDR.W    R0,??DataTable9_4
   \   00000ECA   0x7800             LDRB     R0,[R0, #+0]
   \   00000ECC   0x1C40             ADDS     R0,R0,#+1
   \   00000ECE   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   00000ED2   0x7008             STRB     R0,[R1, #+0]
   \   00000ED4   0x2002             MOVS     R0,#+2
   \   00000ED6   0x.... 0x....      LDR.W    R1,??DataTable9_2
   \   00000EDA   0x5470             STRB     R0,[R6, R1]
   \   00000EDC   0xE018             B.N      ??GetLMR_117
   \   00000EDE   0xBF00             Nop      
   \                     ??GetLMR_2:
   \   00000EE0   0x........         DC32     yxhs
   \   00000EE4   0x........         DC32     tbs_z
   \   00000EE8   0x........         DC32     tbs_y
   \   00000EEC   0x........         DC32     mode1
   \   00000EF0   0x........         DC32     mode2
   \   00000EF4   0x........         DC32     mode3
   \   00000EF8   0x........         DC32     mode4
   \   00000EFC   0x........         DC32     mode4_zhangai
   \   00000F00   0x........         DC32     zaw_mode
   \   00000F04   0x........         DC32     BlackEndMax
   \                     ??GetLMR_118: (+1)
   \   00000F08   0x2000             MOVS     R0,#+0
   \   00000F0A   0x.... 0x....      LDR.W    R1,??DataTable9_2
   \   00000F0E   0x5470             STRB     R0,[R6, R1]
   \                     ??GetLMR_117: (+1)
   \   00000F10   0x9806             LDR      R0,[SP, #+24]
   \   00000F12   0x2800             CMP      R0,#+0
   \   00000F14   0xD106             BNE.N    ??GetLMR_119
   \   00000F16   0x.... 0x....      LDR.W    R0,??DataTable9_5
   \   00000F1A   0x6800             LDR      R0,[R0, #+0]
   \   00000F1C   0x1C40             ADDS     R0,R0,#+1
   \   00000F1E   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   00000F22   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_119: (+1)
   \   00000F24   0x9805             LDR      R0,[SP, #+20]
   \   00000F26   0x2800             CMP      R0,#+0
   \   00000F28   0xD106             BNE.N    ??GetLMR_120
   \   00000F2A   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   00000F2E   0x6800             LDR      R0,[R0, #+0]
   \   00000F30   0x1C40             ADDS     R0,R0,#+1
   \   00000F32   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   00000F36   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_120: (+1)
   \   00000F38   0x9806             LDR      R0,[SP, #+24]
   \   00000F3A   0x2800             CMP      R0,#+0
   \   00000F3C   0xD103             BNE.N    ??GetLMR_121
   \   00000F3E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000F42   0x2800             CMP      R0,#+0
   \   00000F44   0xD112             BNE.N    ??GetLMR_122
   \                     ??GetLMR_121: (+1)
   \   00000F46   0x2001             MOVS     R0,#+1
   \   00000F48   0xE011             B.N      ??GetLMR_123
   \   00000F4A   0xBF00             Nop      
   \                     ??GetLMR_4:
   \   00000F4C   0x........         DC32     MidPos
   \   00000F50   0x........         DC32     hx_find_count_max
   \   00000F54   0x........         DC32     hx_i
   \   00000F58   0x........         DC32     hx_end_line
   \   00000F5C   0x........         DC32     hx
   \   00000F60   0x........         DC32     hx_found_Column
   \   00000F64   0x........         DC32     BlackLineData
   \   00000F68   0x........         DC32     tiaobian_Left
   \                     ??GetLMR_122: (+1)
   \   00000F6C   0x2000             MOVS     R0,#+0
   \                     ??GetLMR_123: (+1)
   \   00000F6E   0x9905             LDR      R1,[SP, #+20]
   \   00000F70   0x2900             CMP      R1,#+0
   \   00000F72   0xD104             BNE.N    ??GetLMR_124
   \   00000F74   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000F78   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000F7C   0xD101             BNE.N    ??GetLMR_125
   \                     ??GetLMR_124: (+1)
   \   00000F7E   0x2101             MOVS     R1,#+1
   \   00000F80   0xE000             B.N      ??GetLMR_126
   \                     ??GetLMR_125: (+1)
   \   00000F82   0x2100             MOVS     R1,#+0
   \                     ??GetLMR_126: (+1)
   \   00000F84   0x180A             ADDS     R2,R1,R0
   \   00000F86   0x2A01             CMP      R2,#+1
   \   00000F88   0xDB22             BLT.N    ??GetLMR_127
   \   00000F8A   0x.... 0x....      LDR.W    R2,??DataTable9_7
   \   00000F8E   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00000F92   0x2A00             CMP      R2,#+0
   \   00000F94   0xD006             BEQ.N    ??GetLMR_128
   \   00000F96   0x.... 0x....      LDR.W    R2,??DataTable9_8
   \   00000F9A   0x6812             LDR      R2,[R2, #+0]
   \   00000F9C   0x1C52             ADDS     R2,R2,#+1
   \   00000F9E   0x.... 0x....      LDR.W    R3,??DataTable9_8
   \   00000FA2   0x601A             STR      R2,[R3, #+0]
   \                     ??GetLMR_128: (+1)
   \   00000FA4   0x4A1B             LDR.N    R2,??GetLMR_14
   \   00000FA6   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00000FAA   0x2A00             CMP      R2,#+0
   \   00000FAC   0xD006             BEQ.N    ??GetLMR_129
   \   00000FAE   0x.... 0x....      LDR.W    R2,??DataTable9_9
   \   00000FB2   0x6812             LDR      R2,[R2, #+0]
   \   00000FB4   0x1C52             ADDS     R2,R2,#+1
   \   00000FB6   0x.... 0x....      LDR.W    R3,??DataTable9_9
   \   00000FBA   0x601A             STR      R2,[R3, #+0]
   \                     ??GetLMR_129: (+1)
   \   00000FBC   0x.... 0x....      LDR.W    R2,??DataTable9_8
   \   00000FC0   0x6812             LDR      R2,[R2, #+0]
   \   00000FC2   0x.... 0x....      LDR.W    R3,??DataTable9_9
   \   00000FC6   0x681B             LDR      R3,[R3, #+0]
   \   00000FC8   0x189A             ADDS     R2,R3,R2
   \   00000FCA   0x.... 0x....      LDR.W    R3,??DataTable9_10
   \   00000FCE   0x601A             STR      R2,[R3, #+0]
   \                     ??GetLMR_127: (+1)
   \   00000FD0   0xEA51 0x0200      ORRS     R2,R1,R0
   \   00000FD4   0x2A00             CMP      R2,#+0
   \   00000FD6   0xD137             BNE.N    ??GetLMR_130
   \   00000FD8   0x4A15             LDR.N    R2,??GetLMR_14+0x1C
   \   00000FDA   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00000FDE   0x2A5B             CMP      R2,#+91
   \   00000FE0   0xDB0A             BLT.N    ??GetLMR_131
   \   00000FE2   0x4A14             LDR.N    R2,??GetLMR_14+0x20
   \   00000FE4   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00000FE8   0x2A01             CMP      R2,#+1
   \   00000FEA   0xDB05             BLT.N    ??GetLMR_131
   \   00000FEC   0x2900             CMP      R1,#+0
   \   00000FEE   0xD101             BNE.N    ??GetLMR_132
   \   00000FF0   0x2101             MOVS     R1,#+1
   \   00000FF2   0xE029             B.N      ??GetLMR_130
   \                     ??GetLMR_132: (+1)
   \   00000FF4   0x2100             MOVS     R1,#+0
   \   00000FF6   0xE027             B.N      ??GetLMR_130
   \                     ??GetLMR_131: (+1)
   \   00000FF8   0x4A0D             LDR.N    R2,??GetLMR_14+0x1C
   \   00000FFA   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00000FFE   0x2A5A             CMP      R2,#+90
   \   00001000   0xDA22             BGE.N    ??GetLMR_133
   \   00001002   0x4A0C             LDR.N    R2,??GetLMR_14+0x20
   \   00001004   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00001008   0x2A00             CMP      R2,#+0
   \   0000100A   0xD51D             BPL.N    ??GetLMR_133
   \   0000100C   0x2800             CMP      R0,#+0
   \   0000100E   0xD119             BNE.N    ??GetLMR_134
   \   00001010   0x2001             MOVS     R0,#+1
   \   00001012   0xE019             B.N      ??GetLMR_130
   \                     ??GetLMR_14:
   \   00001014   0x........         DC32     tiaobian_Right
   \   00001018   0x9999999A         DC32     0x9999999a
   \   0000101C   0x3FD99999         DC32     0x3fd99999
   \   00001020   0x40590000         DC32     0x40590000
   \   00001024   0x3FD33333         DC32     0x3fd33333
   \   00001028   0x40140000         DC32     0x40140000
   \   0000102C   0x........         DC32     BlackEndColumnMax
   \   00001030   0x........         DC32     RightBlack
   \   00001034   0x........         DC32     LeftBlack
   \   00001038   0x........         DC32     BlackEndL
   \   0000103C   0x........         DC32     BlackEndM
   \   00001040   0x........         DC32     BlackEndR
   \                     ??GetLMR_134: (+1)
   \   00001044   0x2000             MOVS     R0,#+0
   \   00001046   0xE7FF             B.N      ??GetLMR_130
   \                     ??GetLMR_133: (+1)
   \                     ??GetLMR_130: (+1)
   \   00001048   0x2800             CMP      R0,#+0
   \   0000104A   0xF000 0x80B1      BEQ.W    ??GetLMR_135
   \   0000104E   0x2900             CMP      R1,#+0
   \   00001050   0xF040 0x80AE      BNE.W    ??GetLMR_135
   \   00001054   0x.... 0x....      LDR.W    R0,??DataTable9_11
   \   00001058   0x6800             LDR      R0,[R0, #+0]
   \   0000105A   0x1C40             ADDS     R0,R0,#+1
   \   0000105C   0x.... 0x....      LDR.W    R1,??DataTable9_11
   \   00001060   0x6008             STR      R0,[R1, #+0]
   \   00001062   0x.... 0x....      LDR.W    R0,??DataTable9_12
   \   00001066   0x6800             LDR      R0,[R0, #+0]
   \   00001068   0x1C40             ADDS     R0,R0,#+1
   \   0000106A   0x.... 0x....      LDR.W    R1,??DataTable9_12
   \   0000106E   0x6008             STR      R0,[R1, #+0]
   \   00001070   0x2001             MOVS     R0,#+1
   \   00001072   0x.... 0x....      LDR.W    R1,??DataTable10
   \   00001076   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000107A   0x.... 0x....      LDR.W    R0,??DataTable9_13
   \   0000107E   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00001082   0x2800             CMP      R0,#+0
   \   00001084   0xD001             BEQ.N    ??GetLMR_136
   \   00001086   0x2E61             CMP      R6,#+97
   \   00001088   0xDB0A             BLT.N    ??GetLMR_137
   \                     ??GetLMR_136: (+1)
   \   0000108A   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   0000108E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001092   0x9904             LDR      R1,[SP, #+16]
   \   00001094   0x1A40             SUBS     R0,R0,R1
   \   00001096   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   0000109A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000109E   0xE013             B.N      ??GetLMR_138
   \                     ??GetLMR_137: (+1)
   \   000010A0   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000010A4   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000010A8   0x6840             LDR      R0,[R0, #+4]
   \   000010AA   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   000010AE   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   000010B2   0x1808             ADDS     R0,R1,R0
   \   000010B4   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   000010B8   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   000010BC   0x6849             LDR      R1,[R1, #+4]
   \   000010BE   0x1A40             SUBS     R0,R0,R1
   \   000010C0   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000010C4   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_138: (+1)
   \   000010C8   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   000010CC   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000010D0   0xF110 0x0F05      CMN      R0,#+5
   \   000010D4   0xD132             BNE.N    ??GetLMR_139
   \   000010D6   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000010DA   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000010DE   0x.... 0x....      BL       __aeabi_i2d
   \   000010E2   0x0002             MOVS     R2,R0
   \   000010E4   0x000B             MOVS     R3,R1
   \   000010E6   0x0014             MOVS     R4,R2
   \   000010E8   0x001D             MOVS     R5,R3
   \   000010EA   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   000010EE   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000010F2   0x.... 0x....      BL       __aeabi_i2d
   \   000010F6   0x.... 0x....      LDR.W    R2,??DataTable10_4  ;; 0x9999999a
   \   000010FA   0x.... 0x....      LDR.W    R3,??DataTable10_5  ;; 0x3fd99999
   \   000010FE   0x.... 0x....      BL       __aeabi_dmul
   \   00001102   0x0022             MOVS     R2,R4
   \   00001104   0x002B             MOVS     R3,R5
   \   00001106   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000110A   0xD217             BCS.N    ??GetLMR_139
   \   0000110C   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001110   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001114   0x2829             CMP      R0,#+41
   \   00001116   0xDB11             BLT.N    ??GetLMR_139
   \   00001118   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   0000111C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001120   0x.... 0x....      BL       __aeabi_i2d
   \   00001124   0x.... 0x....      LDR.W    R2,??DataTable10_4  ;; 0x9999999a
   \   00001128   0x.... 0x....      LDR.W    R3,??DataTable10_5  ;; 0x3fd99999
   \   0000112C   0x.... 0x....      BL       __aeabi_dmul
   \   00001130   0x.... 0x....      BL       __aeabi_d2iz
   \   00001134   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00001138   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_139: (+1)
   \   0000113C   0x.... 0x....      LDR.W    R0,??DataTable9_12
   \   00001140   0x6800             LDR      R0,[R0, #+0]
   \   00001142   0x280B             CMP      R0,#+11
   \   00001144   0xDB1D             BLT.N    ??GetLMR_140
   \   00001146   0xF1D6 0x0064      RSBS     R0,R6,#+100
   \   0000114A   0x2829             CMP      R0,#+41
   \   0000114C   0xDA19             BGE.N    ??GetLMR_140
   \   0000114E   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   00001152   0x6800             LDR      R0,[R0, #+0]
   \   00001154   0x2800             CMP      R0,#+0
   \   00001156   0xD014             BEQ.N    ??GetLMR_140
   \   00001158   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000115C   0x6800             LDR      R0,[R0, #+0]
   \   0000115E   0x283C             CMP      R0,#+60
   \   00001160   0xDA0F             BGE.N    ??GetLMR_140
   \   00001162   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00001166   0x6800             LDR      R0,[R0, #+0]
   \   00001168   0x2800             CMP      R0,#+0
   \   0000116A   0xD00A             BEQ.N    ??GetLMR_140
   \   0000116C   0x2063             MOVS     R0,#+99
   \   0000116E   0xE005             B.N      ??GetLMR_141
   \                     ??GetLMR_142: (+1)
   \   00001170   0x2101             MOVS     R1,#+1
   \   00001172   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00001176   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   0000117A   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_141: (+1)
   \   0000117C   0x283A             CMP      R0,#+58
   \   0000117E   0xDAF7             BGE.N    ??GetLMR_142
   \   00001180   0x9610             STR      R6,[SP, #+64]
   \                     ??GetLMR_140: (+1)
   \   00001182   0x2E63             CMP      R6,#+99
   \   00001184   0xF040 0x82F9      BNE.W    ??GetLMR_53
   \   00001188   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000118C   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00001190   0x6008             STR      R0,[R1, #+0]
   \   00001192   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001196   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000119A   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000119E   0x6008             STR      R0,[R1, #+0]
   \   000011A0   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000011A4   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000011A8   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000011AC   0x6008             STR      R0,[R1, #+0]
   \   000011AE   0xE2E4             B.N      ??GetLMR_53
   \                     ??GetLMR_135: (+1)
   \   000011B0   0x2800             CMP      R0,#+0
   \   000011B2   0xF040 0x80D4      BNE.W    ??GetLMR_143
   \   000011B6   0x2900             CMP      R1,#+0
   \   000011B8   0xF000 0x80D1      BEQ.W    ??GetLMR_143
   \   000011BC   0x.... 0x....      LDR.W    R0,??DataTable9_11
   \   000011C0   0x6800             LDR      R0,[R0, #+0]
   \   000011C2   0x1C40             ADDS     R0,R0,#+1
   \   000011C4   0x.... 0x....      LDR.W    R1,??DataTable9_11
   \   000011C8   0x6008             STR      R0,[R1, #+0]
   \   000011CA   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   000011CE   0x6800             LDR      R0,[R0, #+0]
   \   000011D0   0x1C40             ADDS     R0,R0,#+1
   \   000011D2   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   000011D6   0x6008             STR      R0,[R1, #+0]
   \   000011D8   0x2002             MOVS     R0,#+2
   \   000011DA   0x.... 0x....      LDR.W    R1,??DataTable10
   \   000011DE   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000011E2   0x.... 0x....      LDR.W    R0,??DataTable9_13
   \   000011E6   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   000011EA   0x2800             CMP      R0,#+0
   \   000011EC   0xD001             BEQ.N    ??GetLMR_144
   \   000011EE   0x2E60             CMP      R6,#+96
   \   000011F0   0xDA0A             BGE.N    ??GetLMR_145
   \                     ??GetLMR_144: (+1)
   \   000011F2   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   000011F6   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000011FA   0x9904             LDR      R1,[SP, #+16]
   \   000011FC   0x1808             ADDS     R0,R1,R0
   \   000011FE   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00001202   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00001206   0xE012             B.N      ??GetLMR_146
   \                     ??GetLMR_145: (+1)
   \   00001208   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000120C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001210   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00001214   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00001218   0x1808             ADDS     R0,R1,R0
   \   0000121A   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   0000121E   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00001222   0x6849             LDR      R1,[R1, #+4]
   \   00001224   0x1A40             SUBS     R0,R0,R1
   \   00001226   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   0000122A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_146: (+1)
   \   0000122E   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001232   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001236   0x285F             CMP      R0,#+95
   \   00001238   0xD14E             BNE.N    ??GetLMR_147
   \   0000123A   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000123E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001242   0xF1D0 0x005A      RSBS     R0,R0,#+90
   \   00001246   0x.... 0x....      BL       __aeabi_i2d
   \   0000124A   0xF05F 0x3233      MOVS     R2,#+858993459
   \   0000124E   0x.... 0x....      LDR.W    R3,??DataTable12_1  ;; 0x3fe33333
   \   00001252   0x.... 0x....      BL       __aeabi_dmul
   \   00001256   0x0004             MOVS     R4,R0
   \   00001258   0x000D             MOVS     R5,R1
   \   0000125A   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000125E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001262   0x.... 0x....      BL       __aeabi_i2d
   \   00001266   0x0022             MOVS     R2,R4
   \   00001268   0x002B             MOVS     R3,R5
   \   0000126A   0x.... 0x....      BL       __aeabi_dadd
   \   0000126E   0x0002             MOVS     R2,R0
   \   00001270   0x000B             MOVS     R3,R1
   \   00001272   0x0014             MOVS     R4,R2
   \   00001274   0x001D             MOVS     R5,R3
   \   00001276   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000127A   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000127E   0x.... 0x....      BL       __aeabi_i2d
   \   00001282   0x0022             MOVS     R2,R4
   \   00001284   0x002B             MOVS     R3,R5
   \   00001286   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000128A   0xD225             BCS.N    ??GetLMR_147
   \   0000128C   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00001290   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001294   0x283C             CMP      R0,#+60
   \   00001296   0xDA1F             BGE.N    ??GetLMR_147
   \   00001298   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000129C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000012A0   0xF1D0 0x005A      RSBS     R0,R0,#+90
   \   000012A4   0x.... 0x....      BL       __aeabi_i2d
   \   000012A8   0xF05F 0x3233      MOVS     R2,#+858993459
   \   000012AC   0x.... 0x....      LDR.W    R3,??DataTable12_1  ;; 0x3fe33333
   \   000012B0   0x.... 0x....      BL       __aeabi_dmul
   \   000012B4   0x0004             MOVS     R4,R0
   \   000012B6   0x000D             MOVS     R5,R1
   \   000012B8   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   000012BC   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000012C0   0x.... 0x....      BL       __aeabi_i2d
   \   000012C4   0x0022             MOVS     R2,R4
   \   000012C6   0x002B             MOVS     R3,R5
   \   000012C8   0x.... 0x....      BL       __aeabi_dadd
   \   000012CC   0x.... 0x....      BL       __aeabi_d2iz
   \   000012D0   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000012D4   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_147: (+1)
   \   000012D8   0x.... 0x....      LDR.W    R0,??DataTable11_4
   \   000012DC   0x6800             LDR      R0,[R0, #+0]
   \   000012DE   0x280B             CMP      R0,#+11
   \   000012E0   0xDB26             BLT.N    ??GetLMR_148
   \   000012E2   0xF1D6 0x0064      RSBS     R0,R6,#+100
   \   000012E6   0x282C             CMP      R0,#+44
   \   000012E8   0xDA22             BGE.N    ??GetLMR_148
   \   000012EA   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   000012EE   0x6800             LDR      R0,[R0, #+0]
   \   000012F0   0x2800             CMP      R0,#+0
   \   000012F2   0xD01D             BEQ.N    ??GetLMR_148
   \   000012F4   0x.... 0x....      LDR.W    R0,??DataTable11
   \   000012F8   0x6800             LDR      R0,[R0, #+0]
   \   000012FA   0x283C             CMP      R0,#+60
   \   000012FC   0xDA18             BGE.N    ??GetLMR_148
   \   000012FE   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   00001302   0x6800             LDR      R0,[R0, #+0]
   \   00001304   0x2800             CMP      R0,#+0
   \   00001306   0xD013             BEQ.N    ??GetLMR_148
   \   00001308   0x2063             MOVS     R0,#+99
   \   0000130A   0xE009             B.N      ??GetLMR_149
   \                     ??GetLMR_63:
   \   0000130C   0x........         DC32     mid_line_count_last
   \   00001310   0x........         DC32     ThresholdData
   \                     ??GetLMR_150: (+1)
   \   00001314   0x2159             MOVS     R1,#+89
   \   00001316   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   0000131A   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   0000131E   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_149: (+1)
   \   00001320   0x2839             CMP      R0,#+57
   \   00001322   0xDAF7             BGE.N    ??GetLMR_150
   \   00001324   0x2001             MOVS     R0,#+1
   \   00001326   0x9003             STR      R0,[SP, #+12]
   \   00001328   0x2001             MOVS     R0,#+1
   \   0000132A   0x9006             STR      R0,[SP, #+24]
   \   0000132C   0x2001             MOVS     R0,#+1
   \   0000132E   0x9005             STR      R0,[SP, #+20]
   \                     ??GetLMR_148: (+1)
   \   00001330   0x2E63             CMP      R6,#+99
   \   00001332   0xF040 0x8222      BNE.W    ??GetLMR_53
   \   00001336   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000133A   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000133E   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00001342   0x6008             STR      R0,[R1, #+0]
   \   00001344   0xF05F 0x30FF      MOVS     R0,#-1
   \   00001348   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000134C   0x6008             STR      R0,[R1, #+0]
   \   0000134E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00001352   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001356   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000135A   0x6008             STR      R0,[R1, #+0]
   \   0000135C   0xE20D             B.N      ??GetLMR_53
   \                     ??GetLMR_143: (+1)
   \   0000135E   0x2800             CMP      R0,#+0
   \   00001360   0xD03E             BEQ.N    ??GetLMR_151
   \   00001362   0x2900             CMP      R1,#+0
   \   00001364   0xD03C             BEQ.N    ??GetLMR_151
   \   00001366   0x.... 0x....      LDR.W    R0,??DataTable13
   \   0000136A   0x6800             LDR      R0,[R0, #+0]
   \   0000136C   0x1C40             ADDS     R0,R0,#+1
   \   0000136E   0x.... 0x....      LDR.W    R1,??DataTable13
   \   00001372   0x6008             STR      R0,[R1, #+0]
   \   00001374   0x2003             MOVS     R0,#+3
   \   00001376   0x.... 0x....      LDR.W    R1,??DataTable10
   \   0000137A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   0000137E   0x.... 0x....      LDR.W    R0,??DataTable9_2
   \   00001382   0x5C30             LDRB     R0,[R6, R0]
   \   00001384   0x2802             CMP      R0,#+2
   \   00001386   0xD107             BNE.N    ??GetLMR_152
   \   00001388   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000138C   0x6800             LDR      R0,[R0, #+0]
   \   0000138E   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00001392   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00001396   0xE1F0             B.N      ??GetLMR_53
   \                     ??GetLMR_152: (+1)
   \   00001398   0xF44F 0x7095      MOV      R0,#+298
   \   0000139C   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000013A0   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000013A4   0x2E63             CMP      R6,#+99
   \   000013A6   0xD110             BNE.N    ??GetLMR_153
   \   000013A8   0xF05F 0x30FF      MOVS     R0,#-1
   \   000013AC   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000013B0   0x6008             STR      R0,[R1, #+0]
   \   000013B2   0xF05F 0x30FF      MOVS     R0,#-1
   \   000013B6   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   000013BA   0x6008             STR      R0,[R1, #+0]
   \   000013BC   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000013C0   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000013C4   0x.... 0x....      LDR.W    R1,??DataTable12
   \   000013C8   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_153: (+1)
   \   000013CA   0x9806             LDR      R0,[SP, #+24]
   \   000013CC   0x2800             CMP      R0,#+0
   \   000013CE   0xF000 0x81D4      BEQ.W    ??GetLMR_53
   \   000013D2   0x9805             LDR      R0,[SP, #+20]
   \   000013D4   0x2800             CMP      R0,#+0
   \   000013D6   0xF000 0x81D0      BEQ.W    ??GetLMR_53
   \   000013DA   0x2001             MOVS     R0,#+1
   \   000013DC   0x9003             STR      R0,[SP, #+12]
   \   000013DE   0xE1CC             B.N      ??GetLMR_53
   \                     ??GetLMR_151: (+1)
   \   000013E0   0x.... 0x....      LDR.W    R0,??DataTable9_11
   \   000013E4   0x6800             LDR      R0,[R0, #+0]
   \   000013E6   0x1C40             ADDS     R0,R0,#+1
   \   000013E8   0x.... 0x....      LDR.W    R1,??DataTable9_11
   \   000013EC   0x6008             STR      R0,[R1, #+0]
   \   000013EE   0x2005             MOVS     R0,#+5
   \   000013F0   0x.... 0x....      LDR.W    R1,??DataTable10
   \   000013F4   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000013F8   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   000013FC   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001400   0x2802             CMP      R0,#+2
   \   00001402   0xDB11             BLT.N    ??GetLMR_154
   \   00001404   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001408   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000140C   0x2858             CMP      R0,#+88
   \   0000140E   0xDA0B             BGE.N    ??GetLMR_154
   \   00001410   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00001414   0x6800             LDR      R0,[R0, #+0]
   \   00001416   0x1C40             ADDS     R0,R0,#+1
   \   00001418   0x.... 0x....      LDR.W    R1,??DataTable14
   \   0000141C   0x6008             STR      R0,[R1, #+0]
   \   0000141E   0x2004             MOVS     R0,#+4
   \   00001420   0x.... 0x....      LDR.W    R1,??DataTable10
   \   00001424   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_154: (+1)
   \   00001428   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000142C   0x6800             LDR      R0,[R0, #+0]
   \   0000142E   0x9902             LDR      R1,[SP, #+8]
   \   00001430   0x1EC9             SUBS     R1,R1,#+3
   \   00001432   0x1B89             SUBS     R1,R1,R6
   \   00001434   0x4288             CMP      R0,R1
   \   00001436   0xF2C0 0x80B9      BLT.W    ??GetLMR_155
   \   0000143A   0x980E             LDR      R0,[SP, #+56]
   \   0000143C   0x2800             CMP      R0,#+0
   \   0000143E   0xF000 0x80B5      BEQ.W    ??GetLMR_155
   \   00001442   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00001446   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000144A   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   0000144E   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00001452   0x6849             LDR      R1,[R1, #+4]
   \   00001454   0x1A40             SUBS     R0,R0,R1
   \   00001456   0x.... 0x....      BL       `fabss`
   \   0000145A   0x2805             CMP      R0,#+5
   \   0000145C   0xDA15             BGE.N    ??GetLMR_156
   \   0000145E   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001462   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00001466   0x6840             LDR      R0,[R0, #+4]
   \   00001468   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000146C   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00001470   0x1A40             SUBS     R0,R0,R1
   \   00001472   0x2805             CMP      R0,#+5
   \   00001474   0xDB09             BLT.N    ??GetLMR_156
   \   00001476   0x.... 0x....      LDR.W    R0,??DataTable10
   \   0000147A   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000147E   0x6840             LDR      R0,[R0, #+4]
   \   00001480   0x2804             CMP      R0,#+4
   \   00001482   0xD102             BNE.N    ??GetLMR_156
   \   00001484   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00001488   0x6006             STR      R6,[R0, #+0]
   \                     ??GetLMR_156: (+1)
   \   0000148A   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   0000148E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001492   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00001496   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   0000149A   0x6849             LDR      R1,[R1, #+4]
   \   0000149C   0x1A40             SUBS     R0,R0,R1
   \   0000149E   0x.... 0x....      BL       `fabss`
   \   000014A2   0x2805             CMP      R0,#+5
   \   000014A4   0xDA16             BGE.N    ??GetLMR_157
   \   000014A6   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   000014AA   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000014AE   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   000014B2   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   000014B6   0x6849             LDR      R1,[R1, #+4]
   \   000014B8   0x1A40             SUBS     R0,R0,R1
   \   000014BA   0x2805             CMP      R0,#+5
   \   000014BC   0xDB0A             BLT.N    ??GetLMR_157
   \   000014BE   0x.... 0x....      LDR.W    R0,??DataTable10
   \   000014C2   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000014C6   0x6840             LDR      R0,[R0, #+4]
   \   000014C8   0x2804             CMP      R0,#+4
   \   000014CA   0xD103             BNE.N    ??GetLMR_157
   \   000014CC   0x4270             RSBS     R0,R6,#+0
   \   000014CE   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   000014D2   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_157: (+1)
   \   000014D4   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000014D8   0x6800             LDR      R0,[R0, #+0]
   \   000014DA   0x2800             CMP      R0,#+0
   \   000014DC   0xD532             BPL.N    ??GetLMR_158
   \   000014DE   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   000014E2   0x6800             LDR      R0,[R0, #+0]
   \   000014E4   0xF05F 0x31FF      MOVS     R1,#-1
   \   000014E8   0x4348             MULS     R0,R1,R0
   \   000014EA   0x1B80             SUBS     R0,R0,R6
   \   000014EC   0x2806             CMP      R0,#+6
   \   000014EE   0xDB29             BLT.N    ??GetLMR_158
   \   000014F0   0x.... 0x....      LDR.W    R0,??DataTable10
   \   000014F4   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000014F8   0x6840             LDR      R0,[R0, #+4]
   \   000014FA   0x2804             CMP      R0,#+4
   \   000014FC   0xD122             BNE.N    ??GetLMR_158
   \   000014FE   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001502   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001506   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   0000150A   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   0000150E   0x6849             LDR      R1,[R1, #+4]
   \   00001510   0x1A40             SUBS     R0,R0,R1
   \   00001512   0x.... 0x....      BL       `fabss`
   \   00001516   0x2805             CMP      R0,#+5
   \   00001518   0xDA14             BGE.N    ??GetLMR_158
   \   0000151A   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000151E   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00001522   0x6840             LDR      R0,[R0, #+4]
   \   00001524   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00001528   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   0000152C   0x1A40             SUBS     R0,R0,R1
   \   0000152E   0x2805             CMP      R0,#+5
   \   00001530   0xDB08             BLT.N    ??GetLMR_158
   \   00001532   0x2000             MOVS     R0,#+0
   \   00001534   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   00001538   0x6008             STR      R0,[R1, #+0]
   \   0000153A   0xF07F 0x0005      MVNS     R0,#+5
   \   0000153E   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   00001542   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_158: (+1)
   \   00001544   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00001548   0x6800             LDR      R0,[R0, #+0]
   \   0000154A   0x2801             CMP      R0,#+1
   \   0000154C   0xDB2E             BLT.N    ??GetLMR_155
   \   0000154E   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   00001552   0x6800             LDR      R0,[R0, #+0]
   \   00001554   0x1B80             SUBS     R0,R0,R6
   \   00001556   0x2806             CMP      R0,#+6
   \   00001558   0xDB28             BLT.N    ??GetLMR_155
   \   0000155A   0x.... 0x....      LDR.W    R0,??DataTable10
   \   0000155E   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00001562   0x6840             LDR      R0,[R0, #+4]
   \   00001564   0x2804             CMP      R0,#+4
   \   00001566   0xD121             BNE.N    ??GetLMR_155
   \   00001568   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000156C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001570   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00001574   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00001578   0x6849             LDR      R1,[R1, #+4]
   \   0000157A   0x1A40             SUBS     R0,R0,R1
   \   0000157C   0x.... 0x....      BL       `fabss`
   \   00001580   0x2805             CMP      R0,#+5
   \   00001582   0xDA13             BGE.N    ??GetLMR_155
   \   00001584   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001588   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000158C   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00001590   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00001594   0x6849             LDR      R1,[R1, #+4]
   \   00001596   0x1A40             SUBS     R0,R0,R1
   \   00001598   0x2805             CMP      R0,#+5
   \   0000159A   0xDB07             BLT.N    ??GetLMR_155
   \   0000159C   0x2000             MOVS     R0,#+0
   \   0000159E   0x.... 0x....      LDR.W    R1,??DataTable14_1
   \   000015A2   0x6008             STR      R0,[R1, #+0]
   \   000015A4   0x2006             MOVS     R0,#+6
   \   000015A6   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   000015AA   0x6008             STR      R0,[R1, #+0]
   \                     ??GetLMR_155: (+1)
   \   000015AC   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000015B0   0x6800             LDR      R0,[R0, #+0]
   \   000015B2   0x2803             CMP      R0,#+3
   \   000015B4   0xD11B             BNE.N    ??GetLMR_159
   \   000015B6   0x9802             LDR      R0,[SP, #+8]
   \   000015B8   0x1E40             SUBS     R0,R0,#+1
   \   000015BA   0x1B80             SUBS     R0,R0,R6
   \   000015BC   0x2801             CMP      R0,#+1
   \   000015BE   0xDB16             BLT.N    ??GetLMR_159
   \   000015C0   0x9802             LDR      R0,[SP, #+8]
   \   000015C2   0x1E40             SUBS     R0,R0,#+1
   \   000015C4   0xE011             B.N      ??GetLMR_160
   \                     ??GetLMR_161: (+1)
   \   000015C6   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000015CA   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   000015CE   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000015D2   0xEB12 0x0286      ADDS     R2,R2,R6, LSL #+2
   \   000015D6   0x6852             LDR      R2,[R2, #+4]
   \   000015D8   0x1851             ADDS     R1,R2,R1
   \   000015DA   0x2202             MOVS     R2,#+2
   \   000015DC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000015E0   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000015E4   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   000015E8   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_160: (+1)
   \   000015EA   0x4286             CMP      R6,R0
   \   000015EC   0xDBEB             BLT.N    ??GetLMR_161
   \                     ??GetLMR_159: (+1)
   \   000015EE   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   000015F2   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000015F6   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   000015FA   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   000015FE   0x.... 0x....      LDR.W    R2,??DataTable10_3
   \   00001602   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00001606   0x1A89             SUBS     R1,R1,R2
   \   00001608   0x2202             MOVS     R2,#+2
   \   0000160A   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000160E   0x1808             ADDS     R0,R1,R0
   \   00001610   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00001614   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   00001618   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   0000161C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001620   0x2801             CMP      R0,#+1
   \   00001622   0xDA0C             BGE.N    ??GetLMR_162
   \   00001624   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001628   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000162C   0x2859             CMP      R0,#+89
   \   0000162E   0xDB06             BLT.N    ??GetLMR_162
   \   00001630   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   00001634   0x6800             LDR      R0,[R0, #+0]
   \   00001636   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   0000163A   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_162: (+1)
   \   0000163E   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001642   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001646   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   0000164A   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   0000164E   0x1A40             SUBS     R0,R0,R1
   \   00001650   0x.... 0x....      BL       __aeabi_i2d
   \   00001654   0x0002             MOVS     R2,R0
   \   00001656   0x000B             MOVS     R3,R1
   \   00001658   0x0014             MOVS     R4,R2
   \   0000165A   0x001D             MOVS     R5,R3
   \   0000165C   0x9804             LDR      R0,[SP, #+16]
   \   0000165E   0x.... 0x....      BL       __aeabi_i2d
   \   00001662   0x2200             MOVS     R2,#+0
   \   00001664   0x.... 0x....      LDR.W    R3,??DataTable15  ;; 0x40040000
   \   00001668   0x.... 0x....      BL       __aeabi_dmul
   \   0000166C   0x0022             MOVS     R2,R4
   \   0000166E   0x002B             MOVS     R3,R5
   \   00001670   0x.... 0x....      BL       __aeabi_cdcmple
   \   00001674   0xD208             BCS.N    ??GetLMR_163
   \   00001676   0x2E33             CMP      R6,#+51
   \   00001678   0xDB06             BLT.N    ??GetLMR_163
   \   0000167A   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000167E   0x6800             LDR      R0,[R0, #+0]
   \   00001680   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00001684   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \                     ??GetLMR_163: (+1)
   \   00001688   0x9808             LDR      R0,[SP, #+32]
   \   0000168A   0x1B80             SUBS     R0,R0,R6
   \   0000168C   0x2804             CMP      R0,#+4
   \   0000168E   0xDB45             BLT.N    ??GetLMR_164
   \   00001690   0x9808             LDR      R0,[SP, #+32]
   \   00001692   0x2864             CMP      R0,#+100
   \   00001694   0xDA42             BGE.N    ??GetLMR_164
   \   00001696   0x9808             LDR      R0,[SP, #+32]
   \   00001698   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetLMR_165: (+1)
   \   0000169A   0x42B0             CMP      R0,R6
   \   0000169C   0xDA3E             BGE.N    ??GetLMR_166
   \   0000169E   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000016A2   0x9A08             LDR      R2,[SP, #+32]
   \   000016A4   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   000016A8   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000016AC   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   000016B0   0x1A89             SUBS     R1,R1,R2
   \   000016B2   0x2905             CMP      R1,#+5
   \   000016B4   0xDB11             BLT.N    ??GetLMR_167
   \   000016B6   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000016BA   0x9A08             LDR      R2,[SP, #+32]
   \   000016BC   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   000016C0   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000016C4   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   000016C8   0x1851             ADDS     R1,R2,R1
   \   000016CA   0x2202             MOVS     R2,#+2
   \   000016CC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000016D0   0x1E49             SUBS     R1,R1,#+1
   \   000016D2   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000016D6   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \                     ??GetLMR_167: (+1)
   \   000016DA   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000016DE   0x9A08             LDR      R2,[SP, #+32]
   \   000016E0   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   000016E4   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000016E8   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   000016EC   0x1A89             SUBS     R1,R1,R2
   \   000016EE   0xF111 0x0F04      CMN      R1,#+4
   \   000016F2   0xDA11             BGE.N    ??GetLMR_168
   \   000016F4   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000016F8   0x9A08             LDR      R2,[SP, #+32]
   \   000016FA   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   000016FE   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00001702   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00001706   0x1851             ADDS     R1,R2,R1
   \   00001708   0x2202             MOVS     R2,#+2
   \   0000170A   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000170E   0x1C49             ADDS     R1,R1,#+1
   \   00001710   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   00001714   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \                     ??GetLMR_168: (+1)
   \   00001718   0x1C40             ADDS     R0,R0,#+1
   \   0000171A   0xE7BE             B.N      ??GetLMR_165
   \                     ??GetLMR_164: (+1)
   \                     ??GetLMR_166: (+1)
   \   0000171C   0x9608             STR      R6,[SP, #+32]
   \   0000171E   0x2E63             CMP      R6,#+99
   \   00001720   0xD12B             BNE.N    ??GetLMR_53
   \   00001722   0x.... 0x....      LDR.W    R0,??DataTable10_3
   \   00001726   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000172A   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000172E   0x6008             STR      R0,[R1, #+0]
   \   00001730   0x.... 0x....      LDR.W    R0,??DataTable10_1
   \   00001734   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001738   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   0000173C   0x6008             STR      R0,[R1, #+0]
   \   0000173E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00001742   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00001746   0x.... 0x....      LDR.W    R1,??DataTable12
   \   0000174A   0x6008             STR      R0,[R1, #+0]
   \   0000174C   0xE015             B.N      ??GetLMR_53
   1777            else
   1778              
   1779            {
   1780              
   1781             if(RowMax-i<BlackEndMax-5&&midline_fcount_max<4)
   1782             {
   1783             
   1784                LeftEnd=0;
   \                     ??GetLMR_169: (+1)
   \   0000174E   0x2000             MOVS     R0,#+0
   \   00001750   0x9006             STR      R0,[SP, #+24]
   1785                RightEnd=0;
   \   00001752   0x2000             MOVS     R0,#+0
   \   00001754   0x9005             STR      R0,[SP, #+20]
   1786                MidEnd=0;
   \   00001756   0x2000             MOVS     R0,#+0
   \   00001758   0x9003             STR      R0,[SP, #+12]
   1787                RightBlack[i] =  BlackEndColumnMax+30;
   \   0000175A   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000175E   0x6800             LDR      R0,[R0, #+0]
   \   00001760   0x301E             ADDS     R0,R0,#+30
   \   00001762   0x.... 0x....      LDR.W    R1,??DataTable10_1
   \   00001766   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   1788                LeftBlack[i] =  BlackEndColumnMax-30;
   \   0000176A   0x.... 0x....      LDR.W    R0,??DataTable13_1
   \   0000176E   0x6800             LDR      R0,[R0, #+0]
   \   00001770   0x381E             SUBS     R0,R0,#+30
   \   00001772   0x.... 0x....      LDR.W    R1,??DataTable10_3
   \   00001776   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   1789                goto lable;
   1790             }
   \                     ??GetLMR_53: (+1)
   \   0000177A   0x9803             LDR      R0,[SP, #+12]
   \   0000177C   0x2800             CMP      R0,#+0
   \   0000177E   0xF43E 0xAD52      BEQ.W    ??GetLMR_12
   \   00001782   0xF1D6 0x0064      RSBS     R0,R6,#+100
   \   00001786   0x.... 0x....      LDR.W    R1,??DataTable11
   \   0000178A   0x6809             LDR      R1,[R1, #+0]
   \   0000178C   0x1F49             SUBS     R1,R1,#+5
   \   0000178E   0x4288             CMP      R0,R1
   \   00001790   0xDA04             BGE.N    ??GetLMR_170
   \   00001792   0x.... 0x....      LDR.W    R0,??DataTable20
   \   00001796   0x6800             LDR      R0,[R0, #+0]
   \   00001798   0x2804             CMP      R0,#+4
   \   0000179A   0xDBD8             BLT.N    ??GetLMR_169
   1791              //    if(zhijiao>0&&zhijiao<90 &&StableNumbers-(RowMax-zhijiao)<10)
   1792              //      
   1793              //    {
   1794              //      StableNumbers=(RowMax-zhijiao);
   1795              //    }
   1796              //    
   1797              return;
   \                     ??GetLMR_170: (+1)
   \   0000179C   0xE7FF             B.N      ??GetLMR_171
   1798            }
   1799            
   1800            label_end:
   1801              
   1802            }
   1803            
   1804            
   1805          }
   \                     ??GetLMR_13: (+1)
   \                     ??GetLMR_171: (+1)
   \   0000179E   0xB011             ADD      SP,SP,#+68
   \   000017A0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1806          
   1807          
   1808          

   \                                 In section .bss, align 4
   1809          float EPerCount=0.0;
   \                     EPerCount:
   \   00000000                      DS8 4
   1810          //从偏差线提取偏差

   \                                 In section .text, align 2, keep-with-next
   1811          void GetEPerCount()
   1812          {
   \                     GetEPerCount: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   1813            unsigned char i=0,j=0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   1814            //中心点跳变计数
   1815            unsigned char TripPointCount = 0;
   \   00000006   0x2500             MOVS     R5,#+0
   1816            // 连续中心线点数小于该数字则过滤掉
   1817            unsigned char FilterNumber = 8;
   \   00000008   0x2608             MOVS     R6,#+8
   1818            // 跳变长度设定
   1819            unsigned char TripLen = 3;
   \   0000000A   0x2703             MOVS     R7,#+3
   1820            
   1821            Excursion = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable20_1
   \   00000012   0x6011             STR      R1,[R2, #+0]
   1822            ValidLineCount=0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable16
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   1823            ValidExcursionCount=0;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable16_1
   \   00000022   0x6011             STR      R1,[R2, #+0]
   1824            
   1825            for (i = 0;i < RowMax;i++)
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x000C             MOVS     R4,R1
   \   00000028   0xE005             B.N      ??GetEPerCount_0
   1826            {
   1827              TripPointPos[i] = 0;	
   \                     ??GetEPerCount_1: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable17
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x5460             STRB     R0,[R4, R1]
   1828            }
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetEPerCount_0: (+1)
   \   00000036   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000038   0x2C64             CMP      R4,#+100
   \   0000003A   0xDBF6             BLT.N    ??GetEPerCount_1
   1829            //根据跳变分段
   1830            for (i = 0;i < RowMax;i++)
   \   0000003C   0x2400             MOVS     R4,#+0
   \   0000003E   0xE022             B.N      ??GetEPerCount_2
   1831            {
   1832              // 单边缘情况直接取边缘
   1833              /*if (fabss(RightBlack[i] - LeftBlack[i]) < 5 )
   1834              {
   1835              BlackLineData[i] = LeftBlack[i];
   1836            }
   1837          		else
   1838              {
   1839              //正常两边黑线提取中心线
   1840              BlackLineData[i] = LeftBlack[i] + (RightBlack[i] - LeftBlack[i])/2;
   1841            }*/
   1842              // 相邻中心点做差，找出中心线跳变处,进行分段处理
   1843              if (i > 0)
   \                     ??GetEPerCount_3: (+1)
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x2C00             CMP      R4,#+0
   \   00000044   0xD01E             BEQ.N    ??GetEPerCount_4
   1844              {
   1845                SubValue[i] = BlackLineData[i] - BlackLineData[i-1];
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000005A   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   0000005E   0x1A40             SUBS     R0,R0,R1
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable17_1
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x5460             STRB     R0,[R4, R1]
   1846                //跳变判断
   1847                if (fabss(SubValue[i]) > TripLen)
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x5620             LDRSB    R0,[R4, R0]
   \   00000070   0x.... 0x....      BL       `fabss`
   \   00000074   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000076   0x4287             CMP      R7,R0
   \   00000078   0xDA04             BGE.N    ??GetEPerCount_4
   1848                {
   1849                  //记录跳变位置（行标）
   1850                  TripPointPos[TripPointCount] = i;
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable17
   \   0000007E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   0x542C             STRB     R4,[R5, R0]
   1851                  TripPointCount++;	
   \   00000082   0x1C6D             ADDS     R5,R5,#+1
   1852                }
   1853              }	
   1854            }//for结束 
   \                     ??GetEPerCount_4: (+1)
   \   00000084   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetEPerCount_2: (+1)
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0x2C64             CMP      R4,#+100
   \   0000008A   0xDBD9             BLT.N    ??GetEPerCount_3
   1855            if (TripPointCount == 0)
   \   0000008C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008E   0x2D00             CMP      R5,#+0
   \   00000090   0xD12D             BNE.N    ??GetEPerCount_5
   1856            {
   1857              for (i = 0;i < RowMax;i++)
   \   00000092   0x2400             MOVS     R4,#+0
   \                     ??GetEPerCount_6: (+1)
   \   00000094   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000096   0x2C64             CMP      R4,#+100
   \   00000098   0xF280 0x80C0      BGE.W    ??GetEPerCount_7
   1858              {
   1859                ValidLineCount++;
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable16
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable16
   \   000000A8   0x6008             STR      R0,[R1, #+0]
   1860                if(i > 30 && i < RowMax)
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0xF1B4 0x001F      SUBS     R0,R4,#+31
   \   000000B0   0x2845             CMP      R0,#+69
   \   000000B2   0xD21A             BCS.N    ??GetEPerCount_8
   1861                {
   1862                  ValidExcursionCount++;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x1C40             ADDS     R0,R0,#+1
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000000C0   0x6008             STR      R0,[R1, #+0]
   1863                  Excursion += (BlackLineData[i-1]-BlackLineData[i]);
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000CC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CE   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000000D2   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   000000D6   0x1808             ADDS     R0,R1,R0
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   000000DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DE   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000E2   0x1A40             SUBS     R0,R0,R1
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable20_1
   \   000000E8   0x6008             STR      R0,[R1, #+0]
   1864                }
   1865              }
   \                     ??GetEPerCount_8: (+1)
   \   000000EA   0x1C64             ADDS     R4,R4,#+1
   \   000000EC   0xE7D2             B.N      ??GetEPerCount_6
   1866            }
   1867            else 
   1868            {	
   1869              if (TripPointPos[0] > FilterNumber)
   \                     ??GetEPerCount_5: (+1)
   \   000000EE   0x0030             MOVS     R0,R6
   \   000000F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000000F6   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   000000FA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000FC   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000FE   0x4288             CMP      R0,R1
   \   00000100   0xDA31             BGE.N    ??GetEPerCount_9
   1870              {
   1871                for (i = 0;i < TripPointPos[0];i++)
   \   00000102   0x2400             MOVS     R4,#+0
   \   00000104   0xE025             B.N      ??GetEPerCount_10
   1872                {
   1873                  ValidLineCount++;
   \                     ??GetEPerCount_11: (+1)
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable16
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x1C40             ADDS     R0,R0,#+1
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000112   0x6008             STR      R0,[R1, #+0]
   1874                  if(i > 30)
   \   00000114   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000116   0x2C1F             CMP      R4,#+31
   \   00000118   0xDB1A             BLT.N    ??GetEPerCount_12
   1875                  {
   1876                    ValidExcursionCount++;
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0x1C40             ADDS     R0,R0,#+1
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000126   0x6008             STR      R0,[R1, #+0]
   1877                    Excursion += (BlackLineData[i-1]-BlackLineData[i]);
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   0000012C   0x6800             LDR      R0,[R0, #+0]
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000132   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000134   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000138   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   0000013C   0x1808             ADDS     R0,R1,R0
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable10_2
   \   00000142   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000144   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000148   0x1A40             SUBS     R0,R0,R1
   \   0000014A   0x.... 0x....      LDR.W    R1,??DataTable20_1
   \   0000014E   0x6008             STR      R0,[R1, #+0]
   1878                  }
   1879                }
   \                     ??GetEPerCount_12: (+1)
   \   00000150   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetEPerCount_10: (+1)
   \   00000152   0x0020             MOVS     R0,R4
   \   00000154   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable17
   \   0000015A   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   0000015E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000160   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000162   0x4288             CMP      R0,R1
   \   00000164   0xDBCF             BLT.N    ??GetEPerCount_11
   1880              }
   1881              
   1882              TripPointPos[TripPointCount] = RowMax;
   \                     ??GetEPerCount_9: (+1)
   \   00000166   0x2064             MOVS     R0,#+100
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable17
   \   0000016C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000016E   0x5468             STRB     R0,[R5, R1]
   1883              for (j = 0;j < TripPointCount;j++)
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0xE03C             B.N      ??GetEPerCount_13
   1884              {
   1885                if (TripPointPos[j+1] - TripPointPos[j] > FilterNumber)
   1886                {
   1887                  for (i = TripPointPos[j];i < TripPointPos[j+1];i++)
   1888                  {
   1889                    ValidLineCount++;
   \                     ??GetEPerCount_14: (+1)
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable16
   \   00000178   0x6809             LDR      R1,[R1, #+0]
   \   0000017A   0x1C49             ADDS     R1,R1,#+1
   \   0000017C   0x.... 0x....      LDR.W    R2,??DataTable16
   \   00000180   0x6011             STR      R1,[R2, #+0]
   1890                    if(i > TripPointPos[j] && i > 30)
   \   00000182   0x.... 0x....      LDR.W    R1,??DataTable17
   \   00000186   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000188   0x5641             LDRSB    R1,[R0, R1]
   \   0000018A   0x0022             MOVS     R2,R4
   \   0000018C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000018E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000190   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000192   0x4291             CMP      R1,R2
   \   00000194   0xDA1D             BGE.N    ??GetEPerCount_15
   \   00000196   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000198   0x2C1F             CMP      R4,#+31
   \   0000019A   0xDB1A             BLT.N    ??GetEPerCount_15
   1891                    {
   1892                      ValidExcursionCount++;
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   000001A0   0x6809             LDR      R1,[R1, #+0]
   \   000001A2   0x1C49             ADDS     R1,R1,#+1
   \   000001A4   0x.... 0x....      LDR.W    R2,??DataTable16_1
   \   000001A8   0x6011             STR      R1,[R2, #+0]
   1893                      Excursion += (BlackLineData[i-1]-BlackLineData[i]);
   \   000001AA   0x.... 0x....      LDR.W    R1,??DataTable20_1
   \   000001AE   0x6809             LDR      R1,[R1, #+0]
   \   000001B0   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000001B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B6   0xEB12 0x0284      ADDS     R2,R2,R4, LSL #+2
   \   000001BA   0xF852 0x2C04      LDR      R2,[R2, #-4]
   \   000001BE   0x1851             ADDS     R1,R2,R1
   \   000001C0   0x.... 0x....      LDR.W    R2,??DataTable10_2
   \   000001C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001C6   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   000001CA   0x1A89             SUBS     R1,R1,R2
   \   000001CC   0x.... 0x....      LDR.W    R2,??DataTable20_1
   \   000001D0   0x6011             STR      R1,[R2, #+0]
   1894                    }
   1895                  }
   \                     ??GetEPerCount_15: (+1)
   \   000001D2   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetEPerCount_16: (+1)
   \   000001D4   0x0021             MOVS     R1,R4
   \   000001D6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001D8   0x.... 0x....      LDR.W    R2,??DataTable17
   \   000001DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DE   0x1882             ADDS     R2,R0,R2
   \   000001E0   0xF992 0x2001      LDRSB    R2,[R2, #+1]
   \   000001E4   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000001E6   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000001E8   0x4291             CMP      R1,R2
   \   000001EA   0xDBC3             BLT.N    ??GetEPerCount_14
   \                     ??GetEPerCount_17: (+1)
   \   000001EC   0x1C40             ADDS     R0,R0,#+1
   \                     ??GetEPerCount_13: (+1)
   \   000001EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001F2   0x42A8             CMP      R0,R5
   \   000001F4   0xD212             BCS.N    ??GetEPerCount_7
   \   000001F6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001F8   0x.... 0x....      LDR.W    R1,??DataTable17
   \   000001FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FE   0x1841             ADDS     R1,R0,R1
   \   00000200   0xF991 0x1001      LDRSB    R1,[R1, #+1]
   \   00000204   0x.... 0x....      LDR.W    R2,??DataTable17
   \   00000208   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000020A   0x5682             LDRSB    R2,[R0, R2]
   \   0000020C   0x1A89             SUBS     R1,R1,R2
   \   0000020E   0x428E             CMP      R6,R1
   \   00000210   0xDAEC             BGE.N    ??GetEPerCount_17
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable17
   \   00000216   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000218   0x5C44             LDRB     R4,[R0, R1]
   \   0000021A   0xE7DB             B.N      ??GetEPerCount_16
   1896                }
   1897              }
   1898            }
   1899            if(ValidExcursionCount > 1)
   \                     ??GetEPerCount_7: (+1)
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \   00000220   0x6800             LDR      R0,[R0, #+0]
   \   00000222   0x2802             CMP      R0,#+2
   \   00000224   0xDB0F             BLT.N    ??GetEPerCount_18
   1900            {
   1901              EPerCount = fabss(Excursion)/ValidExcursionCount;
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   0000022A   0x6800             LDR      R0,[R0, #+0]
   \   0000022C   0x.... 0x....      BL       `fabss`
   \   00000230   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \   00000234   0x6809             LDR      R1,[R1, #+0]
   \   00000236   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000023A   0x.... 0x....      BL       __aeabi_i2f
   \   0000023E   0x.... 0x....      LDR.W    R1,??DataTable20_2
   \   00000242   0x6008             STR      R0,[R1, #+0]
   \   00000244   0xE008             B.N      ??GetEPerCount_19
   1902            }
   1903            else
   1904            {
   1905              EPerCount = 3;
   \                     ??GetEPerCount_18: (+1)
   \   00000246   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40400000
   \   0000024A   0x.... 0x....      LDR.W    R1,??DataTable20_2
   \   0000024E   0x6008             STR      R0,[R1, #+0]
   1906              Excursion = 50;
   \   00000250   0x2032             MOVS     R0,#+50
   \   00000252   0x.... 0x....      LDR.W    R1,??DataTable20_1
   \   00000256   0x6008             STR      R0,[R1, #+0]
   1907            }
   1908          }
   \                     ??GetEPerCount_19: (+1)
   \   00000258   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   1909          void getmidline()
   1910          {
   \                     getmidline: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   1911            int i=0,j=0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   1912            unsigned char bFoundLeft = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   1913            unsigned char bFoundRight = 0;
   \   0000000A   0x2500             MOVS     R5,#+0
   1914            unsigned char TripLen = 5;
   \   0000000C   0x2205             MOVS     R2,#+5
   \   0000000E   0xF88D 0x2000      STRB     R2,[SP, #+0]
   1915            
   1916            unsigned int LeftStart=0;
   \   00000012   0x2600             MOVS     R6,#+0
   1917            unsigned int LeftEnd = 0;
   \   00000014   0x2700             MOVS     R7,#+0
   1918            unsigned int RightStart=0;
   \   00000016   0xF05F 0x0800      MOVS     R8,#+0
   1919            unsigned int RightEnd = 0;
   \   0000001A   0xF05F 0x0900      MOVS     R9,#+0
   1920            
   1921            unsigned char MidEnd = 0;
   \   0000001E   0xF05F 0x0A00      MOVS     R10,#+0
   1922            
   1923            unsigned char MidToBlackCount = 0;
   \   00000022   0xF05F 0x0B00      MOVS     R11,#+0
   1924            
   1925            //int NoValidCount = 0;
   1926            NoValidMax=0;
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x.... 0x....      LDR.W    R3,??DataTable20_4
   \   0000002C   0x601A             STR      R2,[R3, #+0]
   1927            
   1928            StableNumbers=0;
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0x.... 0x....      LDR.W    R3,??DataTable20_5
   \   00000034   0x601A             STR      R2,[R3, #+0]
   1929            LeftStableNumbers = 0;
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x.... 0x....      LDR.W    R3,??DataTable20_6
   \   0000003C   0x601A             STR      R2,[R3, #+0]
   1930            RightStableNumbers = 0;
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0x.... 0x....      LDR.W    R3,??DataTable20_7
   \   00000044   0x601A             STR      R2,[R3, #+0]
   1931            
   1932            ValidLineCount1=0;
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable20_8
   \   0000004C   0x601A             STR      R2,[R3, #+0]
   1933            ValidLineCount2=0;
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x.... 0x....      LDR.W    R3,??DataTable20_9
   \   00000054   0x601A             STR      R2,[R3, #+0]
   1934            
   1935            for (i = RowMax-1;i >= 0 && !MidEnd;i--)
   \   00000056   0x2263             MOVS     R2,#+99
   \   00000058   0x0014             MOVS     R4,R2
   \   0000005A   0xE00E             B.N      ??getmidline_0
   1936            {
   1937              if (i>RowMax-5)
   1938              {
   1939                LeftStart=ColumnMax/2;
   1940                LeftEnd=2;
   1941                RightStart=ColumnMax/2;
   1942                RightEnd=ColumnMax-2;	
   1943              }
   1944              bFoundLeft=bFoundRight=0;
   1945              
   1946              for (j=LeftStart;j>LeftEnd;j--)
   1947              {
   1948                if (ThresholdData[i][j]==White&&ThresholdData[i][j-1]==Black)
   1949                {
   1950                  LeftBlack[i]=j-1;
   1951                  if (LeftBlack[i]>1)
   1952                  {
   1953                    
   1954                    bFoundLeft=1;
   1955                    LeftStart=LeftBlack[i]+10;
   1956                    if (LeftBlack[i]<12)
   1957                    {
   1958                      LeftEnd=2;
   1959                    }
   1960                    else
   1961                    {
   1962                      LeftEnd=LeftBlack[i]-10;
   1963                    }
   1964                    break;
   1965                  }
   1966                }
   1967              }
   1968              
   1969              for (j=RightStart;j<RightEnd;j++)
   1970              {
   1971                if (ThresholdData[i][j]==White&&ThresholdData[i][j+1]==Black)
   1972                {
   1973                  RightBlack[i]=j+1;
   1974                  
   1975                  if (RightBlack[i]<ColumnMax-2)
   1976                  {     
   1977                    bFoundRight=1;
   1978                    RightStart=RightBlack[i]-10;
   1979                    if (RightBlack[i]+10>ColumnMax)
   1980                    {
   1981                      RightEnd=ColumnMax-2;
   1982                    }
   1983                    else
   1984                    {
   1985                      RightEnd=RightBlack[i]+10;
   1986                    }
   1987                    break;
   1988                  }
   1989                }
   1990              }
   1991              
   1992              if (!bFoundLeft)
   1993              {
   1994                if (i<RowMax-20)
   1995                {
   1996                  LeftBlack[i]=LeftBlack[i+1]+LeftBlack[i+1]-LeftBlack[i+2];
   1997                }
   1998                else
   1999                {
   2000                  LeftBlack[i]=0;
   2001                }
   2002              }
   2003              else if (i<RowMax-20&&fabss(LeftBlack[i]-LeftBlack[i+1])>TripLen)
   2004              {
   2005                LeftBlack[i]=LeftBlack[i+1]+LeftBlack[i+1]-LeftBlack[i+2];
   2006              }
   2007              if (!bFoundRight)
   2008              {
   2009                if (i<RowMax-20)
   2010                {
   2011                  RightBlack[i]=RightBlack[i+1]+RightBlack[i+1]-RightBlack[i+2];
   2012                }
   2013                else
   2014                {
   2015                  RightBlack[i]=ColumnMax-1;
   2016                }
   2017              }
   2018              else if (i<RowMax-20&&fabss(RightBlack[i]-RightBlack[i+1])>TripLen)
   2019              {
   2020                RightBlack[i]=RightBlack[i+1]+RightBlack[i+1]-RightBlack[i+2];
   2021              }
   2022              
   2023              BlackLineData[i]=LeftBlack[i]+(RightBlack[i]-LeftBlack[i])/2;
   2024              
   2025              
   2026              //		if (i<RowMax-5)
   2027              //		{
   2028              //			if (!bFoundLeft&&bFoundRight)
   2029              //			{
   2030              //				BlackLineData[i]=RightBlack[i]-(RightBlack[i+1]-BlackLineData[i+1]);
   2031              //			}
   2032              //			if (!bFoundRight&&bFoundLeft)
   2033              //			{
   2034              //				BlackLineData[i]=LeftBlack[i]+(BlackLineData[i+1]-LeftBlack[i+1]);
   2035              //			}
   2036              //		}
   2037              
   2038              //中心线搜索截止
   2039              if (BlackLineData[i]<4||BlackLineData[i]>ColumnMax-4)
   2040              {
   2041                MidEnd = 1;//中心线截止
   2042                break;
   2043              }
   2044              if (i < RowMax-20 && fabss(BlackLineData[i]-BlackLineData[i+1]) > TripLen)
   2045              {
   2046                BlackLineData[i] = BlackLineData[i+1] + BlackLineData[i+1] - BlackLineData[i+2];
   2047              }
   2048              if (ThresholdData[i][BlackLineData[i]] == Black)
   2049              {
   2050                MidToBlackCount++;
   2051                if (MidToBlackCount >= 2)
   2052                {
   2053                  MidEnd = 1;
   2054                }
   2055              }
   2056              else
   2057              {
   2058                MidToBlackCount = 0;
   \                     ??getmidline_1: (+1)
   \   0000005C   0xF05F 0x0B00      MOVS     R11,#+0
   2059              }
   2060              if (!MidEnd)
   \                     ??getmidline_2: (+1)
   \   00000060   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000064   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000068   0xD106             BNE.N    ??getmidline_3
   2061              {
   2062                StableNumbers++;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   00000076   0x6008             STR      R0,[R1, #+0]
   2063              }
   \                     ??getmidline_3: (+1)
   \   00000078   0x1E64             SUBS     R4,R4,#+1
   \                     ??getmidline_0: (+1)
   \   0000007A   0x2C00             CMP      R4,#+0
   \   0000007C   0xF100 0x8108      BMI.W    ??getmidline_4
   \   00000080   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000084   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000088   0xF040 0x8102      BNE.W    ??getmidline_4
   \   0000008C   0x2C60             CMP      R4,#+96
   \   0000008E   0xDB05             BLT.N    ??getmidline_5
   \   00000090   0x262D             MOVS     R6,#+45
   \   00000092   0x2702             MOVS     R7,#+2
   \   00000094   0xF05F 0x082D      MOVS     R8,#+45
   \   00000098   0xF05F 0x0958      MOVS     R9,#+88
   \                     ??getmidline_5: (+1)
   \   0000009C   0x2500             MOVS     R5,#+0
   \   0000009E   0x0029             MOVS     R1,R5
   \   000000A0   0x0030             MOVS     R0,R6
   \   000000A2   0xE000             B.N      ??getmidline_6
   \                     ??getmidline_7: (+1)
   \   000000A4   0x1E40             SUBS     R0,R0,#+1
   \                     ??getmidline_6: (+1)
   \   000000A6   0x4287             CMP      R7,R0
   \   000000A8   0xD22C             BCS.N    ??getmidline_8
   \   000000AA   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   000000AE   0x235A             MOVS     R3,#+90
   \   000000B0   0xFB03 0x2204      MLA      R2,R3,R4,R2
   \   000000B4   0x5C82             LDRB     R2,[R0, R2]
   \   000000B6   0x2AC8             CMP      R2,#+200
   \   000000B8   0xD1F4             BNE.N    ??getmidline_7
   \   000000BA   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   000000BE   0x235A             MOVS     R3,#+90
   \   000000C0   0xFB03 0x2204      MLA      R2,R3,R4,R2
   \   000000C4   0x1882             ADDS     R2,R0,R2
   \   000000C6   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   000000CA   0x2A1E             CMP      R2,#+30
   \   000000CC   0xD1EA             BNE.N    ??getmidline_7
   \   000000CE   0x1E42             SUBS     R2,R0,#+1
   \   000000D0   0x....             LDR.N    R3,??DataTable10_3
   \   000000D2   0xF843 0x2024      STR      R2,[R3, R4, LSL #+2]
   \   000000D6   0x....             LDR.N    R2,??DataTable10_3
   \   000000D8   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   000000DC   0x2A02             CMP      R2,#+2
   \   000000DE   0xDBE1             BLT.N    ??getmidline_7
   \   000000E0   0x2101             MOVS     R1,#+1
   \   000000E2   0x....             LDR.N    R0,??DataTable10_3
   \   000000E4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000E8   0xF110 0x060A      ADDS     R6,R0,#+10
   \   000000EC   0x....             LDR.N    R0,??DataTable10_3
   \   000000EE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F2   0x280C             CMP      R0,#+12
   \   000000F4   0xDA01             BGE.N    ??getmidline_9
   \   000000F6   0x2702             MOVS     R7,#+2
   \   000000F8   0xE004             B.N      ??getmidline_10
   \                     ??getmidline_9: (+1)
   \   000000FA   0x....             LDR.N    R0,??DataTable10_3
   \   000000FC   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000100   0xF1B0 0x070A      SUBS     R7,R0,#+10
   \                     ??getmidline_10: (+1)
   \                     ??getmidline_8: (+1)
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0xE000             B.N      ??getmidline_11
   \                     ??getmidline_12: (+1)
   \   00000108   0x1C40             ADDS     R0,R0,#+1
   \                     ??getmidline_11: (+1)
   \   0000010A   0x4548             CMP      R0,R9
   \   0000010C   0xD22D             BCS.N    ??getmidline_13
   \   0000010E   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   00000112   0x235A             MOVS     R3,#+90
   \   00000114   0xFB03 0x2204      MLA      R2,R3,R4,R2
   \   00000118   0x5C82             LDRB     R2,[R0, R2]
   \   0000011A   0x2AC8             CMP      R2,#+200
   \   0000011C   0xD1F4             BNE.N    ??getmidline_12
   \   0000011E   0x.... 0x....      LDR.W    R2,??DataTable20_10
   \   00000122   0x235A             MOVS     R3,#+90
   \   00000124   0xFB03 0x2204      MLA      R2,R3,R4,R2
   \   00000128   0x1882             ADDS     R2,R0,R2
   \   0000012A   0x7852             LDRB     R2,[R2, #+1]
   \   0000012C   0x2A1E             CMP      R2,#+30
   \   0000012E   0xD1EB             BNE.N    ??getmidline_12
   \   00000130   0x1C42             ADDS     R2,R0,#+1
   \   00000132   0x....             LDR.N    R3,??DataTable10_1
   \   00000134   0xF843 0x2024      STR      R2,[R3, R4, LSL #+2]
   \   00000138   0x....             LDR.N    R2,??DataTable10_1
   \   0000013A   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   0000013E   0x2A58             CMP      R2,#+88
   \   00000140   0xDAE2             BGE.N    ??getmidline_12
   \   00000142   0x2501             MOVS     R5,#+1
   \   00000144   0x....             LDR.N    R0,??DataTable10_1
   \   00000146   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000014A   0xF1B0 0x080A      SUBS     R8,R0,#+10
   \   0000014E   0x....             LDR.N    R0,??DataTable10_1
   \   00000150   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000154   0x300A             ADDS     R0,R0,#+10
   \   00000156   0x285B             CMP      R0,#+91
   \   00000158   0xDB02             BLT.N    ??getmidline_14
   \   0000015A   0xF05F 0x0958      MOVS     R9,#+88
   \   0000015E   0xE004             B.N      ??getmidline_15
   \                     ??getmidline_14: (+1)
   \   00000160   0x....             LDR.N    R0,??DataTable10_1
   \   00000162   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000166   0xF110 0x090A      ADDS     R9,R0,#+10
   \                     ??getmidline_15: (+1)
   \                     ??getmidline_13: (+1)
   \   0000016A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000016C   0x2900             CMP      R1,#+0
   \   0000016E   0xD118             BNE.N    ??getmidline_16
   \   00000170   0x2C50             CMP      R4,#+80
   \   00000172   0xDA11             BGE.N    ??getmidline_17
   \   00000174   0x....             LDR.N    R0,??DataTable10_3
   \   00000176   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000017A   0x6840             LDR      R0,[R0, #+4]
   \   0000017C   0x....             LDR.N    R1,??DataTable10_3
   \   0000017E   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000182   0x6849             LDR      R1,[R1, #+4]
   \   00000184   0x1808             ADDS     R0,R1,R0
   \   00000186   0x....             LDR.N    R1,??DataTable10_3
   \   00000188   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000018C   0x6889             LDR      R1,[R1, #+8]
   \   0000018E   0x1A40             SUBS     R0,R0,R1
   \   00000190   0x....             LDR.N    R1,??DataTable10_3
   \   00000192   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000196   0xE025             B.N      ??getmidline_18
   \                     ??getmidline_17: (+1)
   \   00000198   0x2000             MOVS     R0,#+0
   \   0000019A   0x....             LDR.N    R1,??DataTable10_3
   \   0000019C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   000001A0   0xE020             B.N      ??getmidline_18
   \                     ??getmidline_16: (+1)
   \   000001A2   0x2C50             CMP      R4,#+80
   \   000001A4   0xDA1E             BGE.N    ??getmidline_18
   \   000001A6   0x....             LDR.N    R0,??DataTable10_3
   \   000001A8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000001AC   0x....             LDR.N    R1,??DataTable10_3
   \   000001AE   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000001B2   0x6849             LDR      R1,[R1, #+4]
   \   000001B4   0x1A40             SUBS     R0,R0,R1
   \   000001B6   0x.... 0x....      BL       `fabss`
   \   000001BA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001BE   0x4281             CMP      R1,R0
   \   000001C0   0xDA10             BGE.N    ??getmidline_18
   \   000001C2   0x....             LDR.N    R0,??DataTable10_3
   \   000001C4   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000001C8   0x6840             LDR      R0,[R0, #+4]
   \   000001CA   0x....             LDR.N    R1,??DataTable10_3
   \   000001CC   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000001D0   0x6849             LDR      R1,[R1, #+4]
   \   000001D2   0x1808             ADDS     R0,R1,R0
   \   000001D4   0x....             LDR.N    R1,??DataTable10_3
   \   000001D6   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000001DA   0x6889             LDR      R1,[R1, #+8]
   \   000001DC   0x1A40             SUBS     R0,R0,R1
   \   000001DE   0x....             LDR.N    R1,??DataTable10_3
   \   000001E0   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \                     ??getmidline_18: (+1)
   \   000001E4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001E6   0x2D00             CMP      R5,#+0
   \   000001E8   0xD118             BNE.N    ??getmidline_19
   \   000001EA   0x2C50             CMP      R4,#+80
   \   000001EC   0xDA11             BGE.N    ??getmidline_20
   \   000001EE   0x....             LDR.N    R0,??DataTable10_1
   \   000001F0   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000001F4   0x6840             LDR      R0,[R0, #+4]
   \   000001F6   0x....             LDR.N    R1,??DataTable10_1
   \   000001F8   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000001FC   0x6849             LDR      R1,[R1, #+4]
   \   000001FE   0x1808             ADDS     R0,R1,R0
   \   00000200   0x....             LDR.N    R1,??DataTable10_1
   \   00000202   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000206   0x6889             LDR      R1,[R1, #+8]
   \   00000208   0x1A40             SUBS     R0,R0,R1
   \   0000020A   0x....             LDR.N    R1,??DataTable10_1
   \   0000020C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000210   0xE025             B.N      ??getmidline_21
   \                     ??getmidline_20: (+1)
   \   00000212   0x2059             MOVS     R0,#+89
   \   00000214   0x....             LDR.N    R1,??DataTable10_1
   \   00000216   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   0000021A   0xE020             B.N      ??getmidline_21
   \                     ??getmidline_19: (+1)
   \   0000021C   0x2C50             CMP      R4,#+80
   \   0000021E   0xDA1E             BGE.N    ??getmidline_21
   \   00000220   0x....             LDR.N    R0,??DataTable10_1
   \   00000222   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000226   0x....             LDR.N    R1,??DataTable10_1
   \   00000228   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000022C   0x6849             LDR      R1,[R1, #+4]
   \   0000022E   0x1A40             SUBS     R0,R0,R1
   \   00000230   0x.... 0x....      BL       `fabss`
   \   00000234   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000238   0x4281             CMP      R1,R0
   \   0000023A   0xDA10             BGE.N    ??getmidline_21
   \   0000023C   0x....             LDR.N    R0,??DataTable10_1
   \   0000023E   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000242   0x6840             LDR      R0,[R0, #+4]
   \   00000244   0x....             LDR.N    R1,??DataTable10_1
   \   00000246   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000024A   0x6849             LDR      R1,[R1, #+4]
   \   0000024C   0x1808             ADDS     R0,R1,R0
   \   0000024E   0x....             LDR.N    R1,??DataTable10_1
   \   00000250   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000254   0x6889             LDR      R1,[R1, #+8]
   \   00000256   0x1A40             SUBS     R0,R0,R1
   \   00000258   0x....             LDR.N    R1,??DataTable10_1
   \   0000025A   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \                     ??getmidline_21: (+1)
   \   0000025E   0x....             LDR.N    R0,??DataTable10_3
   \   00000260   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000264   0x....             LDR.N    R1,??DataTable10_1
   \   00000266   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000026A   0x....             LDR.N    R2,??DataTable10_3
   \   0000026C   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   00000270   0x1A89             SUBS     R1,R1,R2
   \   00000272   0x2202             MOVS     R2,#+2
   \   00000274   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000278   0x1808             ADDS     R0,R1,R0
   \   0000027A   0x....             LDR.N    R1,??DataTable10_2
   \   0000027C   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000280   0x....             LDR.N    R0,??DataTable10_2
   \   00000282   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000286   0x1F00             SUBS     R0,R0,#+4
   \   00000288   0x2853             CMP      R0,#+83
   \   0000028A   0xD303             BCC.N    ??getmidline_22
   \   0000028C   0xF05F 0x0A01      MOVS     R10,#+1
   2064            }
   2065            
   2066          }
   \                     ??getmidline_4: (+1)
   \   00000290   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   \                     ??getmidline_22: (+1)
   \   00000294   0x2C50             CMP      R4,#+80
   \   00000296   0xDA1E             BGE.N    ??getmidline_23
   \   00000298   0x....             LDR.N    R0,??DataTable10_2
   \   0000029A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000029E   0x....             LDR.N    R1,??DataTable10_2
   \   000002A0   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000002A4   0x6849             LDR      R1,[R1, #+4]
   \   000002A6   0x1A40             SUBS     R0,R0,R1
   \   000002A8   0x.... 0x....      BL       `fabss`
   \   000002AC   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000002B0   0x4281             CMP      R1,R0
   \   000002B2   0xDA10             BGE.N    ??getmidline_23
   \   000002B4   0x....             LDR.N    R0,??DataTable10_2
   \   000002B6   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   000002BA   0x6840             LDR      R0,[R0, #+4]
   \   000002BC   0x....             LDR.N    R1,??DataTable10_2
   \   000002BE   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000002C2   0x6849             LDR      R1,[R1, #+4]
   \   000002C4   0x1808             ADDS     R0,R1,R0
   \   000002C6   0x....             LDR.N    R1,??DataTable10_2
   \   000002C8   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000002CC   0x6889             LDR      R1,[R1, #+8]
   \   000002CE   0x1A40             SUBS     R0,R0,R1
   \   000002D0   0x....             LDR.N    R1,??DataTable10_2
   \   000002D2   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \                     ??getmidline_23: (+1)
   \   000002D6   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000002DA   0x215A             MOVS     R1,#+90
   \   000002DC   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000002E0   0x....             LDR.N    R1,??DataTable10_2
   \   000002E2   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000002E6   0x5C08             LDRB     R0,[R1, R0]
   \   000002E8   0x281E             CMP      R0,#+30
   \   000002EA   0xF47F 0xAEB7      BNE.W    ??getmidline_1
   \   000002EE   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000002F2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000002F6   0xF1BB 0x0F02      CMP      R11,#+2
   \   000002FA   0xF6FF 0xAEB1      BLT.W    ??getmidline_2
   \   000002FE   0xF05F 0x0A01      MOVS     R10,#+1
   \   00000302   0xE6AD             B.N      ??getmidline_2
   2067          

   \                                 In section .text, align 2, keep-with-next
   2068          void GetFinalMidLine()
   2069          {
   \                     GetFinalMidLine: (+1)
   \   00000000   0xB410             PUSH     {R4}
   2070            int i = 0,MinStable = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   2071            MinStable = MIN(StableNumbers,LeftStableNumbers);
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable20_5
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable20_6
   \   00000010   0x681B             LDR      R3,[R3, #+0]
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xDA03             BGE.N    ??GetFinalMidLine_0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xE002             B.N      ??GetFinalMidLine_1
   \                     ??GetFinalMidLine_0: (+1)
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   2072            MinStable = MIN(MinStable,RightStableNumbers);
   \                     ??GetFinalMidLine_1: (+1)
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xDB02             BLT.N    ??GetFinalMidLine_2
   \                     ??GetFinalMidLine_3: (+1)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   2073            for (i = RowMax-1;i > RowMax-(MinStable-0) ;i--)
   \                     ??GetFinalMidLine_2: (+1)
   \   00000034   0x2163             MOVS     R1,#+99
   \   00000036   0xE00B             B.N      ??GetFinalMidLine_4
   2074            {
   2075              //ThresholdData[i][BlackLineData[i]]=White;
   2076              BlackLineData[i] = LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2;
   2077              
   2078              if (BlackLineData[i] > ColumnMax-1){BlackLineData[i] = ColumnMax-1;}
   2079              else if (BlackLineData[i] < 0){BlackLineData[i]=0;}
   \                     ??GetFinalMidLine_5: (+1)
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable21
   \   0000003C   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   00000040   0x2A00             CMP      R2,#+0
   \   00000042   0xD504             BPL.N    ??GetFinalMidLine_6
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x.... 0x....      LDR.W    R3,??DataTable21
   \   0000004A   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \                     ??GetFinalMidLine_6: (+1)
   \   0000004E   0x1E49             SUBS     R1,R1,#+1
   \                     ??GetFinalMidLine_4: (+1)
   \   00000050   0xF1D0 0x0264      RSBS     R2,R0,#+100
   \   00000054   0x428A             CMP      R2,R1
   \   00000056   0xDA20             BGE.N    ??GetFinalMidLine_7
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable20_11
   \   0000005C   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   00000060   0x.... 0x....      LDR.W    R3,??DataTable20_12
   \   00000064   0xF853 0x3021      LDR      R3,[R3, R1, LSL #+2]
   \   00000068   0x.... 0x....      LDR.W    R4,??DataTable20_11
   \   0000006C   0xF854 0x4021      LDR      R4,[R4, R1, LSL #+2]
   \   00000070   0x1B1B             SUBS     R3,R3,R4
   \   00000072   0x2402             MOVS     R4,#+2
   \   00000074   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   00000078   0x189A             ADDS     R2,R3,R2
   \   0000007A   0x.... 0x....      LDR.W    R3,??DataTable21
   \   0000007E   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \   00000082   0x.... 0x....      LDR.W    R2,??DataTable21
   \   00000086   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   0000008A   0x2A5A             CMP      R2,#+90
   \   0000008C   0xDBD4             BLT.N    ??GetFinalMidLine_5
   \   0000008E   0x2259             MOVS     R2,#+89
   \   00000090   0x.... 0x....      LDR.W    R3,??DataTable21
   \   00000094   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \   00000098   0xE7D9             B.N      ??GetFinalMidLine_6
   2080              
   2081              //ThresholdData[i][BlackLineData[i]]=128;
   2082            }
   2083            /*if (LeftStableNumbers > MinStable)
   2084            {
   2085            for (i = RowMax-(MinStable-0);i > RowMax - (LeftStableNumbers-0);i--)
   2086            {
   2087            BlackLineData[i] = BlackLineData[i+1] + LeftBlack[i+1] - LeftBlack[i+2];
   2088            if (BlackLineData[i] > ColumnMax-1){BlackLineData[i] = ColumnMax-1;}
   2089          			else if (BlackLineData[i] < 0){BlackLineData[i]=0;}
   2090          }
   2091          }
   2092            if (RightStableNumbers > MinStable)
   2093            {
   2094            for (i = RowMax-(MinStable-0);i > RowMax - (RightStableNumbers-0);i--)
   2095            {
   2096            BlackLineData[i] = BlackLineData[i+1] + RightBlack[i+1] - RightBlack[i+2];
   2097            if (BlackLineData[i] > ColumnMax-1){BlackLineData[i] = ColumnMax-1;}
   2098          			else if (BlackLineData[i] < 0){BlackLineData[i]=0;}
   2099          }
   2100          }*/
   2101            //  if(LeftStableNumbers> MinStable)
   2102          }
   \                     ??GetFinalMidLine_7: (+1)
   \   0000009A   0xBC10             POP      {R4}
   \   0000009C   0x4770             BX       LR               ;; return
   2103          
   2104          
   2105          
   2106          
   2107          //左均值滤波

   \                                 In section .text, align 2, keep-with-next
   2108          void LAverageFilter()
   2109          {
   \                     LAverageFilter: (+1)
   \   00000000   0xB410             PUSH     {R4}
   2110            unsigned char i = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   2111            unsigned char j = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   2112            int sum = 0;
   \   00000006   0x2200             MOVS     R2,#+0
   2113            for (i = RowMax-1;i > RowMax-(LeftStableNumbers-5);i--)
   \   00000008   0x2363             MOVS     R3,#+99
   \   0000000A   0x0018             MOVS     R0,R3
   \   0000000C   0xE014             B.N      ??LAverageFilter_0
   2114            {
   2115              sum = 0;
   2116              for (j = 0;j < 5;j++)
   2117              {
   2118                sum += LeftBlack[i-j];
   \                     ??LAverageFilter_1: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable20_11
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x1A44             SUBS     R4,R0,R1
   \   00000018   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   0000001C   0x189A             ADDS     R2,R3,R2
   2119              }
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \                     ??LAverageFilter_2: (+1)
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x2905             CMP      R1,#+5
   \   00000024   0xDBF3             BLT.N    ??LAverageFilter_1
   2120              LeftBlack[i] = sum/5;
   \   00000026   0x2105             MOVS     R1,#+5
   \   00000028   0xFB92 0xF1F1      SDIV     R1,R2,R1
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable20_11
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \                     ??LAverageFilter_0: (+1)
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0xF1D1 0x0164      RSBS     R1,R1,#+100
   \   00000042   0x1D49             ADDS     R1,R1,#+5
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x4281             CMP      R1,R0
   \   00000048   0xDA02             BGE.N    ??LAverageFilter_3
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xE7E7             B.N      ??LAverageFilter_2
   2121            }
   2122            P1_X = LeftBlack[RowMax-(LeftStableNumbers-6)];
   \                     ??LAverageFilter_3: (+1)
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable20_11
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0xF1D1 0x0164      RSBS     R1,R1,#+100
   \   0000005E   0x1D89             ADDS     R1,R1,#+6
   \   00000060   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable21_1
   \   00000068   0x6008             STR      R0,[R1, #+0]
   2123            P1_Y = RowMax-(LeftStableNumbers-6);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   00000074   0x1D80             ADDS     R0,R0,#+6
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable22
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   2124          }
   \   0000007C   0xBC10             POP      {R4}
   \   0000007E   0x4770             BX       LR               ;; return
   2125          
   2126          //右均值滤波

   \                                 In section .text, align 2, keep-with-next
   2127          void RAverageFilter()
   2128          {
   \                     RAverageFilter: (+1)
   \   00000000   0xB410             PUSH     {R4}
   2129            unsigned char i = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   2130            unsigned char j = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   2131            int sum = 0;
   \   00000006   0x2200             MOVS     R2,#+0
   2132            for (i = RowMax-1;i > RowMax-(RightStableNumbers-5);i--)
   \   00000008   0x2363             MOVS     R3,#+99
   \   0000000A   0x0018             MOVS     R0,R3
   \   0000000C   0xE014             B.N      ??RAverageFilter_0
   2133            {
   2134              sum = 0;
   2135              for (j = 0;j < 5;j++)
   2136              {
   2137                sum += RightBlack[i-j];
   \                     ??RAverageFilter_1: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable20_12
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x1A44             SUBS     R4,R0,R1
   \   00000018   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   0000001C   0x189A             ADDS     R2,R3,R2
   2138              }
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \                     ??RAverageFilter_2: (+1)
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x2905             CMP      R1,#+5
   \   00000024   0xDBF3             BLT.N    ??RAverageFilter_1
   2139              RightBlack[i] = sum/5;
   \   00000026   0x2105             MOVS     R1,#+5
   \   00000028   0xFB92 0xF1F1      SDIV     R1,R2,R1
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable20_12
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \                     ??RAverageFilter_0: (+1)
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0xF1D1 0x0164      RSBS     R1,R1,#+100
   \   00000042   0x1D49             ADDS     R1,R1,#+5
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x4281             CMP      R1,R0
   \   00000048   0xDA02             BGE.N    ??RAverageFilter_3
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xE7E7             B.N      ??RAverageFilter_2
   2140            }
   2141            P2_X = RightBlack[RowMax-(RightStableNumbers-6)];
   \                     ??RAverageFilter_3: (+1)
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable20_12
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable20_7
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0xF1D1 0x0164      RSBS     R1,R1,#+100
   \   0000005E   0x1D89             ADDS     R1,R1,#+6
   \   00000060   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000068   0x6008             STR      R0,[R1, #+0]
   2142            P2_Y = RowMax-(RightStableNumbers-6);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   00000074   0x1D80             ADDS     R0,R0,#+6
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable23
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   2143            
   2144          }
   \   0000007C   0xBC10             POP      {R4}
   \   0000007E   0x4770             BX       LR               ;; return
   2145          
   2146          //中心线均值滤波

   \                                 In section .text, align 2, keep-with-next
   2147          void AverageFilter()
   2148          {
   \                     AverageFilter: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   2149            unsigned char i = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   2150            unsigned char j = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   2151            int sum = 0;
   \   00000006   0x2200             MOVS     R2,#+0
   2152            for (i = RowMax-1;i > RowMax-(StableNumbers);i--)
   \   00000008   0x2363             MOVS     R3,#+99
   \   0000000A   0x0018             MOVS     R0,R3
   \   0000000C   0xE014             B.N      ??AverageFilter_0
   2153            {
   2154              sum = 0;
   2155              for (j = 0;j < 5;j++)
   2156              {
   2157                sum += BlackLineData[i-j];
   \                     ??AverageFilter_1: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable21
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x1A44             SUBS     R4,R0,R1
   \   00000018   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   0000001C   0x189A             ADDS     R2,R3,R2
   2158              }
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \                     ??AverageFilter_2: (+1)
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x2905             CMP      R1,#+5
   \   00000024   0xDBF3             BLT.N    ??AverageFilter_1
   2159              BlackLineData[i] = sum/5;
   \   00000026   0x2105             MOVS     R1,#+5
   \   00000028   0xFB92 0xF1F1      SDIV     R1,R2,R1
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable21
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \                     ??AverageFilter_0: (+1)
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable20_5
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0xF1D1 0x0164      RSBS     R1,R1,#+100
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x4281             CMP      R1,R0
   \   00000046   0xDA02             BGE.N    ??AverageFilter_3
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0xE7E8             B.N      ??AverageFilter_2
   2160            }
   2161            P0_X = BlackLineData[RowMax-1];
   \                     ??AverageFilter_3: (+1)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000052   0xF8D0 0x018C      LDR      R0,[R0, #+396]
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   2162            P0_Y = RowMax-1;
   \   0000005C   0x2063             MOVS     R0,#+99
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable22_2
   \   00000062   0x6008             STR      R0,[R1, #+0]
   2163            
   2164            Mid_K1 = fabss(P0_X-P1_X)*1.0/fabss(P0_Y-P1_Y);
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable21_1
   \   0000006E   0x6809             LDR      R1,[R1, #+0]
   \   00000070   0x1A40             SUBS     R0,R0,R1
   \   00000072   0x.... 0x....      BL       `fabss`
   \   00000076   0x.... 0x....      BL       __aeabi_i2d
   \   0000007A   0x2200             MOVS     R2,#+0
   \   0000007C   0x.... 0x....      LDR.W    R3,??DataTable22_3  ;; 0x3ff00000
   \   00000080   0x.... 0x....      BL       __aeabi_dmul
   \   00000084   0x0004             MOVS     R4,R0
   \   00000086   0x000D             MOVS     R5,R1
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable22
   \   00000092   0x6809             LDR      R1,[R1, #+0]
   \   00000094   0x1A40             SUBS     R0,R0,R1
   \   00000096   0x.... 0x....      BL       `fabss`
   \   0000009A   0x.... 0x....      BL       __aeabi_i2d
   \   0000009E   0x0002             MOVS     R2,R0
   \   000000A0   0x000B             MOVS     R3,R1
   \   000000A2   0x0020             MOVS     R0,R4
   \   000000A4   0x0029             MOVS     R1,R5
   \   000000A6   0x.... 0x....      BL       __aeabi_ddiv
   \   000000AA   0x.... 0x....      BL       __aeabi_d2f
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable22_4
   \   000000B2   0x6008             STR      R0,[R1, #+0]
   2165            Mid_K2 = fabss(P0_X-P2_X)*1.0/fabss(P0_Y-P2_Y);
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   000000BE   0x6809             LDR      R1,[R1, #+0]
   \   000000C0   0x1A40             SUBS     R0,R0,R1
   \   000000C2   0x.... 0x....      BL       `fabss`
   \   000000C6   0x.... 0x....      BL       __aeabi_i2d
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x.... 0x....      LDR.W    R3,??DataTable22_3  ;; 0x3ff00000
   \   000000D0   0x.... 0x....      BL       __aeabi_dmul
   \   000000D4   0x0004             MOVS     R4,R0
   \   000000D6   0x000D             MOVS     R5,R1
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable23
   \   000000E2   0x6809             LDR      R1,[R1, #+0]
   \   000000E4   0x1A40             SUBS     R0,R0,R1
   \   000000E6   0x.... 0x....      BL       `fabss`
   \   000000EA   0x.... 0x....      BL       __aeabi_i2d
   \   000000EE   0x0002             MOVS     R2,R0
   \   000000F0   0x000B             MOVS     R3,R1
   \   000000F2   0x0020             MOVS     R0,R4
   \   000000F4   0x0029             MOVS     R1,R5
   \   000000F6   0x.... 0x....      BL       __aeabi_ddiv
   \   000000FA   0x.... 0x....      BL       __aeabi_d2f
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable24
   \   00000102   0x6008             STR      R0,[R1, #+0]
   2166            
   2167          }
   \   00000104   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2168          
   2169          

   \                                 In section .text, align 2, keep-with-next
   2170          void MidLineCompensate()
   2171          {
   \                     MidLineCompensate: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   2172            int i=0,icount=0,j=0;
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   2173            int CompensateData = 0;
   \   0000000C   0x2200             MOVS     R2,#+0
   2174            
   2175            int sum = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   2176            float avg =0.0;
   \   00000010   0x2000             MOVS     R0,#+0
   2177            int tem = 1;
   \   00000012   0x2701             MOVS     R7,#+1
   2178            
   2179            CompensateCount=0;
   \   00000014   0x2400             MOVS     R4,#+0
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable24_1
   \   0000001A   0x602C             STR      R4,[R5, #+0]
   2180            
   2181            for (i = RowMax-2,icount=0;i > RowMax-(StableNumbers-10);i--,icount++)
   \   0000001C   0x2462             MOVS     R4,#+98
   \   0000001E   0x0026             MOVS     R6,R4
   \   00000020   0x2400             MOVS     R4,#+0
   \   00000022   0x46A0             MOV      R8,R4
   \   00000024   0xE00D             B.N      ??MidLineCompensate_0
   2182            {
   2183              sum += (BlackLineData[i]-BlackLineData[i+1]);
   \                     ??MidLineCompensate_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000002A   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000002E   0x1840             ADDS     R0,R0,R1
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000034   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00000038   0x6849             LDR      R1,[R1, #+4]
   \   0000003A   0x1A41             SUBS     R1,R0,R1
   2184            }
   \   0000003C   0x1E76             SUBS     R6,R6,#+1
   \   0000003E   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??MidLineCompensate_0: (+1)
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   0000004C   0x300A             ADDS     R0,R0,#+10
   \   0000004E   0x42B0             CMP      R0,R6
   \   00000050   0xDBE9             BLT.N    ??MidLineCompensate_1
   2185            avg = sum*1.0 / icount;
   \   00000052   0x0008             MOVS     R0,R1
   \   00000054   0x.... 0x....      BL       __aeabi_i2d
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0x.... 0x....      LDR.W    R3,??DataTable22_3  ;; 0x3ff00000
   \   0000005E   0x.... 0x....      BL       __aeabi_dmul
   \   00000062   0x0004             MOVS     R4,R0
   \   00000064   0x000D             MOVS     R5,R1
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       __aeabi_i2d
   \   0000006C   0x0002             MOVS     R2,R0
   \   0000006E   0x000B             MOVS     R3,R1
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x0029             MOVS     R1,R5
   \   00000074   0x.... 0x....      BL       __aeabi_ddiv
   \   00000078   0x.... 0x....      BL       __aeabi_d2f
   2186            if (avg < 0)
   \   0000007C   0x2100             MOVS     R1,#+0
   \   0000007E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000082   0xD205             BCS.N    ??MidLineCompensate_2
   2187            {
   2188              tem = -1;
   \   00000084   0xF05F 0x37FF      MOVS     R7,#-1
   2189              avg = (-1)*avg;
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable24_2  ;; 0xbf800000
   \   0000008C   0x.... 0x....      BL       __aeabi_fmul
   2190            }
   2191            if (avg > 1.0)
   \                     ??MidLineCompensate_2: (+1)
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable24_3  ;; 0x3f800001
   \   00000094   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000098   0xD801             BHI.N    ??MidLineCompensate_3
   2192            {
   2193              CompensateData = 4;
   \   0000009A   0x2204             MOVS     R2,#+4
   \   0000009C   0xE00E             B.N      ??MidLineCompensate_4
   2194            }else if (avg > 0.55)
   \                     ??MidLineCompensate_3: (+1)
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable24_4  ;; 0x3f0ccccd
   \   000000A2   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000A6   0xD801             BHI.N    ??MidLineCompensate_5
   2195            {
   2196              CompensateData = 3;
   \   000000A8   0x2203             MOVS     R2,#+3
   \   000000AA   0xE007             B.N      ??MidLineCompensate_4
   2197            }
   2198            else if (avg > 0.25)
   \                     ??MidLineCompensate_5: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable24_5  ;; 0x3e800001
   \   000000B0   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000B4   0xD801             BHI.N    ??MidLineCompensate_6
   2199            {
   2200              CompensateData = 2;
   \   000000B6   0x2202             MOVS     R2,#+2
   \   000000B8   0xE000             B.N      ??MidLineCompensate_4
   2201            }else
   2202            {
   2203              CompensateData = 0;
   \                     ??MidLineCompensate_6: (+1)
   \   000000BA   0x2200             MOVS     R2,#+0
   2204            }
   2205            CompensateData = CompensateData*tem;
   \                     ??MidLineCompensate_4: (+1)
   \   000000BC   0x437A             MULS     R2,R7,R2
   2206            
   2207            
   2208            for (i = RowMax - (StableNumbers);i > 0;i--)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable20_5
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0xF1D0 0x0664      RSBS     R6,R0,#+100
   \   000000C8   0xE002             B.N      ??MidLineCompensate_7
   2209            {
   2210              BlackLineData[i] = BlackLineData[i+1] + CompensateData;//BlackLineData[i+1] + BlackLineData[i+1]-BlackLineData[i+2];
   2211              
   2212              CompensateCount++;
   2213              if (ThresholdData[i][BlackLineData[i]] == Black || BlackLineData[i] < 2 || BlackLineData[i] > ColumnMax -2)
   2214              {
   2215                break;
   2216              }
   2217              sum = 0;
   2218              for (j = RowMax-2,icount=0;j > i;j--,icount++)
   2219              {
   2220                sum += (BlackLineData[j]-BlackLineData[j+1]);
   2221              }
   2222              avg = sum*1.0 / icount;
   2223              if (avg < 0)
   2224              {
   2225                tem = -1;
   2226                avg = (-1)*avg;
   2227              }
   2228              if (avg > 1.0)
   2229              {
   2230                CompensateData = 4;
   2231              }else if (avg > 0.55)
   2232              {
   2233                CompensateData = 3;
   2234              }
   2235              else if (avg > 0.25)
   2236              {
   2237                CompensateData = 2;
   2238              }else
   2239              {
   2240                CompensateData = 0;
   \                     ??MidLineCompensate_8: (+1)
   \   000000CA   0x2200             MOVS     R2,#+0
   2241              }
   2242              CompensateData = CompensateData*tem;
   \                     ??MidLineCompensate_9: (+1)
   \   000000CC   0x437A             MULS     R2,R7,R2
   \   000000CE   0x1E76             SUBS     R6,R6,#+1
   \                     ??MidLineCompensate_7: (+1)
   \   000000D0   0x2E01             CMP      R6,#+1
   \   000000D2   0xDB23             BLT.N    ??MidLineCompensate_10
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable21
   \   000000D8   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   000000DC   0x6840             LDR      R0,[R0, #+4]
   \   000000DE   0x1810             ADDS     R0,R2,R0
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000E4   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0x1C40             ADDS     R0,R0,#+1
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable24_1
   \   000000F4   0x6008             STR      R0,[R1, #+0]
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000000FA   0x215A             MOVS     R1,#+90
   \   000000FC   0xFB01 0x0006      MLA      R0,R1,R6,R0
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000104   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00000108   0x5C08             LDRB     R0,[R1, R0]
   \   0000010A   0x281E             CMP      R0,#+30
   \   0000010C   0xD006             BEQ.N    ??MidLineCompensate_11
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000112   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000116   0x1E80             SUBS     R0,R0,#+2
   \   00000118   0x2857             CMP      R0,#+87
   \   0000011A   0xD301             BCC.N    ??MidLineCompensate_12
   2243            }
   2244          }
   \                     ??MidLineCompensate_11: (+1)
   \                     ??MidLineCompensate_10: (+1)
   \   0000011C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??MidLineCompensate_12: (+1)
   \   00000120   0x2100             MOVS     R1,#+0
   \   00000122   0x2362             MOVS     R3,#+98
   \   00000124   0xF05F 0x0800      MOVS     R8,#+0
   \   00000128   0xE00D             B.N      ??MidLineCompensate_13
   \                     ??MidLineCompensate_14: (+1)
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000012E   0xF850 0x0023      LDR      R0,[R0, R3, LSL #+2]
   \   00000132   0x1840             ADDS     R0,R0,R1
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000138   0xEB11 0x0183      ADDS     R1,R1,R3, LSL #+2
   \   0000013C   0x6849             LDR      R1,[R1, #+4]
   \   0000013E   0x1A41             SUBS     R1,R0,R1
   \   00000140   0x1E5B             SUBS     R3,R3,#+1
   \   00000142   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??MidLineCompensate_13: (+1)
   \   00000146   0x429E             CMP      R6,R3
   \   00000148   0xDBEF             BLT.N    ??MidLineCompensate_14
   \   0000014A   0x0008             MOVS     R0,R1
   \   0000014C   0x.... 0x....      BL       __aeabi_i2d
   \   00000150   0x2200             MOVS     R2,#+0
   \   00000152   0x.... 0x....      LDR.W    R3,??DataTable22_3  ;; 0x3ff00000
   \   00000156   0x.... 0x....      BL       __aeabi_dmul
   \   0000015A   0x0004             MOVS     R4,R0
   \   0000015C   0x000D             MOVS     R5,R1
   \   0000015E   0x4640             MOV      R0,R8
   \   00000160   0x.... 0x....      BL       __aeabi_i2d
   \   00000164   0x0002             MOVS     R2,R0
   \   00000166   0x000B             MOVS     R3,R1
   \   00000168   0x0020             MOVS     R0,R4
   \   0000016A   0x0029             MOVS     R1,R5
   \   0000016C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000170   0x.... 0x....      BL       __aeabi_d2f
   \   00000174   0x2100             MOVS     R1,#+0
   \   00000176   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000017A   0xD205             BCS.N    ??MidLineCompensate_15
   \   0000017C   0xF05F 0x37FF      MOVS     R7,#-1
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable24_2  ;; 0xbf800000
   \   00000184   0x.... 0x....      BL       __aeabi_fmul
   \                     ??MidLineCompensate_15: (+1)
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable24_3  ;; 0x3f800001
   \   0000018C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000190   0xD801             BHI.N    ??MidLineCompensate_16
   \   00000192   0x2204             MOVS     R2,#+4
   \   00000194   0xE79A             B.N      ??MidLineCompensate_9
   \                     ??MidLineCompensate_16: (+1)
   \   00000196   0x.... 0x....      LDR.W    R1,??DataTable24_4  ;; 0x3f0ccccd
   \   0000019A   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000019E   0xD801             BHI.N    ??MidLineCompensate_17
   \   000001A0   0x2203             MOVS     R2,#+3
   \   000001A2   0xE793             B.N      ??MidLineCompensate_9
   \                     ??MidLineCompensate_17: (+1)
   \   000001A4   0x.... 0x....      LDR.W    R1,??DataTable24_5  ;; 0x3e800001
   \   000001A8   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001AC   0xD88D             BHI.N    ??MidLineCompensate_8
   \   000001AE   0x2202             MOVS     R2,#+2
   \   000001B0   0xE78C             B.N      ??MidLineCompensate_9
   2245          
   2246          
   2247          
   2248          //获取中心线方差

   \                                 In section .text, align 2, keep-with-next
   2249          void GetMidLineVariance()
   2250          {
   \                     GetMidLineVariance: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   2251            unsigned char i=0;
   \   00000004   0x2500             MOVS     R5,#+0
   2252            unsigned char iCount=0;
   \   00000006   0x2600             MOVS     R6,#+0
   2253            unsigned int  Black_Sum=0;
   \   00000008   0x2000             MOVS     R0,#+0
   2254            float aver=0.0;
   \   0000000A   0x2400             MOVS     R4,#+0
   2255            int end = RowMax - (StableNumbers - 0);
   \   0000000C   0x....             LDR.N    R1,??DataTable20_5
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0xF1D1 0x0764      RSBS     R7,R1,#+100
   2256            
   2257            MidLineExcursion = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable24_6
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   2258            //LPLD_UART_PutCharArr(UART4,"开始发送1",8);
   2259            for(i=RowMax-5,iCount=0; i>end; i--,iCount++)    
   \   0000001C   0x215F             MOVS     R1,#+95
   \   0000001E   0x000D             MOVS     R5,R1
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x000E             MOVS     R6,R1
   \   00000024   0xE01A             B.N      ??GetMidLineVariance_0
   2260            {
   2261              // LPLD_UART_PutChar(UART4,BlackLineData[i]+48);
   2262              //  LPLD_UART_PutCharArr(UART4,"  ",1);
   2263              Black_Sum += BlackLineData[i];
   \                     ??GetMidLineVariance_1: (+1)
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable21
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   00000030   0x1808             ADDS     R0,R1,R0
   2264              MidLineExcursion = MidLineExcursion + BlackLineData[i] - BlackLineData[i+1];
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable24_6
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x.... 0x....      LDR.W    R2,??DataTable21
   \   0000003C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003E   0xF852 0x2025      LDR      R2,[R2, R5, LSL #+2]
   \   00000042   0x1851             ADDS     R1,R2,R1
   \   00000044   0x.... 0x....      LDR.W    R2,??DataTable21
   \   00000048   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004A   0xEB12 0x0285      ADDS     R2,R2,R5, LSL #+2
   \   0000004E   0x6852             LDR      R2,[R2, #+4]
   \   00000050   0x1A89             SUBS     R1,R1,R2
   \   00000052   0x.... 0x....      LDR.W    R2,??DataTable24_6
   \   00000056   0x6011             STR      R1,[R2, #+0]
   2265            }	
   \   00000058   0x1E6D             SUBS     R5,R5,#+1
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \                     ??GetMidLineVariance_0: (+1)
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x42AF             CMP      R7,R5
   \   00000060   0xDBE1             BLT.N    ??GetMidLineVariance_1
   2266            aver = Black_Sum*1.0 / iCount;
   \   00000062   0x.... 0x....      BL       __aeabi_ui2d
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x.... 0x....      LDR.W    R3,??DataTable22_3  ;; 0x3ff00000
   \   0000006C   0x.... 0x....      BL       __aeabi_dmul
   \   00000070   0x0004             MOVS     R4,R0
   \   00000072   0x000D             MOVS     R5,R1
   \   00000074   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000076   0x0030             MOVS     R0,R6
   \   00000078   0x.... 0x....      BL       __aeabi_ui2d
   \   0000007C   0x0002             MOVS     R2,R0
   \   0000007E   0x000B             MOVS     R3,R1
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x0029             MOVS     R1,R5
   \   00000084   0x.... 0x....      BL       __aeabi_ddiv
   \   00000088   0x.... 0x....      BL       __aeabi_d2f
   \   0000008C   0x0004             MOVS     R4,R0
   2267            MidLineVariance = 0.0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable24_7
   \   00000096   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   2268            for (i = RowMax-5;i > end;i--)
   \   0000009A   0x255F             MOVS     R5,#+95
   \   0000009C   0xE026             B.N      ??GetMidLineVariance_2
   2269            {
   2270              MidLineVariance+=(aver-BlackLineData[i])*(aver-BlackLineData[i]);
   \                     ??GetMidLineVariance_3: (+1)
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable21
   \   000000A2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A4   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   000000A8   0x.... 0x....      BL       __aeabi_i2f
   \   000000AC   0x0001             MOVS     R1,R0
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0x.... 0x....      BL       __aeabi_fsub
   \   000000B4   0x4680             MOV      R8,R0
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable21
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   000000C0   0x.... 0x....      BL       __aeabi_i2f
   \   000000C4   0x0001             MOVS     R1,R0
   \   000000C6   0x0020             MOVS     R0,R4
   \   000000C8   0x.... 0x....      BL       __aeabi_fsub
   \   000000CC   0x4641             MOV      R1,R8
   \   000000CE   0x.... 0x....      BL       __aeabi_fmul
   \   000000D2   0x.... 0x....      BL       __aeabi_f2d
   \   000000D6   0x.... 0x....      LDR.W    R12,??DataTable24_7
   \   000000DA   0xE9DC 0x2300      LDRD     R2,R3,[R12, #+0]
   \   000000DE   0x.... 0x....      BL       __aeabi_dadd
   \   000000E2   0x.... 0x....      LDR.W    R2,??DataTable24_7
   \   000000E6   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   2271            }
   \   000000EA   0x1E6D             SUBS     R5,R5,#+1
   \                     ??GetMidLineVariance_2: (+1)
   \   000000EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EE   0x42AF             CMP      R7,R5
   \   000000F0   0xDBD5             BLT.N    ??GetMidLineVariance_3
   2272            MidLineVariance = MidLineVariance/ iCount;
   \   000000F2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F4   0x0030             MOVS     R0,R6
   \   000000F6   0x.... 0x....      BL       __aeabi_ui2d
   \   000000FA   0x0002             MOVS     R2,R0
   \   000000FC   0x000B             MOVS     R3,R1
   \   000000FE   0x.... 0x....      LDR.W    R4,??DataTable24_7
   \   00000102   0xE9D4 0x0100      LDRD     R0,R1,[R4, #+0]
   \   00000106   0x.... 0x....      BL       __aeabi_ddiv
   \   0000010A   0x.... 0x....      LDR.W    R2,??DataTable24_7
   \   0000010E   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   2273          }
   \   00000112   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2274          
   2275          //获取特殊中心线偏差 ，StableNumbers要大于2

   \                                 In section .text, align 2, keep-with-next
   2276          void GetSpecialError()
   2277          {
   \                     GetSpecialError: (+1)
   \   00000000   0xB410             PUSH     {R4}
   2278            unsigned char i=0;
   \   00000002   0x2000             MOVS     R0,#+0
   2279            int end = RowMax - StableNumbers-1;
   \   00000004   0x....             LDR.N    R1,??DataTable20_5
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0xF1D1 0x0163      RSBS     R1,R1,#+99
   2280            
   2281            MidLineExcursion = 0;
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable24_6
   \   00000012   0x601A             STR      R2,[R3, #+0]
   2282            for (i = RowMax-1;i > end ;i--)
   \   00000014   0x2263             MOVS     R2,#+99
   \   00000016   0x0010             MOVS     R0,R2
   \   00000018   0xE016             B.N      ??GetSpecialError_0
   2283            {
   2284              BlackLineData[i] = LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2;		
   \                     ??GetSpecialError_1: (+1)
   \   0000001A   0x....             LDR.N    R2,??DataTable20_11
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000022   0x....             LDR.N    R3,??DataTable20_12
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000002A   0x....             LDR.N    R4,??DataTable20_11
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000032   0x1B1B             SUBS     R3,R3,R4
   \   00000034   0x2402             MOVS     R4,#+2
   \   00000036   0xFB93 0xF3F4      SDIV     R3,R3,R4
   \   0000003A   0x189A             ADDS     R2,R3,R2
   \   0000003C   0x.... 0x....      LDR.W    R3,??DataTable21
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   2285            }
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetSpecialError_0: (+1)
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x4281             CMP      R1,R0
   \   0000004C   0xDBE5             BLT.N    ??GetSpecialError_1
   2286            for(i=RowMax-2; i>end; i--)    
   \   0000004E   0x2062             MOVS     R0,#+98
   \   00000050   0xE013             B.N      ??GetSpecialError_2
   2287            {	
   2288              MidLineExcursion = MidLineExcursion + BlackLineData[i] - BlackLineData[i+1];		
   \                     ??GetSpecialError_3: (+1)
   \   00000052   0x.... 0x....      LDR.W    R2,??DataTable24_6
   \   00000056   0x6812             LDR      R2,[R2, #+0]
   \   00000058   0x.... 0x....      LDR.W    R3,??DataTable21
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000062   0x189A             ADDS     R2,R3,R2
   \   00000064   0x.... 0x....      LDR.W    R3,??DataTable21
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xEB13 0x0380      ADDS     R3,R3,R0, LSL #+2
   \   0000006E   0x685B             LDR      R3,[R3, #+4]
   \   00000070   0x1AD2             SUBS     R2,R2,R3
   \   00000072   0x.... 0x....      LDR.W    R3,??DataTable24_6
   \   00000076   0x601A             STR      R2,[R3, #+0]
   2289            }
   \   00000078   0x1E40             SUBS     R0,R0,#+1
   \                     ??GetSpecialError_2: (+1)
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x4281             CMP      R1,R0
   \   0000007E   0xDBE8             BLT.N    ??GetSpecialError_3
   2290            //特殊情况给中心线方差极大
   2291            MidLineVariance = 300;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable24_8  ;; 0x4072c000
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable24_7
   \   0000008A   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   2292            //特殊情况给中心线偏差极大
   2293            if(MidLineExcursion > 0)
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable24_6
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xDB04             BLT.N    ??GetSpecialError_4
   2294            {
   2295              MidLineExcursion = 40;
   \   00000098   0x2028             MOVS     R0,#+40
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable24_6
   \   0000009E   0x6008             STR      R0,[R1, #+0]
   \   000000A0   0xE009             B.N      ??GetSpecialError_5
   2296            }
   2297            else if(MidLineExcursion < 0)
   \                     ??GetSpecialError_4: (+1)
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable24_6
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD504             BPL.N    ??GetSpecialError_5
   2298            {
   2299              MidLineExcursion = -40;	
   \   000000AC   0xF07F 0x0027      MVNS     R0,#+39
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable24_6
   \   000000B4   0x6008             STR      R0,[R1, #+0]
   2300            }
   2301          }
   \                     ??GetSpecialError_5: (+1)
   \   000000B6   0xBC10             POP      {R4}
   \   000000B8   0x4770             BX       LR               ;; return
   2302          
   2303          

   \                                 In section .text, align 2, keep-with-next
   2304          void GetSectionParam()
   2305          {
   \                     GetSectionParam: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   2306            int TotalPoint = StableNumbers ;
   \   00000004   0x....             LDR.N    R0,??DataTable20_5
   \   00000006   0x6804             LDR      R4,[R0, #+0]
   2307            int icount = 0;
   \   00000008   0x2500             MOVS     R5,#+0
   2308            int i = 0;
   \   0000000A   0x2600             MOVS     R6,#+0
   2309            int BasePoint = BlackLineData[RowMax-1];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable21
   \   00000010   0xF8D0 0x718C      LDR      R7,[R0, #+396]
   2310            SubBasePoint = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable24_9
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   2311            TopE1=0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable24_10
   \   00000022   0x6008             STR      R0,[R1, #+0]
   2312            TopE2=0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable24_11
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   2313            TopLen1=0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable24_12
   \   00000032   0x6008             STR      R0,[R1, #+0]
   2314            TopLen2=0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable24_13
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   2315            
   2316            for (i=RowMax-StableNumbers-1,icount=1;i < RowMax-2;i++,icount++)
   \   0000003C   0x....             LDR.N    R0,??DataTable20_5
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF1D0 0x0063      RSBS     R0,R0,#+99
   \   00000044   0x0006             MOVS     R6,R0
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x0005             MOVS     R5,R0
   \   0000004A   0xE033             B.N      ??GetSectionParam_0
   2317            {
   2318              if (icount < TotalPoint/2)
   2319              {
   2320                TopE1 += (BlackLineData[i]-BlackLineData[i+1]);
   2321                TopLen1++;
   2322              }
   2323              else 
   2324              {
   2325                TopE2 += (BlackLineData[i]-BlackLineData[i+1]);
   \                     ??GetSectionParam_1: (+1)
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable24_11
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000056   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   0000005A   0x1808             ADDS     R0,R1,R0
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000060   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00000064   0x6849             LDR      R1,[R1, #+4]
   \   00000066   0x1A40             SUBS     R0,R0,R1
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable24_11
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   2326                TopLen2++;
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable24_13
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable24_13
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   2327                
   2328              }
   2329              if (fabss(BlackLineData[i]-BasePoint) > fabss(SubBasePoint))
   \                     ??GetSectionParam_2: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable24_9
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x.... 0x....      BL       `fabss`
   \   00000086   0x4680             MOV      R8,R0
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000008C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000090   0x1BC0             SUBS     R0,R0,R7
   \   00000092   0x.... 0x....      BL       `fabss`
   \   00000096   0x4580             CMP      R8,R0
   \   00000098   0xDA0A             BGE.N    ??GetSectionParam_3
   2330              {
   2331                SubBasePoint = BlackLineData[i]-BasePoint;
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable21
   \   0000009E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000A2   0x1BC0             SUBS     R0,R0,R7
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable24_9
   \   000000A8   0x6008             STR      R0,[R1, #+0]
   2332                SubBasePointLen = i;
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable24_14
   \   000000AE   0x6006             STR      R6,[R0, #+0]
   2333                
   2334              }
   \                     ??GetSectionParam_3: (+1)
   \   000000B0   0x1C76             ADDS     R6,R6,#+1
   \   000000B2   0x1C6D             ADDS     R5,R5,#+1
   \                     ??GetSectionParam_0: (+1)
   \   000000B4   0x2E62             CMP      R6,#+98
   \   000000B6   0xDA1D             BGE.N    ??GetSectionParam_4
   \   000000B8   0x2002             MOVS     R0,#+2
   \   000000BA   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   000000BE   0x4285             CMP      R5,R0
   \   000000C0   0xDAC4             BGE.N    ??GetSectionParam_1
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable24_10
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000CC   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   000000D0   0x1808             ADDS     R0,R1,R0
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000D6   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   000000DA   0x6849             LDR      R1,[R1, #+4]
   \   000000DC   0x1A40             SUBS     R0,R0,R1
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable24_10
   \   000000E2   0x6008             STR      R0,[R1, #+0]
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable24_12
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable24_12
   \   000000F0   0x6008             STR      R0,[R1, #+0]
   \   000000F2   0xE7C3             B.N      ??GetSectionParam_2
   2335            }
   2336          }
   \                     ??GetSectionParam_4: (+1)
   \   000000F4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2337          
   2338          
   2339          

   \                                 In section .bss, align 4
   2340          signed char TemMidLineData[RowMax];//提取黑线值数据2
   \                     TemMidLineData:
   \   00000000                      DS8 100
   2341          

   \                                 In section .text, align 2, keep-with-next
   2342          void StoreMidLine()
   2343          {
   2344            int i = 0;
   \                     StoreMidLine: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   2345            for(i = 0;i < RowMax;i++)	
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xE007             B.N      ??StoreMidLine_0
   2346            {
   2347              TemMidLineData[i] = BlackLineData[i];	
   \                     ??StoreMidLine_1: (+1)
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable21
   \   0000000C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable24_15
   \   00000014   0x5481             STRB     R1,[R0, R2]
   2348            }
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \                     ??StoreMidLine_0: (+1)
   \   00000018   0x2864             CMP      R0,#+100
   \   0000001A   0xDBF5             BLT.N    ??StoreMidLine_1
   2349          }
   \   0000001C   0x4770             BX       LR               ;; return
   2350          
   2351          

   \                                 In section .text, align 2, keep-with-next
   2352          void UseTemMidLine()
   2353          {
   2354            int i = 0;
   \                     UseTemMidLine: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   2355            for(i = 0;i < RowMax;i++)	
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xE007             B.N      ??UseTemMidLine_0
   2356            {
   2357              BlackLineData[i] = TemMidLineData[i];	
   \                     ??UseTemMidLine_1: (+1)
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable24_15
   \   0000000C   0x5641             LDRSB    R1,[R0, R1]
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable21
   \   00000012   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   2358            }	
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \                     ??UseTemMidLine_0: (+1)
   \   00000018   0x2864             CMP      R0,#+100
   \   0000001A   0xDBF5             BLT.N    ??UseTemMidLine_1
   2359          }
   \   0000001C   0x4770             BX       LR               ;; return
   2360          

   \                                 In section .text, align 2, keep-with-next
   2361          int fabss(int n)
   2362          {
   2363            if(n < 0)return (-1)*n;
   \                     `fabss`: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD503             BPL.N    ??fabss_0
   \   00000004   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0xE7FF             B.N      ??fabss_1
   2364            else return n;	
   \                     ??fabss_0: (+1)
   \                     ??fabss_1: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
   2365          }
   2366          

   \                                 In section .text, align 2, keep-with-next
   2367          void CheckStartLine()
   2368          {
   \                     CheckStartLine: (+1)
   \   00000000   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   2369            int start=30,end=50,i=0,j=0;
   \   00000004   0x201E             MOVS     R0,#+30
   \   00000006   0x2132             MOVS     R1,#+50
   \   00000008   0x9101             STR      R1,[SP, #+4]
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x2700             MOVS     R7,#+0
   2370            int value = 80;
   \   0000000E   0x2150             MOVS     R1,#+80
   2371            int NewBlock = 0;
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
   2372            int BlockCount = 0;
   \   00000014   0x2600             MOVS     R6,#+0
   2373            int lencount = 0;
   \   00000016   0xF05F 0x0900      MOVS     R9,#+0
   2374            int begin1=0,begin2=0,end1=0,end2=0;
   \   0000001A   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000001E   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0xF05F 0x0A00      MOVS     R10,#+0
   2375            int startlinecount = 0;
   \   00000028   0x2400             MOVS     R4,#+0
   2376            int maybeflag = 0;
   \   0000002A   0x2300             MOVS     R3,#+0
   2377            // 先暗化处理反光，并滤波
   2378            for(i=start;i<end && BlackEndMax >= RowMax-5;i++)
   \   0000002C   0x0005             MOVS     R5,R0
   \   0000002E   0xE02B             B.N      ??CheckStartLine_0
   2379            {
   2380              for(j=0;j<ColumnMax;j++)
   2381              {
   2382                if(ImageData[i][j] > 220)
   \                     ??CheckStartLine_1: (+1)
   \   00000030   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   00000034   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000038   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   0000003C   0x5DBE             LDRB     R6,[R7, R6]
   \   0000003E   0x2EDD             CMP      R6,#+221
   \   00000040   0xDB08             BLT.N    ??CheckStartLine_2
   2383                {
   2384                  ImageData[i][j]=220;
   \   00000042   0x26DC             MOVS     R6,#+220
   \   00000044   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   00000048   0xF05F 0x0E5A      MOVS     LR,#+90
   \   0000004C   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   00000050   0xF807 0x600C      STRB     R6,[R7, R12]
   2385                }
   2386                if(ImageData[i][j] < ThresholdValue)
   \                     ??CheckStartLine_2: (+1)
   \   00000054   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   00000058   0xF05F 0x0C5A      MOVS     R12,#+90
   \   0000005C   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   00000060   0x5DBE             LDRB     R6,[R7, R6]
   \   00000062   0x.... 0x....      LDR.W    R12,??DataTable24_17
   \   00000066   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   0000006A   0x4566             CMP      R6,R12
   \   0000006C   0xDA08             BGE.N    ??CheckStartLine_3
   2387                {
   2388                  ImageData[i][j]=0;
   \   0000006E   0x2600             MOVS     R6,#+0
   \   00000070   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   00000074   0xF05F 0x0E5A      MOVS     LR,#+90
   \   00000078   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   0000007C   0xF807 0x600C      STRB     R6,[R7, R12]
   2389                }
   2390              }
   \                     ??CheckStartLine_3: (+1)
   \   00000080   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CheckStartLine_4: (+1)
   \   00000082   0x2F5A             CMP      R7,#+90
   \   00000084   0xDBD4             BLT.N    ??CheckStartLine_1
   \   00000086   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CheckStartLine_0: (+1)
   \   00000088   0x9E01             LDR      R6,[SP, #+4]
   \   0000008A   0x42B5             CMP      R5,R6
   \   0000008C   0xDA06             BGE.N    ??CheckStartLine_5
   \   0000008E   0x.... 0x....      LDR.W    R6,??DataTable24_18
   \   00000092   0x6836             LDR      R6,[R6, #+0]
   \   00000094   0x2E5F             CMP      R6,#+95
   \   00000096   0xDB01             BLT.N    ??CheckStartLine_5
   \   00000098   0x2700             MOVS     R7,#+0
   \   0000009A   0xE7F2             B.N      ??CheckStartLine_4
   2391            }
   2392            for(i=start;i<end && BlackEndMax >= RowMax-5;i++)
   \                     ??CheckStartLine_5: (+1)
   \   0000009C   0x0005             MOVS     R5,R0
   \   0000009E   0xE000             B.N      ??CheckStartLine_6
   \                     ??CheckStartLine_7: (+1)
   \   000000A0   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CheckStartLine_6: (+1)
   \   000000A2   0x9E01             LDR      R6,[SP, #+4]
   \   000000A4   0x42B5             CMP      R5,R6
   \   000000A6   0xDA75             BGE.N    ??CheckStartLine_8
   \   000000A8   0x.... 0x....      LDR.W    R6,??DataTable24_18
   \   000000AC   0x6836             LDR      R6,[R6, #+0]
   \   000000AE   0x2E5F             CMP      R6,#+95
   \   000000B0   0xDB70             BLT.N    ??CheckStartLine_8
   2393            {
   2394              for(j=0;j<ColumnMax;j++)
   \   000000B2   0x2700             MOVS     R7,#+0
   \   000000B4   0xE035             B.N      ??CheckStartLine_9
   2395              {
   2396                //白黑白
   2397                if(ImageData[i][j]-ImageData[i][j+1] > value && ImageData[i][j+2]-ImageData[i][j+1] > value )	
   2398                {
   2399                  ImageData[i][j+1]=220;
   2400                }
   2401                //黑白黑
   2402                else if(ImageData[i][j+1]-ImageData[i][j] > value && ImageData[i][j+1]-ImageData[i][j+2] > value )
   \                     ??CheckStartLine_10: (+1)
   \   000000B6   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   000000BA   0xF05F 0x0C5A      MOVS     R12,#+90
   \   000000BE   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   000000C2   0x19BE             ADDS     R6,R7,R6
   \   000000C4   0x7876             LDRB     R6,[R6, #+1]
   \   000000C6   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   000000CA   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000000CE   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   000000D2   0xF817 0xC00C      LDRB     R12,[R7, R12]
   \   000000D6   0xEBB6 0x060C      SUBS     R6,R6,R12
   \   000000DA   0x42B1             CMP      R1,R6
   \   000000DC   0xDA20             BGE.N    ??CheckStartLine_11
   \   000000DE   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   000000E2   0xF05F 0x0C5A      MOVS     R12,#+90
   \   000000E6   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   000000EA   0x19BE             ADDS     R6,R7,R6
   \   000000EC   0x7876             LDRB     R6,[R6, #+1]
   \   000000EE   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   000000F2   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000000F6   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   000000FA   0xEB17 0x0C0C      ADDS     R12,R7,R12
   \   000000FE   0xF89C 0xC002      LDRB     R12,[R12, #+2]
   \   00000102   0xEBB6 0x060C      SUBS     R6,R6,R12
   \   00000106   0x42B1             CMP      R1,R6
   \   00000108   0xDA0A             BGE.N    ??CheckStartLine_11
   2403                {
   2404                  ImageData[i][j+1]=0;	
   \   0000010A   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   0000010E   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000112   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   00000116   0x19BE             ADDS     R6,R7,R6
   \   00000118   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000011C   0xF886 0xC001      STRB     R12,[R6, #+1]
   2405                }
   \                     ??CheckStartLine_11: (+1)
   \   00000120   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CheckStartLine_9: (+1)
   \   00000122   0x2F5A             CMP      R7,#+90
   \   00000124   0xDABC             BGE.N    ??CheckStartLine_7
   \   00000126   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   0000012A   0xF05F 0x0C5A      MOVS     R12,#+90
   \   0000012E   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   00000132   0x5DBE             LDRB     R6,[R7, R6]
   \   00000134   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   00000138   0xF05F 0x0E5A      MOVS     LR,#+90
   \   0000013C   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   00000140   0xEB17 0x0C0C      ADDS     R12,R7,R12
   \   00000144   0xF89C 0xC001      LDRB     R12,[R12, #+1]
   \   00000148   0xEBB6 0x060C      SUBS     R6,R6,R12
   \   0000014C   0x42B1             CMP      R1,R6
   \   0000014E   0xDAB2             BGE.N    ??CheckStartLine_10
   \   00000150   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   00000154   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000158   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   0000015C   0x19BE             ADDS     R6,R7,R6
   \   0000015E   0x78B6             LDRB     R6,[R6, #+2]
   \   00000160   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   00000164   0xF05F 0x0E5A      MOVS     LR,#+90
   \   00000168   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   0000016C   0xEB17 0x0C0C      ADDS     R12,R7,R12
   \   00000170   0xF89C 0xC001      LDRB     R12,[R12, #+1]
   \   00000174   0xEBB6 0x060C      SUBS     R6,R6,R12
   \   00000178   0x42B1             CMP      R1,R6
   \   0000017A   0xDA9C             BGE.N    ??CheckStartLine_10
   \   0000017C   0x.... 0x....      LDR.W    R6,??DataTable24_16
   \   00000180   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000184   0xFB0C 0x6605      MLA      R6,R12,R5,R6
   \   00000188   0x19BE             ADDS     R6,R7,R6
   \   0000018A   0xF05F 0x0CDC      MOVS     R12,#+220
   \   0000018E   0xF886 0xC001      STRB     R12,[R6, #+1]
   \   00000192   0xE7C5             B.N      ??CheckStartLine_11
   2406              }
   2407            }
   2408            //求左右边缘
   2409            for(i=start;i<end /*&& BlackEndMax >= RowMax-5*/;i++)
   \                     ??CheckStartLine_8: (+1)
   \   00000194   0x0005             MOVS     R5,R0
   \   00000196   0xE024             B.N      ??CheckStartLine_12
   2410            {
   2411              for(j=1;j < ColumnMax/2;j++)
   \                     ??CheckStartLine_13: (+1)
   \   00000198   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CheckStartLine_14: (+1)
   \   0000019A   0x2F2D             CMP      R7,#+45
   \   0000019C   0xDA20             BGE.N    ??CheckStartLine_15
   2412              {
   2413                if(ImageData[i][j] > ThresholdValue && ImageData[i][j+1] > ThresholdValue)
   \   0000019E   0x.... 0x....      LDR.W    R6,??DataTable24_17
   \   000001A2   0x6836             LDR      R6,[R6, #+0]
   \   000001A4   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   000001A8   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000001AC   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   000001B0   0xF817 0xC00C      LDRB     R12,[R7, R12]
   \   000001B4   0x4566             CMP      R6,R12
   \   000001B6   0xDAEF             BGE.N    ??CheckStartLine_13
   \   000001B8   0x.... 0x....      LDR.W    R6,??DataTable24_17
   \   000001BC   0x6836             LDR      R6,[R6, #+0]
   \   000001BE   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   000001C2   0xF05F 0x0E5A      MOVS     LR,#+90
   \   000001C6   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   000001CA   0xEB17 0x0C0C      ADDS     R12,R7,R12
   \   000001CE   0xF89C 0xC001      LDRB     R12,[R12, #+1]
   \   000001D2   0x4566             CMP      R6,R12
   \   000001D4   0xDAE0             BGE.N    ??CheckStartLine_13
   2414                {
   2415                  LeftBlack[i]=j-1;
   \   000001D6   0x1E7E             SUBS     R6,R7,#+1
   \   000001D8   0x.... 0x....      LDR.W    R7,??DataTable25
   \   000001DC   0xF847 0x6025      STR      R6,[R7, R5, LSL #+2]
   2416                  break;	
   2417                }	
   2418              }	
   \                     ??CheckStartLine_15: (+1)
   \   000001E0   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CheckStartLine_12: (+1)
   \   000001E2   0x9E01             LDR      R6,[SP, #+4]
   \   000001E4   0x42B5             CMP      R5,R6
   \   000001E6   0xDA01             BGE.N    ??CheckStartLine_16
   \   000001E8   0x2701             MOVS     R7,#+1
   \   000001EA   0xE7D6             B.N      ??CheckStartLine_14
   2419            }
   2420            
   2421            for(i=start;i<end/* && BlackEndMax >= RowMax-5*/;i++)
   \                     ??CheckStartLine_16: (+1)
   \   000001EC   0x0005             MOVS     R5,R0
   \   000001EE   0xE024             B.N      ??CheckStartLine_17
   2422            {
   2423              for(j=ColumnMax-2;j > ColumnMax/2;j--)
   \                     ??CheckStartLine_18: (+1)
   \   000001F0   0x1E7F             SUBS     R7,R7,#+1
   \                     ??CheckStartLine_19: (+1)
   \   000001F2   0x2F2E             CMP      R7,#+46
   \   000001F4   0xDB20             BLT.N    ??CheckStartLine_20
   2424              {
   2425                if(ImageData[i][j] > ThresholdValue && ImageData[i][j-1] > ThresholdValue)
   \   000001F6   0x.... 0x....      LDR.W    R6,??DataTable24_17
   \   000001FA   0x6836             LDR      R6,[R6, #+0]
   \   000001FC   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   00000200   0xF05F 0x0E5A      MOVS     LR,#+90
   \   00000204   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   00000208   0xF817 0xC00C      LDRB     R12,[R7, R12]
   \   0000020C   0x4566             CMP      R6,R12
   \   0000020E   0xDAEF             BGE.N    ??CheckStartLine_18
   \   00000210   0x.... 0x....      LDR.W    R6,??DataTable24_17
   \   00000214   0x6836             LDR      R6,[R6, #+0]
   \   00000216   0x.... 0x....      LDR.W    R12,??DataTable24_16
   \   0000021A   0xF05F 0x0E5A      MOVS     LR,#+90
   \   0000021E   0xFB0E 0xCC05      MLA      R12,LR,R5,R12
   \   00000222   0xEB17 0x0C0C      ADDS     R12,R7,R12
   \   00000226   0xF81C 0xCC01      LDRB     R12,[R12, #-1]
   \   0000022A   0x4566             CMP      R6,R12
   \   0000022C   0xDAE0             BGE.N    ??CheckStartLine_18
   2426                {
   2427                  RightBlack[i]=j+1;
   \   0000022E   0x1C7E             ADDS     R6,R7,#+1
   \   00000230   0x.... 0x....      LDR.W    R7,??DataTable25_1
   \   00000234   0xF847 0x6025      STR      R6,[R7, R5, LSL #+2]
   2428                  break;	
   2429                }	
   2430              }	
   \                     ??CheckStartLine_20: (+1)
   \   00000238   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CheckStartLine_17: (+1)
   \   0000023A   0x9E01             LDR      R6,[SP, #+4]
   \   0000023C   0x42B5             CMP      R5,R6
   \   0000023E   0xDA01             BGE.N    ??CheckStartLine_21
   \   00000240   0x2758             MOVS     R7,#+88
   \   00000242   0xE7D6             B.N      ??CheckStartLine_19
   2431            }
   2432            
   2433            for(i=start;i<end /*&& BlackEndMax >= RowMax-5*/;i++)
   \                     ??CheckStartLine_21: (+1)
   \   00000244   0x0005             MOVS     R5,R0
   \   00000246   0xE00D             B.N      ??CheckStartLine_22
   2434            {
   2435              NewBlock=0;//新的黑条未开始
   2436              BlockCount=0;//每行黑条计数初始化为0
   2437              lencount=0;//黑条长度初始化
   2438              begin1=0;//第一条黑条初始化为0
   2439              begin2=0;//第二条黑条初始化为0
   2440              //从左边缘开始往右边缘开始搜索其中间的黑条
   2441              for(j=LeftBlack[i];j<RightBlack[i];j++)
   2442              {
   2443                //从白到黑的跳变
   2444                if(ImageData[i][j]-ImageData[i][j+4] > value && ImageData[i][j]-ImageData[i][j+5] > value)
   2445                {
   2446                  //新的黑条开始标志
   2447                  NewBlock=1;
   2448                  //该黑条长度初始化为0
   2449                  lencount=0;
   2450                  //记录第一块黑条起始位置
   2451                  if(BlockCount == 0)
   2452                  {
   2453                    if(j < 60 && j > 20)
   2454                    {
   2455                      begin1=j;
   2456                    }
   2457                    else
   2458                    {
   2459                      NewBlock=0;
   2460                      lencount=0;	
   2461                    }
   2462                  }
   2463                  else if(BlockCount == 1)
   2464                  {
   2465                    if(j > 60 && j < 100)
   2466                    {
   2467                      begin2=j;
   2468                    }
   2469                    else
   2470                    {
   2471                      NewBlock=0;
   2472                      lencount=0;							
   2473                    }
   2474                  }
   2475                }
   2476                //从黑到白的跳变
   2477                else if(ImageData[i][j+4]-ImageData[i][j] > value && ImageData[i][j+5]-ImageData[i][j] > value)
   2478                {
   2479                  //如果前面有黑条已经开始，并且长度合适，则黑条计数增加
   2480                  if(NewBlock && lencount > 10 && lencount < 50)
   2481                  {
   2482                    BlockCount++;
   2483                    if(BlockCount == 1)
   2484                    {
   2485                      end1 = j;
   2486                    }
   2487                    else if(BlockCount == 2)
   2488                    {
   2489                      end2 = j;
   2490                    }
   2491                  }
   2492                  NewBlock=0;
   2493                  lencount=0;
   2494                }
   2495                //不是跳变
   2496                else
   2497                {
   2498                  //如果新的黑条开始了，计数其长度
   2499                  if(NewBlock)
   2500                  {
   2501                    lencount++;	
   2502                  }
   2503                }
   2504              }
   2505              //从黑条数和黑条间距判断起跑线
   2506              if(BlockCount >= 2 && begin2-begin1 > 20 && begin2-end1 > 5 &&  begin2-end1 < 50)
   \                     ??CheckStartLine_23: (+1)
   \   00000248   0x2E02             CMP      R6,#+2
   \   0000024A   0xDB0A             BLT.N    ??CheckStartLine_24
   \   0000024C   0xEBBE 0x060C      SUBS     R6,LR,R12
   \   00000250   0x2E15             CMP      R6,#+21
   \   00000252   0xDB06             BLT.N    ??CheckStartLine_24
   \   00000254   0xEBBE 0x0602      SUBS     R6,LR,R2
   \   00000258   0x1FB6             SUBS     R6,R6,#+6
   \   0000025A   0x2E2C             CMP      R6,#+44
   \   0000025C   0xD201             BCS.N    ??CheckStartLine_24
   2507              {
   2508                //IsStartLine=1;
   2509                maybeflag=1;
   \   0000025E   0x2301             MOVS     R3,#+1
   2510                startlinecount++;	
   \   00000260   0x1C64             ADDS     R4,R4,#+1
   2511              }
   \                     ??CheckStartLine_24: (+1)
   \   00000262   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CheckStartLine_22: (+1)
   \   00000264   0x9E01             LDR      R6,[SP, #+4]
   \   00000266   0x42B5             CMP      R5,R6
   \   00000268   0xF280 0x80B8      BGE.W    ??CheckStartLine_25
   \   0000026C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000270   0x2600             MOVS     R6,#+0
   \   00000272   0xF05F 0x0900      MOVS     R9,#+0
   \   00000276   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000027A   0xF05F 0x0E00      MOVS     LR,#+0
   \   0000027E   0x.... 0x....      LDR.W    R7,??DataTable25
   \   00000282   0xF857 0x7025      LDR      R7,[R7, R5, LSL #+2]
   \   00000286   0xE005             B.N      ??CheckStartLine_26
   \                     ??CheckStartLine_27: (+1)
   \   00000288   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000028C   0xD001             BEQ.N    ??CheckStartLine_28
   \   0000028E   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??CheckStartLine_28: (+1)
   \   00000292   0x1C7F             ADDS     R7,R7,#+1
   \                     ??CheckStartLine_26: (+1)
   \   00000294   0x.... 0x....      LDR.W    R10,??DataTable25_1
   \   00000298   0xF85A 0xA025      LDR      R10,[R10, R5, LSL #+2]
   \   0000029C   0x4557             CMP      R7,R10
   \   0000029E   0xDAD3             BGE.N    ??CheckStartLine_23
   \   000002A0   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   000002A4   0xF05F 0x0B5A      MOVS     R11,#+90
   \   000002A8   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   000002AC   0xF817 0xA00A      LDRB     R10,[R7, R10]
   \   000002B0   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   000002B4   0x.... 0x....      LDR.W    R11,??DataTable24_16
   \   000002B8   0xF05F 0x0A5A      MOVS     R10,#+90
   \   000002BC   0xFB0A 0xBA05      MLA      R10,R10,R5,R11
   \   000002C0   0xEB17 0x0A0A      ADDS     R10,R7,R10
   \   000002C4   0xF89A 0xA004      LDRB     R10,[R10, #+4]
   \   000002C8   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \   000002CC   0xEBBB 0x0A0A      SUBS     R10,R11,R10
   \   000002D0   0x4551             CMP      R1,R10
   \   000002D2   0xDA39             BGE.N    ??CheckStartLine_29
   \   000002D4   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   000002D8   0xF05F 0x0B5A      MOVS     R11,#+90
   \   000002DC   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   000002E0   0xF817 0xA00A      LDRB     R10,[R7, R10]
   \   000002E4   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   000002E8   0x.... 0x....      LDR.W    R11,??DataTable24_16
   \   000002EC   0xF05F 0x0A5A      MOVS     R10,#+90
   \   000002F0   0xFB0A 0xBA05      MLA      R10,R10,R5,R11
   \   000002F4   0xEB17 0x0A0A      ADDS     R10,R7,R10
   \   000002F8   0xF89A 0xA005      LDRB     R10,[R10, #+5]
   \   000002FC   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \   00000300   0xEBBB 0x0A0A      SUBS     R10,R11,R10
   \   00000304   0x4551             CMP      R1,R10
   \   00000306   0xDA1F             BGE.N    ??CheckStartLine_29
   \   00000308   0xF05F 0x0801      MOVS     R8,#+1
   \   0000030C   0xF05F 0x0900      MOVS     R9,#+0
   \   00000310   0x2E00             CMP      R6,#+0
   \   00000312   0xD10B             BNE.N    ??CheckStartLine_30
   \   00000314   0xF1B7 0x0A15      SUBS     R10,R7,#+21
   \   00000318   0xF1BA 0x0F27      CMP      R10,#+39
   \   0000031C   0xD201             BCS.N    ??CheckStartLine_31
   \   0000031E   0x46BC             MOV      R12,R7
   \   00000320   0xE7B7             B.N      ??CheckStartLine_28
   \                     ??CheckStartLine_31: (+1)
   \   00000322   0xF05F 0x0800      MOVS     R8,#+0
   \   00000326   0xF05F 0x0900      MOVS     R9,#+0
   \   0000032A   0xE7B2             B.N      ??CheckStartLine_28
   \                     ??CheckStartLine_30: (+1)
   \   0000032C   0x2E01             CMP      R6,#+1
   \   0000032E   0xD1B0             BNE.N    ??CheckStartLine_28
   \   00000330   0xF1B7 0x0A3D      SUBS     R10,R7,#+61
   \   00000334   0xF1BA 0x0F27      CMP      R10,#+39
   \   00000338   0xD201             BCS.N    ??CheckStartLine_32
   \   0000033A   0x46BE             MOV      LR,R7
   \   0000033C   0xE7A9             B.N      ??CheckStartLine_28
   \                     ??CheckStartLine_32: (+1)
   \   0000033E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000342   0xF05F 0x0900      MOVS     R9,#+0
   \   00000346   0xE7A4             B.N      ??CheckStartLine_28
   \                     ??CheckStartLine_29: (+1)
   \   00000348   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   0000034C   0xF05F 0x0B5A      MOVS     R11,#+90
   \   00000350   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   00000354   0xEB17 0x0A0A      ADDS     R10,R7,R10
   \   00000358   0xF89A 0xA004      LDRB     R10,[R10, #+4]
   \   0000035C   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000360   0x.... 0x....      LDR.W    R11,??DataTable24_16
   \   00000364   0xF05F 0x0A5A      MOVS     R10,#+90
   \   00000368   0xFB0A 0xBA05      MLA      R10,R10,R5,R11
   \   0000036C   0xF817 0xA00A      LDRB     R10,[R7, R10]
   \   00000370   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \   00000374   0xEBBB 0x0A0A      SUBS     R10,R11,R10
   \   00000378   0x4551             CMP      R1,R10
   \   0000037A   0xDA85             BGE.N    ??CheckStartLine_27
   \   0000037C   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   00000380   0xF05F 0x0B5A      MOVS     R11,#+90
   \   00000384   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   00000388   0xEB17 0x0A0A      ADDS     R10,R7,R10
   \   0000038C   0xF89A 0xA005      LDRB     R10,[R10, #+5]
   \   00000390   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000394   0x.... 0x....      LDR.W    R11,??DataTable24_16
   \   00000398   0xF05F 0x0A5A      MOVS     R10,#+90
   \   0000039C   0xFB0A 0xBA05      MLA      R10,R10,R5,R11
   \   000003A0   0xF817 0xA00A      LDRB     R10,[R7, R10]
   \   000003A4   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \   000003A8   0xEBBB 0x0A0A      SUBS     R10,R11,R10
   \   000003AC   0x4551             CMP      R1,R10
   \   000003AE   0xF6BF 0xAF6B      BGE.W    ??CheckStartLine_27
   \   000003B2   0xF1B8 0x0F00      CMP      R8,#+0
   \   000003B6   0xD00C             BEQ.N    ??CheckStartLine_33
   \   000003B8   0xF1B9 0x080B      SUBS     R8,R9,#+11
   \   000003BC   0xF1B8 0x0F27      CMP      R8,#+39
   \   000003C0   0xD207             BCS.N    ??CheckStartLine_33
   \   000003C2   0x1C76             ADDS     R6,R6,#+1
   \   000003C4   0x2E01             CMP      R6,#+1
   \   000003C6   0xD101             BNE.N    ??CheckStartLine_34
   \   000003C8   0x003A             MOVS     R2,R7
   \   000003CA   0xE002             B.N      ??CheckStartLine_33
   \                     ??CheckStartLine_34: (+1)
   \   000003CC   0x2E02             CMP      R6,#+2
   \   000003CE   0xD100             BNE.N    ??CheckStartLine_33
   \   000003D0   0x46BA             MOV      R10,R7
   \                     ??CheckStartLine_33: (+1)
   \   000003D2   0xF05F 0x0800      MOVS     R8,#+0
   \   000003D6   0xF05F 0x0900      MOVS     R9,#+0
   \   000003DA   0xE75A             B.N      ??CheckStartLine_28
   2512            }
   2513            if(maybeflag /*&& startlinecount < 8*/)
   \                     ??CheckStartLine_25: (+1)
   \   000003DC   0x2B00             CMP      R3,#+0
   \   000003DE   0xD003             BEQ.N    ??CheckStartLine_35
   2514            {
   2515              IsStartLine=1;	
   \   000003E0   0x2301             MOVS     R3,#+1
   \   000003E2   0x.... 0x....      LDR.W    R4,??DataTable27
   \   000003E6   0x7023             STRB     R3,[R4, #+0]
   2516            }
   2517            
   2518            //从右往左搜索时初始化，防止车偏右跑时检测不出来
   2519            startlinecount=0;
   \                     ??CheckStartLine_35: (+1)
   \   000003E8   0x2400             MOVS     R4,#+0
   2520            maybeflag=0;
   \   000003EA   0x2300             MOVS     R3,#+0
   2521            for(i=start;i<end && BlackEndMax >= RowMax-5;i++)
   \   000003EC   0x0005             MOVS     R5,R0
   \   000003EE   0xE00D             B.N      ??CheckStartLine_36
   2522            {
   2523              NewBlock=0;//新的黑条未开始
   2524              BlockCount=0;//每行黑条计数初始化为0
   2525              lencount=0;//黑条长度初始化
   2526              begin1=0;//第一条黑条初始化为0
   2527              begin2=0;//第二条黑条初始化为0
   2528              //从右边缘开始往左边缘搜索其中间的黑条
   2529              for(j=RightBlack[i];j>LeftBlack[i];j--)
   2530              {
   2531                //从白到黑的跳变
   2532                if(ImageData[i][j]-ImageData[i][j-4] > value && ImageData[i][j]-ImageData[i][j-5] > value)
   2533                {
   2534                  //新的黑条开始标志
   2535                  NewBlock=1;
   2536                  //该黑条长度初始化为0
   2537                  lencount=0;
   2538                  //记录第一块黑条起始位置
   2539                  if(BlockCount == 0)
   2540                  {
   2541                    if(j > 60 && j < 100)
   2542                    {
   2543                      begin1 = j;
   2544                    }
   2545                    else
   2546                    {
   2547                      NewBlock = 0;
   2548                      lencount = 0;	
   2549                    }
   2550                  }
   2551                  else if(BlockCount == 1)
   2552                  {
   2553                    if(j < 60 && j > 20)
   2554                    {
   2555                      begin2=j;
   2556                    }
   2557                    else
   2558                    {
   2559                      NewBlock = 0;
   2560                      lencount = 0;							
   2561                    }
   2562                  }
   2563                }
   2564                //从黑到白的跳变
   2565                else if(ImageData[i][j-4]-ImageData[i][j] > value && ImageData[i][j-5]-ImageData[i][j] > value)
   2566                {
   2567                  //如果前面有黑条已经开始，并且长度合适，则黑条计数增加
   2568                  if(NewBlock && lencount > 10 && lencount < 50)
   2569                  {
   2570                    BlockCount++;
   2571                    if(BlockCount == 1)
   2572                    {
   2573                      end1 = j;
   2574                    }
   2575                    else if(BlockCount == 2)
   2576                    {
   2577                      end2 = j;
   2578                    }
   2579                  }
   2580                  NewBlock=0;
   2581                  lencount=0;
   2582                }
   2583                //不是跳变
   2584                else
   2585                {
   2586                  //如果新的黑条开始了，计数其长度
   2587                  if(NewBlock)
   2588                  {
   2589                    lencount++;	
   2590                  }
   2591                }
   2592              }
   2593              //从黑条数和黑条间距判断起跑线
   2594              if(BlockCount >= 2 && begin1-begin2 > 20 && end1-begin2 > 5 && end1 - begin2 < 50)
   \                     ??CheckStartLine_37: (+1)
   \   000003F0   0x2E02             CMP      R6,#+2
   \   000003F2   0xDB0A             BLT.N    ??CheckStartLine_38
   \   000003F4   0xEBBC 0x000E      SUBS     R0,R12,LR
   \   000003F8   0x2815             CMP      R0,#+21
   \   000003FA   0xDB06             BLT.N    ??CheckStartLine_38
   \   000003FC   0xEBB2 0x000E      SUBS     R0,R2,LR
   \   00000400   0x1F80             SUBS     R0,R0,#+6
   \   00000402   0x282C             CMP      R0,#+44
   \   00000404   0xD201             BCS.N    ??CheckStartLine_38
   2595              {
   2596                //IsStartLine=1;
   2597                maybeflag = 1;
   \   00000406   0x2301             MOVS     R3,#+1
   2598                startlinecount++;	
   \   00000408   0x1C64             ADDS     R4,R4,#+1
   2599              }
   \                     ??CheckStartLine_38: (+1)
   \   0000040A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CheckStartLine_36: (+1)
   \   0000040C   0x9801             LDR      R0,[SP, #+4]
   \   0000040E   0x4285             CMP      R5,R0
   \   00000410   0xF280 0x80A1      BGE.W    ??CheckStartLine_39
   \   00000414   0x....             LDR.N    R0,??DataTable24_18
   \   00000416   0x6800             LDR      R0,[R0, #+0]
   \   00000418   0x285F             CMP      R0,#+95
   \   0000041A   0xF2C0 0x809C      BLT.W    ??CheckStartLine_39
   \   0000041E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000422   0x2600             MOVS     R6,#+0
   \   00000424   0xF05F 0x0900      MOVS     R9,#+0
   \   00000428   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000042C   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000430   0x.... 0x....      LDR.W    R0,??DataTable25_1
   \   00000434   0xF850 0x7025      LDR      R7,[R0, R5, LSL #+2]
   \   00000438   0xE005             B.N      ??CheckStartLine_40
   \                     ??CheckStartLine_41: (+1)
   \   0000043A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000043E   0xD001             BEQ.N    ??CheckStartLine_42
   \   00000440   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??CheckStartLine_42: (+1)
   \   00000444   0x1E7F             SUBS     R7,R7,#+1
   \                     ??CheckStartLine_40: (+1)
   \   00000446   0x.... 0x....      LDR.W    R0,??DataTable25
   \   0000044A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000044E   0x42B8             CMP      R0,R7
   \   00000450   0xDACE             BGE.N    ??CheckStartLine_37
   \   00000452   0x....             LDR.N    R0,??DataTable24_16
   \   00000454   0xF05F 0x0A5A      MOVS     R10,#+90
   \   00000458   0xFB0A 0x0005      MLA      R0,R10,R5,R0
   \   0000045C   0x5C38             LDRB     R0,[R7, R0]
   \   0000045E   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   00000462   0xF05F 0x0B5A      MOVS     R11,#+90
   \   00000466   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   0000046A   0xEB17 0x0A0A      ADDS     R10,R7,R10
   \   0000046E   0xF81A 0xAC04      LDRB     R10,[R10, #-4]
   \   00000472   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   00000476   0x4281             CMP      R1,R0
   \   00000478   0xDA31             BGE.N    ??CheckStartLine_43
   \   0000047A   0x....             LDR.N    R0,??DataTable24_16
   \   0000047C   0xF05F 0x0A5A      MOVS     R10,#+90
   \   00000480   0xFB0A 0x0005      MLA      R0,R10,R5,R0
   \   00000484   0x5C38             LDRB     R0,[R7, R0]
   \   00000486   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   0000048A   0xF05F 0x0B5A      MOVS     R11,#+90
   \   0000048E   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   00000492   0xEB17 0x0A0A      ADDS     R10,R7,R10
   \   00000496   0xF81A 0xAC05      LDRB     R10,[R10, #-5]
   \   0000049A   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   0000049E   0x4281             CMP      R1,R0
   \   000004A0   0xDA1D             BGE.N    ??CheckStartLine_43
   \   000004A2   0xF05F 0x0801      MOVS     R8,#+1
   \   000004A6   0xF05F 0x0900      MOVS     R9,#+0
   \   000004AA   0x2E00             CMP      R6,#+0
   \   000004AC   0xD10A             BNE.N    ??CheckStartLine_44
   \   000004AE   0xF1B7 0x003D      SUBS     R0,R7,#+61
   \   000004B2   0x2827             CMP      R0,#+39
   \   000004B4   0xD201             BCS.N    ??CheckStartLine_45
   \   000004B6   0x46BC             MOV      R12,R7
   \   000004B8   0xE7C4             B.N      ??CheckStartLine_42
   \                     ??CheckStartLine_45: (+1)
   \   000004BA   0xF05F 0x0800      MOVS     R8,#+0
   \   000004BE   0xF05F 0x0900      MOVS     R9,#+0
   \   000004C2   0xE7BF             B.N      ??CheckStartLine_42
   \                     ??CheckStartLine_44: (+1)
   \   000004C4   0x2E01             CMP      R6,#+1
   \   000004C6   0xD1BD             BNE.N    ??CheckStartLine_42
   \   000004C8   0xF1B7 0x0015      SUBS     R0,R7,#+21
   \   000004CC   0x2827             CMP      R0,#+39
   \   000004CE   0xD201             BCS.N    ??CheckStartLine_46
   \   000004D0   0x46BE             MOV      LR,R7
   \   000004D2   0xE7B7             B.N      ??CheckStartLine_42
   \                     ??CheckStartLine_46: (+1)
   \   000004D4   0xF05F 0x0800      MOVS     R8,#+0
   \   000004D8   0xF05F 0x0900      MOVS     R9,#+0
   \   000004DC   0xE7B2             B.N      ??CheckStartLine_42
   \                     ??CheckStartLine_43: (+1)
   \   000004DE   0x....             LDR.N    R0,??DataTable24_16
   \   000004E0   0xF05F 0x0A5A      MOVS     R10,#+90
   \   000004E4   0xFB0A 0x0005      MLA      R0,R10,R5,R0
   \   000004E8   0x1838             ADDS     R0,R7,R0
   \   000004EA   0xF810 0x0C04      LDRB     R0,[R0, #-4]
   \   000004EE   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   000004F2   0xF05F 0x0B5A      MOVS     R11,#+90
   \   000004F6   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   000004FA   0xF817 0xA00A      LDRB     R10,[R7, R10]
   \   000004FE   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   00000502   0x4281             CMP      R1,R0
   \   00000504   0xDA99             BGE.N    ??CheckStartLine_41
   \   00000506   0x....             LDR.N    R0,??DataTable24_16
   \   00000508   0xF05F 0x0A5A      MOVS     R10,#+90
   \   0000050C   0xFB0A 0x0005      MLA      R0,R10,R5,R0
   \   00000510   0x1838             ADDS     R0,R7,R0
   \   00000512   0xF810 0x0C05      LDRB     R0,[R0, #-5]
   \   00000516   0x.... 0x....      LDR.W    R10,??DataTable24_16
   \   0000051A   0xF05F 0x0B5A      MOVS     R11,#+90
   \   0000051E   0xFB0B 0xAA05      MLA      R10,R11,R5,R10
   \   00000522   0xF817 0xA00A      LDRB     R10,[R7, R10]
   \   00000526   0xEBB0 0x000A      SUBS     R0,R0,R10
   \   0000052A   0x4281             CMP      R1,R0
   \   0000052C   0xDA85             BGE.N    ??CheckStartLine_41
   \   0000052E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000532   0xD00B             BEQ.N    ??CheckStartLine_47
   \   00000534   0xF1B9 0x000B      SUBS     R0,R9,#+11
   \   00000538   0x2827             CMP      R0,#+39
   \   0000053A   0xD207             BCS.N    ??CheckStartLine_47
   \   0000053C   0x1C76             ADDS     R6,R6,#+1
   \   0000053E   0x2E01             CMP      R6,#+1
   \   00000540   0xD101             BNE.N    ??CheckStartLine_48
   \   00000542   0x003A             MOVS     R2,R7
   \   00000544   0xE002             B.N      ??CheckStartLine_47
   \                     ??CheckStartLine_48: (+1)
   \   00000546   0x2E02             CMP      R6,#+2
   \   00000548   0xD100             BNE.N    ??CheckStartLine_47
   \   0000054A   0x46BA             MOV      R10,R7
   \                     ??CheckStartLine_47: (+1)
   \   0000054C   0xF05F 0x0800      MOVS     R8,#+0
   \   00000550   0xF05F 0x0900      MOVS     R9,#+0
   \   00000554   0xE776             B.N      ??CheckStartLine_42
   2600            }
   2601            if(maybeflag /*&& startlinecount < 8*/)
   \                     ??CheckStartLine_39: (+1)
   \   00000556   0x2B00             CMP      R3,#+0
   \   00000558   0xD003             BEQ.N    ??CheckStartLine_49
   2602            {
   2603              IsStartLine = 1;	
   \   0000055A   0x2001             MOVS     R0,#+1
   \   0000055C   0x.... 0x....      LDR.W    R1,??DataTable27
   \   00000560   0x7008             STRB     R0,[R1, #+0]
   2604            }
   2605          }
   \                     ??CheckStartLine_49: (+1)
   \   00000562   0xE8BD 0x8FF3      POP      {R0,R1,R4-R11,PC}  ;; return

   \                                 In section .bss, align 1
   2606          uint8 ElementCount2 = 0;
   \                     ElementCount2:
   \   00000000                      DS8 1
   2607          //头尾指针

   \                                 In section .bss, align 1
   2608          uint8 Head2 = 0,Rear2 = 0;
   \                     Head2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     Rear2:
   \   00000000                      DS8 1
   2609          #define Size2 30
   2610          //队列数组

   \                                 In section .bss, align 4
   2611          signed char RoadTypeData2[Size2] = {0};
   \                     RoadTypeData2:
   \   00000000                      DS8 32
   2612          
   2613          

   \                                 In section .bss, align 4
   2614          int AllBigSCount = 0;
   \                     AllBigSCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   2615          int AllBendCount = 0;
   \                     AllBendCount:
   \   00000000                      DS8 4
   2616          //=================================================================================
   2617          

   \                                 In section .text, align 2, keep-with-next
   2618          void HistoryRoadTypeCount()
   2619          {
   \                     HistoryRoadTypeCount: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   2620            int i=0;
   \   00000002   0x2000             MOVS     R0,#+0
   2621            int tem = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   2622            int StraightCount = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   2623            int SmallSCount = 0;
   \   00000008   0x2200             MOVS     R2,#+0
   2624            int BigSCount = 0;
   \   0000000A   0x2300             MOVS     R3,#+0
   2625            int BendCount = 0;
   \   0000000C   0x2400             MOVS     R4,#+0
   2626            AllStraightCount = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x.... 0x....      LDR.W    R7,??DataTable27_1
   \   00000014   0x703E             STRB     R6,[R7, #+0]
   2627            AllSmallSCount = 0;
   \   00000016   0x2600             MOVS     R6,#+0
   \   00000018   0x.... 0x....      LDR.W    R7,??DataTable27_2
   \   0000001C   0x703E             STRB     R6,[R7, #+0]
   2628            AllBigSCount = 0;
   \   0000001E   0x2600             MOVS     R6,#+0
   \   00000020   0x.... 0x....      LDR.W    R7,??DataTable27_3
   \   00000024   0x603E             STR      R6,[R7, #+0]
   2629            AllBendCount = 0;
   \   00000026   0x2600             MOVS     R6,#+0
   \   00000028   0x.... 0x....      LDR.W    R7,??DataTable28
   \   0000002C   0x603E             STR      R6,[R7, #+0]
   2630            tem = Rear2;
   \   0000002E   0x.... 0x....      LDR.W    R6,??DataTable27_4
   \   00000032   0x7836             LDRB     R6,[R6, #+0]
   \   00000034   0x0035             MOVS     R5,R6
   2631            for(i = 0;i < ElementCount2;i++)
   \   00000036   0x2600             MOVS     R6,#+0
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0xE007             B.N      ??HistoryRoadTypeCount_0
   2632            {
   2633              if(RoadTypeData2[tem] == 0)
   2634              {
   2635                StraightCount++;
   2636                if(AllStraightCount < StraightCount)
   2637                {
   2638                  AllStraightCount = StraightCount;
   2639                }
   2640              }
   2641              else
   2642              {
   2643                StraightCount = 0;
   2644              }
   2645              
   2646              if(RoadTypeData2[tem] == 0 || RoadTypeData2[tem] == 1)
   2647              {
   2648                SmallSCount++;
   2649                if(AllSmallSCount < SmallSCount)
   2650                {
   2651                  AllSmallSCount = SmallSCount;
   2652                }
   2653              }
   2654              else
   2655              {
   2656                SmallSCount = 0;
   2657              }
   2658              
   2659              if(RoadTypeData2[tem] == 2)
   2660              {
   2661                BigSCount++;
   2662                if(AllBigSCount < BigSCount)
   2663                {
   2664                  AllBigSCount = BigSCount;
   2665                }
   2666              }
   2667              else
   2668              {
   2669                BigSCount=0;
   2670              }
   2671              
   2672              if(RoadTypeData2[tem] == 2 || RoadTypeData2[tem] == 3 )
   2673              {
   2674                BendCount++;
   2675                if(AllBendCount < BendCount)
   2676                {
   2677                  AllBendCount = BendCount;
   2678                }
   2679              }
   2680              else
   2681              {
   2682                BendCount=0;
   \                     ??HistoryRoadTypeCount_1: (+1)
   \   0000003C   0x2400             MOVS     R4,#+0
   2683              }
   2684              
   2685              tem = (tem-1+Size2)%Size2;
   \                     ??HistoryRoadTypeCount_2: (+1)
   \   0000003E   0x351D             ADDS     R5,R5,#+29
   \   00000040   0x261E             MOVS     R6,#+30
   \   00000042   0xFB95 0xF7F6      SDIV     R7,R5,R6
   \   00000046   0xFB06 0x5517      MLS      R5,R6,R7,R5
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \                     ??HistoryRoadTypeCount_0: (+1)
   \   0000004C   0x.... 0x....      LDR.W    R6,??DataTable27_5
   \   00000050   0x7836             LDRB     R6,[R6, #+0]
   \   00000052   0x42B0             CMP      R0,R6
   \   00000054   0xDA48             BGE.N    ??HistoryRoadTypeCount_3
   \   00000056   0x.... 0x....      LDR.W    R6,??DataTable28_1
   \   0000005A   0x57AE             LDRSB    R6,[R5, R6]
   \   0000005C   0x2E00             CMP      R6,#+0
   \   0000005E   0xD109             BNE.N    ??HistoryRoadTypeCount_4
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \   00000062   0x.... 0x....      LDR.W    R6,??DataTable27_1
   \   00000066   0x7836             LDRB     R6,[R6, #+0]
   \   00000068   0x428E             CMP      R6,R1
   \   0000006A   0xDA04             BGE.N    ??HistoryRoadTypeCount_5
   \   0000006C   0x.... 0x....      LDR.W    R6,??DataTable27_1
   \   00000070   0x7031             STRB     R1,[R6, #+0]
   \   00000072   0xE000             B.N      ??HistoryRoadTypeCount_5
   \                     ??HistoryRoadTypeCount_4: (+1)
   \   00000074   0x2100             MOVS     R1,#+0
   \                     ??HistoryRoadTypeCount_5: (+1)
   \   00000076   0x.... 0x....      LDR.W    R6,??DataTable28_1
   \   0000007A   0x57AE             LDRSB    R6,[R5, R6]
   \   0000007C   0x2E00             CMP      R6,#+0
   \   0000007E   0xD004             BEQ.N    ??HistoryRoadTypeCount_6
   \   00000080   0x.... 0x....      LDR.W    R6,??DataTable28_1
   \   00000084   0x57AE             LDRSB    R6,[R5, R6]
   \   00000086   0x2E01             CMP      R6,#+1
   \   00000088   0xD109             BNE.N    ??HistoryRoadTypeCount_7
   \                     ??HistoryRoadTypeCount_6: (+1)
   \   0000008A   0x1C52             ADDS     R2,R2,#+1
   \   0000008C   0x.... 0x....      LDR.W    R6,??DataTable27_2
   \   00000090   0x7836             LDRB     R6,[R6, #+0]
   \   00000092   0x4296             CMP      R6,R2
   \   00000094   0xDA04             BGE.N    ??HistoryRoadTypeCount_8
   \   00000096   0x.... 0x....      LDR.W    R6,??DataTable27_2
   \   0000009A   0x7032             STRB     R2,[R6, #+0]
   \   0000009C   0xE000             B.N      ??HistoryRoadTypeCount_8
   \                     ??HistoryRoadTypeCount_7: (+1)
   \   0000009E   0x2200             MOVS     R2,#+0
   \                     ??HistoryRoadTypeCount_8: (+1)
   \   000000A0   0x.... 0x....      LDR.W    R6,??DataTable28_1
   \   000000A4   0x57AE             LDRSB    R6,[R5, R6]
   \   000000A6   0x2E02             CMP      R6,#+2
   \   000000A8   0xD109             BNE.N    ??HistoryRoadTypeCount_9
   \   000000AA   0x1C5B             ADDS     R3,R3,#+1
   \   000000AC   0x.... 0x....      LDR.W    R6,??DataTable27_3
   \   000000B0   0x6836             LDR      R6,[R6, #+0]
   \   000000B2   0x429E             CMP      R6,R3
   \   000000B4   0xDA04             BGE.N    ??HistoryRoadTypeCount_10
   \   000000B6   0x.... 0x....      LDR.W    R6,??DataTable27_3
   \   000000BA   0x6033             STR      R3,[R6, #+0]
   \   000000BC   0xE000             B.N      ??HistoryRoadTypeCount_10
   \                     ??HistoryRoadTypeCount_9: (+1)
   \   000000BE   0x2300             MOVS     R3,#+0
   \                     ??HistoryRoadTypeCount_10: (+1)
   \   000000C0   0x.... 0x....      LDR.W    R6,??DataTable28_1
   \   000000C4   0x57AE             LDRSB    R6,[R5, R6]
   \   000000C6   0x2E02             CMP      R6,#+2
   \   000000C8   0xD004             BEQ.N    ??HistoryRoadTypeCount_11
   \   000000CA   0x.... 0x....      LDR.W    R6,??DataTable28_1
   \   000000CE   0x57AE             LDRSB    R6,[R5, R6]
   \   000000D0   0x2E03             CMP      R6,#+3
   \   000000D2   0xD1B3             BNE.N    ??HistoryRoadTypeCount_1
   \                     ??HistoryRoadTypeCount_11: (+1)
   \   000000D4   0x1C64             ADDS     R4,R4,#+1
   \   000000D6   0x.... 0x....      LDR.W    R6,??DataTable28
   \   000000DA   0x6836             LDR      R6,[R6, #+0]
   \   000000DC   0x42A6             CMP      R6,R4
   \   000000DE   0xDAAE             BGE.N    ??HistoryRoadTypeCount_2
   \   000000E0   0x.... 0x....      LDR.W    R6,??DataTable28
   \   000000E4   0x6034             STR      R4,[R6, #+0]
   \   000000E6   0xE7AA             B.N      ??HistoryRoadTypeCount_2
   2686            }	
   2687          } 
   \                     ??HistoryRoadTypeCount_3: (+1)
   \   000000E8   0xBCF0             POP      {R4-R7}
   \   000000EA   0x4770             BX       LR               ;; return
   2688          

   \                                 In section .text, align 2, keep-with-next
   2689          void HistoryRTProccess()
   2690          {
   \                     HistoryRTProccess: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2691            
   2692            
   2693            
   2694            
   2695            if(StandardRoadType && (RoadType == 0 || RoadType == 1))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable28_2
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD015             BEQ.N    ??HistoryRTProccess_0
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable28_3
   \   00000010   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD005             BEQ.N    ??HistoryRTProccess_1
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable28_3
   \   0000001C   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD109             BNE.N    ??HistoryRTProccess_0
   2696            {
   2697              //把赛道类型存入循环队列中//标准的直道和小S
   2698              RoadTypeData2[Rear2] = RoadType;	
   \                     ??HistoryRTProccess_1: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable28_3
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable28_1
   \   0000002E   0x.... 0x....      LDR.W    R2,??DataTable27_4
   \   00000032   0x7812             LDRB     R2,[R2, #+0]
   \   00000034   0x5450             STRB     R0,[R2, R1]
   \   00000036   0xE006             B.N      ??HistoryRTProccess_2
   2699            }
   2700            else
   2701            {
   2702              RoadTypeData2[Rear2] = 2;	
   \                     ??HistoryRTProccess_0: (+1)
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable28_1
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable27_4
   \   00000042   0x7812             LDRB     R2,[R2, #+0]
   \   00000044   0x5450             STRB     R0,[R2, R1]
   2703            }
   2704            
   2705            Rear2 = (Rear2+1)%Size2;
   \                     ??HistoryRTProccess_2: (+1)
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable27_4
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x211E             MOVS     R1,#+30
   \   00000050   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000054   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable27_4
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
   2706            ElementCount2++;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable27_5
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable27_5
   \   0000006A   0x7008             STRB     R0,[R1, #+0]
   2707            if(ElementCount2 > Size2-1)
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable27_5
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x281E             CMP      R0,#+30
   \   00000074   0xDB03             BLT.N    ??HistoryRTProccess_3
   2708            {
   2709              ElementCount2=Size2-1;	
   \   00000076   0x201D             MOVS     R0,#+29
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable27_5
   \   0000007C   0x7008             STRB     R0,[R1, #+0]
   2710            }
   2711            
   2712            //历史赛道类型统计
   2713            HistoryRoadTypeCount();
   \                     ??HistoryRTProccess_3: (+1)
   \   0000007E   0x.... 0x....      BL       HistoryRoadTypeCount
   2714            
   2715            //	//通过赛道历史记录判断直入弯
   2716            //	TemCount = 0;
   2717            //	pTem = Rear2;
   2718            //	if((RoadType == 2 || RoadType == 3) )
   2719            //	{
   2720            //		for(i = 0;i < 20;i++)
   2721            //		{
   2722            //			if(RoadTypeData2[pTem] == 0 || RoadTypeData2[pTem] == 1 )
   2723            //			{
   2724            //				TemCount++;
   2725            //				if(TemCount > 15)
   2726            //				{
   2727            //					RoadType = 103;		
   2728            //				}
   2729            //			}
   2730            //			pTem = (pTem-1+Size2)%Size2;	
   2731            //		}		
   2732            //	}	
   2733          }
   \   00000082   0xBD01             POP      {R0,PC}          ;; return
   2734          
   2735          

   \                                 In section .text, align 2, keep-with-next
   2736          unsigned char IsStraightToBend()
   2737          {
   \                     IsStraightToBend: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2738            if (fabss(TopE1) > 12 && fabss(TopE2) < 3 && fabss(SubBasePoint) < 3 )// && BlackEndMax < RowMax - 4
   \   00000002   0x....             LDR.N    R0,??DataTable24_10
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       `fabss`
   \   0000000A   0x280D             CMP      R0,#+13
   \   0000000C   0xDB0D             BLT.N    ??IsStraightToBend_0
   \   0000000E   0x....             LDR.N    R0,??DataTable24_11
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       `fabss`
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xDA07             BGE.N    ??IsStraightToBend_0
   \   0000001A   0x....             LDR.N    R0,??DataTable24_9
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       `fabss`
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xDA01             BGE.N    ??IsStraightToBend_0
   2739            {
   2740              return 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??IsStraightToBend_1
   2741              
   2742            }else
   2743            {
   2744              return 0;
   \                     ??IsStraightToBend_0: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??IsStraightToBend_1: (+1)
   \   0000002C   0xBD02             POP      {R1,PC}          ;; return
   2745            }
   2746          }
   2747          

   \                                 In section .text, align 2, keep-with-next
   2748          void GetCrossingMidLine()
   2749          {
   \                     GetCrossingMidLine: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   2750            unsigned char i = 0,j=0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   2751            //每行头尾遍历行指针
   2752            unsigned char pLeft = ColumnMax/2,pRight = ColumnMax/2;
   \   00000008   0x212D             MOVS     R1,#+45
   \   0000000A   0x222D             MOVS     R2,#+45
   2753            unsigned char bFoundLeft = 0;
   \   0000000C   0x2300             MOVS     R3,#+0
   2754            unsigned char bFoundRight = 0;
   \   0000000E   0x2700             MOVS     R7,#+0
   2755            unsigned char temLeft = 0,temRight = 0,temi=0;
   \   00000010   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
   \   00000018   0xF05F 0x0900      MOVS     R9,#+0
   2756            unsigned char temBasePos = 0;
   \   0000001C   0x2600             MOVS     R6,#+0
   2757            
   2758            unsigned char EndFlag = 0;
   \   0000001E   0x2500             MOVS     R5,#+0
   \   00000020   0xF88D 0x5001      STRB     R5,[SP, #+1]
   2759            unsigned char LCount=0;
   \   00000024   0x2500             MOVS     R5,#+0
   \   00000026   0xF88D 0x5000      STRB     R5,[SP, #+0]
   2760            unsigned char RCount=0;
   \   0000002A   0x2500             MOVS     R5,#+0
   2761            unsigned char bFoundFlag=0;
   \   0000002C   0xF05F 0x0C00      MOVS     R12,#+0
   2762            
   2763            
   2764            CrossingStable=0;
   \   00000030   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000034   0x.... 0x....      LDR.W    R11,??DataTable28_4
   \   00000038   0xF88B 0xA000      STRB     R10,[R11, #+0]
   2765            for (i = 0;i < RowMax;i++)
   \   0000003C   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000040   0x4654             MOV      R4,R10
   \   00000042   0xE00A             B.N      ??GetCrossingMidLine_0
   2766            {
   2767              ValidLineR[i] = 0;
   \                     ??GetCrossingMidLine_1: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable28_5
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x5460             STRB     R0,[R4, R1]
   2768              ValidLineL[i] = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable28_6
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0x5460             STRB     R0,[R4, R1]
   2769            }
   \   00000058   0x1C64             ADDS     R4,R4,#+1
   \                     ??GetCrossingMidLine_0: (+1)
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2C64             CMP      R4,#+100
   \   0000005E   0xDBF1             BLT.N    ??GetCrossingMidLine_1
   2770            
   2771            //判断十字左右倾
   2772            if (BlackEndMax == BlackEndL)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable28_7
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable28_8
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xD104             BNE.N    ??GetCrossingMidLine_2
   2773            {
   2774              g_Derict = 1;//左倾
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable28_9
   \   00000076   0x7008             STRB     R0,[R1, #+0]
   \   00000078   0xE035             B.N      ??GetCrossingMidLine_3
   2775            }
   2776            else if (BlackEndMax == BlackEndR)
   \                     ??GetCrossingMidLine_2: (+1)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable28_7
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable28_10
   \   00000084   0x6809             LDR      R1,[R1, #+0]
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD104             BNE.N    ??GetCrossingMidLine_4
   2777            {
   2778              g_Derict = 2;//右倾
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable28_9
   \   00000090   0x7008             STRB     R0,[R1, #+0]
   \   00000092   0xE028             B.N      ??GetCrossingMidLine_3
   2779            }
   2780            else if (BlackEndMax == BlackEndM)
   \                     ??GetCrossingMidLine_4: (+1)
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable28_7
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable28_11
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD120             BNE.N    ??GetCrossingMidLine_3
   2781            {
   2782              if (fabss(BlackEndL-BlackEndR) < 5)
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable28_8
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable28_10
   \   000000AE   0x6809             LDR      R1,[R1, #+0]
   \   000000B0   0x1A40             SUBS     R0,R0,R1
   \   000000B2   0x.... 0x....      BL       `fabss`
   \   000000B6   0x2805             CMP      R0,#+5
   \   000000B8   0xDA04             BGE.N    ??GetCrossingMidLine_5
   2783              {
   2784                g_Derict = 0;//正十字
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable28_9
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
   \   000000C2   0xE010             B.N      ??GetCrossingMidLine_3
   2785              }
   2786              else if (BlackEndL > BlackEndR)
   \                     ??GetCrossingMidLine_5: (+1)
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable28_10
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable28_8
   \   000000CE   0x6809             LDR      R1,[R1, #+0]
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xDA04             BGE.N    ??GetCrossingMidLine_6
   2787              {
   2788                g_Derict = 1;//左
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable28_9
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
   \   000000DC   0xE003             B.N      ??GetCrossingMidLine_3
   2789              }
   2790              else
   2791              {
   2792                g_Derict = 2;//右
   \                     ??GetCrossingMidLine_6: (+1)
   \   000000DE   0x2002             MOVS     R0,#+2
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable28_9
   \   000000E4   0x7008             STRB     R0,[R1, #+0]
   2793              }
   2794            }
   2795            
   2796            //搜索十字两边线
   2797            for (i = RowMax-1; i > 0;i--)
   \                     ??GetCrossingMidLine_3: (+1)
   \   000000E6   0x2463             MOVS     R4,#+99
   \   000000E8   0xE082             B.N      ??GetCrossingMidLine_7
   2798            {
   2799              if (!EndFlag)
   2800              {
   2801                CrossingStable++;
   2802              }
   2803              //近端15行从中间往两边搜索
   2804              if (i > RowMax - 15 )
   2805              {
   2806                // 初始化遍历指针
   2807                pLeft = ColumnMax/2;
   2808                pRight = ColumnMax/2;
   2809              }
   2810              else 
   2811              {
   2812                // 初始化遍历指针
   2813                pLeft = g_BasePos;
   2814                pRight = g_BasePos;
   2815              }
   2816              // 		str.Format("%d pLeft:%d  pRight:%d\r\n",i,pLeft,pRight);
   2817              // 		fprintf(pfile,str);
   2818              // 初始化搜着标记
   2819              bFoundLeft = bFoundRight = 0;
   2820              for (j = 0;j < ColumnMax;j++)
   2821              {
   2822                // 往左搜索
   2823                if (bFoundLeft == 0 && pLeft > 0){// 未找到左边缘则寻找
   2824                  //if (pLeft < 1){break;}
   2825                  if ((ThresholdData[i][pLeft] == White && ThresholdData[i][pLeft-1] == Black) || pLeft == 1){
   2826                    //					ThresholdData[i][LeftBlack[i]]=White;
   2827                    // 找到左边缘
   2828                    LeftBlack[i] = pLeft-1;
   2829                    bFoundLeft = 1;
   2830                    //					ThresholdData[i][LeftBlack[i]]=100;
   2831                    if (LeftBlack[i] > 0)
   2832                    {
   2833                      ValidLineL[i]=1;
   2834                      LCount=0;
   2835                    }
   2836                    else
   2837                    {
   2838                      LCount++;
   2839                      if (LCount > NoValidLMax)
   2840                      {
   2841                        //左边连续丢线总数
   2842                        NoValidLMax=LCount;
   2843                      }
   2844                    }
   2845                    // 如果右边缘也找到则退出
   2846                    if (bFoundRight){
   2847                      break;
   2848                    }
   2849                  }
   2850                  else{
   2851                    pLeft--;
   2852                  }
   2853                }// if结束--从左到右搜索边缘
   2854                
   2855                //往右搜索
   2856                if (bFoundRight == 0 && pRight < ColumnMax-1 ){//未找到右边缘则寻找
   2857                  //if (pRight > ColumnMax - 3){break;}
   2858                  if ((ThresholdData[i][pRight] == White && ThresholdData[i][pRight+1] == Black) || pRight == ColumnMax-2){
   2859                    //					ThresholdData[i][RightBlack[i]]=White;
   2860                    // 找到右边缘
   2861                    RightBlack[i] = pRight + 1;
   2862                    //					ThresholdData[i][RightBlack[i]]=100;
   2863                    bFoundRight = 1;
   2864                    if (RightBlack[i] < ColumnMax-1)
   2865                    {
   2866                      ValidLineR[i] = 1;
   2867                      RCount=0;
   2868                    }else
   2869                    {
   2870                      RCount++;
   2871                      if (RCount > NoValidRMax)
   2872                      {
   2873                        NoValidRMax=RCount;
   2874                      }
   2875                    }
   2876                    
   2877                    // 如果左边缘也找到则退出
   2878                    if (bFoundLeft){
   2879                      break;
   2880                    }
   2881                  }
   2882                  else{
   2883                    pRight++;
   2884                  }
   2885                }// if结束
   2886              }//for结束
   2887              
   2888              //左边找不到边缘置0
   2889              if (!bFoundLeft)
   2890              {
   2891                LeftBlack[i]=0;
   2892                //ThresholdData[i][LeftBlack[i]]=100;
   2893              }
   2894              //右边找不到边缘置最大值
   2895              if (!bFoundRight)
   2896              {
   2897                RightBlack[i]=ColumnMax-1;
   2898                //ThresholdData[i][RightBlack[i]]=100;
   2899              }
   2900              
   2901              //		if (i < RowMax-2 && fabss(LeftBlack[i] - LeftBlack[i+1]) > TripLen  )
   2902              //		{
   2903              //			ValidLine[i]=0;;
   2904              //		}
   2905              //		if (i < RowMax-2 && fabss(RightBlack[i] - RightBlack[i+1]) > TripLen )
   2906              //		{
   2907              //			ValidLine[i]=0;
   2908              //		}
   2909              
   2910              if ( i < RowMax - 15)
   2911              {
   2912                //左倾的搜索情况，中心线逐渐往左
   2913                if (g_Derict == 1)
   2914                {
   2915                  //搜到的中心点位置偏左方向远离原基点位置，并且有效，作为新的搜索起点
   2916                  if (LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2 < g_BasePos 
   2917                      && fabss((LeftBlack[i] - LeftBlack[i+1])) < 3 
   2918                        && fabss((RightBlack[i] - RightBlack[i+1])) < 3)
   2919                  {
   2920                    temBasePos = LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2;
   2921                    if (fabss(temBasePos-g_BasePos)<20)
   2922                    {
   2923                      g_BasePos = temBasePos;
   2924                      if (g_BasePos < 2)
   2925                      {
   2926                        EndFlag = 1;
   2927                      }
   2928                    }
   2929                  }
   2930                  //搜到的中心点位置偏右方向远离原基点位置，或者右边缘趋势往右，则从新搜索起点
   2931                  else if (LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2 > g_BasePos || RightBlack[i] > RightBlack[i+1]+2)
   2932                  {
   2933                    temLeft = 0;
   2934                    temRight = 0;
   2935                    bFoundFlag=0;
   2936                    //确定新的搜索起点
   2937                    // 					str.Format("搜索起点:g_BasePos %d  \r\n",g_BasePos);
   2938                    // 					fprintf(pfile,str);
   2939                    for (temi = 1;temi < ColumnMax-1;temi++)
   2940                    {
   2941                      if (ThresholdData[i][temi] == White && ThresholdData[i][temi+1] == White && temLeft == 0)
   2942                      {
   2943                        temLeft = temi;
   2944                      }
   2945                      if (temLeft != 0)
   2946                      {
   2947                        if (ThresholdData[i][temi]== Black && ThresholdData[i][temi+1] == Black && ThresholdData[i][temi+5] == Black)
   2948                        {
   2949                          temRight = temi;
   2950                          bFoundFlag=1;
   2951                          break;
   2952                        }
   2953                      }
   2954                    }
   2955                    if(bFoundFlag && temLeft + (temRight-temLeft)/2 < g_BasePos)
   2956                    {
   2957                      temBasePos = temLeft + (temRight-temLeft)/2;
   2958                      g_BasePos = temBasePos;
   2959                      if (g_BasePos < 3)
   2960                      {
   2961                        //新的搜索起点已经到最左边了，无需再搜索了
   2962                        EndFlag = 1;
   2963                      }
   2964                    }
   2965                    // 					str.Format("找到新的搜索起点:g_BasePos %d  \r\n",g_BasePos);
   2966                    // 					fprintf(pfile,str);
   2967                  }
   2968                }
   2969                
   2970                //十字右倾的情况
   2971                if (g_Derict == 2 )
   2972                {
   2973                  //搜到的中心点位置偏右方向远离原基点位置，并且有效，作为新的搜索起点
   2974                  if (LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2 > g_BasePos 
   2975                      && fabss((LeftBlack[i] - LeftBlack[i+1])) < 3 
   2976                        && fabss((RightBlack[i] - RightBlack[i+1])) < 3)
   2977                  {
   2978                    temBasePos = LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2;
   2979                    if (fabss(temBasePos-g_BasePos)<20)
   2980                    {
   2981                      g_BasePos = temBasePos;
   2982                      if (g_BasePos > ColumnMax-4)
   2983                      {
   2984                        EndFlag = 1;
   2985                      }
   2986                    }
   2987                  }
   2988                  //搜到的中心点位置偏左方向远离原基点位置，或者左边缘趋势往左，则从新搜索起点
   2989                  else if (LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2 < g_BasePos || LeftBlack[i] < LeftBlack[i+1]-2)
   2990                  {
   2991                    temLeft = 0;
   2992                    temRight = 0;
   2993                    bFoundFlag = 0;
   2994                    //确定新的搜索起点
   2995                    for (temi = ColumnMax-1;temi > 1;temi--)
   \                     ??GetCrossingMidLine_8: (+1)
   \   000000EA   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \                     ??GetCrossingMidLine_9: (+1)
   \   000000EE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000F2   0xF1B9 0x0F02      CMP      R9,#+2
   \   000000F6   0xDB4F             BLT.N    ??GetCrossingMidLine_10
   2996                    {
   2997                      if (ThresholdData[i][temi] == White && ThresholdData[i][temi-1] == White && temRight == 0)
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x215A             MOVS     R1,#+90
   \   00000100   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000104   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000108   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   0000010C   0x28C8             CMP      R0,#+200
   \   0000010E   0xD113             BNE.N    ??GetCrossingMidLine_11
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   00000114   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000116   0x215A             MOVS     R1,#+90
   \   00000118   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000011C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000120   0xEB19 0x0000      ADDS     R0,R9,R0
   \   00000124   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000128   0x28C8             CMP      R0,#+200
   \   0000012A   0xD105             BNE.N    ??GetCrossingMidLine_11
   \   0000012C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000130   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000134   0xD100             BNE.N    ??GetCrossingMidLine_11
   2998                      {
   2999                        temRight = temi;
   \   00000136   0x46C8             MOV      R8,R9
   3000                      }
   3001                      if (temRight != 0)
   \                     ??GetCrossingMidLine_11: (+1)
   \   00000138   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000013C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000140   0xD0D3             BEQ.N    ??GetCrossingMidLine_8
   3002                      {
   3003                        if (ThresholdData[i][temi]== Black && ThresholdData[i][temi-1]== Black && ThresholdData[i][temi-5] == Black )
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   00000146   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000148   0x215A             MOVS     R1,#+90
   \   0000014A   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000014E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000152   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   00000156   0x281E             CMP      R0,#+30
   \   00000158   0xD1C7             BNE.N    ??GetCrossingMidLine_8
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   0000015E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000160   0x215A             MOVS     R1,#+90
   \   00000162   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000166   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000016A   0xEB19 0x0000      ADDS     R0,R9,R0
   \   0000016E   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000172   0x281E             CMP      R0,#+30
   \   00000174   0xD1B9             BNE.N    ??GetCrossingMidLine_8
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   0000017A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017C   0x215A             MOVS     R1,#+90
   \   0000017E   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000182   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000186   0xEB19 0x0000      ADDS     R0,R9,R0
   \   0000018A   0xF810 0x0C05      LDRB     R0,[R0, #-5]
   \   0000018E   0x281E             CMP      R0,#+30
   \   00000190   0xD1AB             BNE.N    ??GetCrossingMidLine_8
   3004                        {
   3005                          temLeft = temi;
   \   00000192   0x46CE             MOV      LR,R9
   3006                          bFoundFlag=1;
   \   00000194   0xF05F 0x0C01      MOVS     R12,#+1
   3007                          break;
   3008                        }
   3009                      }
   3010                    }
   3011                    if(bFoundFlag && temLeft + (temRight-temLeft)/2 > g_BasePos)
   \                     ??GetCrossingMidLine_10: (+1)
   \   00000198   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000019C   0xF1BC 0x0F00      CMP      R12,#+0
   \   000001A0   0xD025             BEQ.N    ??GetCrossingMidLine_12
   \   000001A2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001A6   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000001AA   0xEBB8 0x000E      SUBS     R0,R8,LR
   \   000001AE   0x2102             MOVS     R1,#+2
   \   000001B0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000001B4   0xFA50 0xF08E      UXTAB    R0,R0,LR
   \   000001B8   0x.... 0x....      LDR.W    R1,??DataTable28_13
   \   000001BC   0x7809             LDRB     R1,[R1, #+0]
   \   000001BE   0x4281             CMP      R1,R0
   \   000001C0   0xDA15             BGE.N    ??GetCrossingMidLine_12
   3012                    {
   3013                      temBasePos = temLeft + (temRight-temLeft)/2;
   \   000001C2   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001C6   0x4670             MOV      R0,LR
   \   000001C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001CA   0xEBB8 0x0000      SUBS     R0,R8,R0
   \   000001CE   0x2102             MOVS     R1,#+2
   \   000001D0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000001D4   0xEB10 0x060E      ADDS     R6,R0,LR
   3014                      g_BasePos = temBasePos;
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   000001DC   0x7006             STRB     R6,[R0, #+0]
   3015                      if (g_BasePos > ColumnMax-3)
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   000001E2   0x7800             LDRB     R0,[R0, #+0]
   \   000001E4   0x2858             CMP      R0,#+88
   \   000001E6   0xDB02             BLT.N    ??GetCrossingMidLine_12
   3016                      {
   3017                        EndFlag = 1;
   \   000001E8   0x2001             MOVS     R0,#+1
   \   000001EA   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3018                      }
   3019                    }
   \                     ??GetCrossingMidLine_12: (+1)
   \   000001EE   0x1E64             SUBS     R4,R4,#+1
   \                     ??GetCrossingMidLine_7: (+1)
   \   000001F0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001F2   0x2C00             CMP      R4,#+0
   \   000001F4   0xF000 0x8261      BEQ.W    ??GetCrossingMidLine_13
   \   000001F8   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001FC   0x2800             CMP      R0,#+0
   \   000001FE   0xD106             BNE.N    ??GetCrossingMidLine_14
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable28_4
   \   00000204   0x7800             LDRB     R0,[R0, #+0]
   \   00000206   0x1C40             ADDS     R0,R0,#+1
   \   00000208   0x.... 0x....      LDR.W    R1,??DataTable28_4
   \   0000020C   0x7008             STRB     R0,[R1, #+0]
   \                     ??GetCrossingMidLine_14: (+1)
   \   0000020E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000210   0x2C56             CMP      R4,#+86
   \   00000212   0xDB02             BLT.N    ??GetCrossingMidLine_15
   \   00000214   0x212D             MOVS     R1,#+45
   \   00000216   0x222D             MOVS     R2,#+45
   \   00000218   0xE005             B.N      ??GetCrossingMidLine_16
   \                     ??GetCrossingMidLine_15: (+1)
   \   0000021A   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   0000021E   0x7801             LDRB     R1,[R0, #+0]
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   00000224   0x7802             LDRB     R2,[R0, #+0]
   \                     ??GetCrossingMidLine_16: (+1)
   \   00000226   0x2700             MOVS     R7,#+0
   \   00000228   0x003B             MOVS     R3,R7
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0xE001             B.N      ??GetCrossingMidLine_17
   \                     ??GetCrossingMidLine_18: (+1)
   \   0000022E   0x1C52             ADDS     R2,R2,#+1
   \                     ??GetCrossingMidLine_19: (+1)
   \   00000230   0x1C40             ADDS     R0,R0,#+1
   \                     ??GetCrossingMidLine_17: (+1)
   \   00000232   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000234   0x285A             CMP      R0,#+90
   \   00000236   0xF280 0x8095      BGE.W    ??GetCrossingMidLine_20
   \   0000023A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000023C   0x2B00             CMP      R3,#+0
   \   0000023E   0xD14D             BNE.N    ??GetCrossingMidLine_21
   \   00000240   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000242   0x2900             CMP      R1,#+0
   \   00000244   0xD04A             BEQ.N    ??GetCrossingMidLine_21
   \   00000246   0x.... 0x....      LDR.W    R6,??DataTable28_12
   \   0000024A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000024C   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000250   0xFB0C 0x6604      MLA      R6,R12,R4,R6
   \   00000254   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000256   0x5D8E             LDRB     R6,[R1, R6]
   \   00000258   0x2EC8             CMP      R6,#+200
   \   0000025A   0xD10C             BNE.N    ??GetCrossingMidLine_22
   \   0000025C   0x.... 0x....      LDR.W    R6,??DataTable28_12
   \   00000260   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000262   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000266   0xFB0C 0x6604      MLA      R6,R12,R4,R6
   \   0000026A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000026C   0x198E             ADDS     R6,R1,R6
   \   0000026E   0xF816 0x6C01      LDRB     R6,[R6, #-1]
   \   00000272   0x2E1E             CMP      R6,#+30
   \   00000274   0xD002             BEQ.N    ??GetCrossingMidLine_23
   \                     ??GetCrossingMidLine_22: (+1)
   \   00000276   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000278   0x2901             CMP      R1,#+1
   \   0000027A   0xD12E             BNE.N    ??GetCrossingMidLine_24
   \                     ??GetCrossingMidLine_23: (+1)
   \   0000027C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000027E   0x1E4B             SUBS     R3,R1,#+1
   \   00000280   0x.... 0x....      LDR.W    R6,??DataTable25
   \   00000284   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000286   0xF846 0x3024      STR      R3,[R6, R4, LSL #+2]
   \   0000028A   0x2301             MOVS     R3,#+1
   \   0000028C   0x.... 0x....      LDR.W    R6,??DataTable25
   \   00000290   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000292   0xF856 0x6024      LDR      R6,[R6, R4, LSL #+2]
   \   00000296   0x2E01             CMP      R6,#+1
   \   00000298   0xDB09             BLT.N    ??GetCrossingMidLine_25
   \   0000029A   0x2601             MOVS     R6,#+1
   \   0000029C   0x.... 0x....      LDR.W    R12,??DataTable28_6
   \   000002A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A2   0xF804 0x600C      STRB     R6,[R4, R12]
   \   000002A6   0x2600             MOVS     R6,#+0
   \   000002A8   0xF88D 0x6000      STRB     R6,[SP, #+0]
   \   000002AC   0xE011             B.N      ??GetCrossingMidLine_26
   \                     ??GetCrossingMidLine_25: (+1)
   \   000002AE   0xF89D 0x6000      LDRB     R6,[SP, #+0]
   \   000002B2   0x1C76             ADDS     R6,R6,#+1
   \   000002B4   0xF88D 0x6000      STRB     R6,[SP, #+0]
   \   000002B8   0x.... 0x....      LDR.W    R6,??DataTable28_14
   \   000002BC   0x7836             LDRB     R6,[R6, #+0]
   \   000002BE   0xF89D 0xC000      LDRB     R12,[SP, #+0]
   \   000002C2   0x4566             CMP      R6,R12
   \   000002C4   0xD205             BCS.N    ??GetCrossingMidLine_26
   \   000002C6   0xF89D 0x6000      LDRB     R6,[SP, #+0]
   \   000002CA   0x.... 0x....      LDR.W    R12,??DataTable28_14
   \   000002CE   0xF88C 0x6000      STRB     R6,[R12, #+0]
   \                     ??GetCrossingMidLine_26: (+1)
   \   000002D2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002D4   0x2F00             CMP      R7,#+0
   \   000002D6   0xD001             BEQ.N    ??GetCrossingMidLine_21
   \   000002D8   0xE044             B.N      ??GetCrossingMidLine_20
   \                     ??GetCrossingMidLine_24: (+1)
   \   000002DA   0x1E49             SUBS     R1,R1,#+1
   \                     ??GetCrossingMidLine_21: (+1)
   \   000002DC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002DE   0x2F00             CMP      R7,#+0
   \   000002E0   0xD1A6             BNE.N    ??GetCrossingMidLine_19
   \   000002E2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002E4   0x2A59             CMP      R2,#+89
   \   000002E6   0xDAA3             BGE.N    ??GetCrossingMidLine_19
   \   000002E8   0x.... 0x....      LDR.W    R6,??DataTable28_12
   \   000002EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002EE   0xF05F 0x0C5A      MOVS     R12,#+90
   \   000002F2   0xFB0C 0x6604      MLA      R6,R12,R4,R6
   \   000002F6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002F8   0x5D96             LDRB     R6,[R2, R6]
   \   000002FA   0x2EC8             CMP      R6,#+200
   \   000002FC   0xD10B             BNE.N    ??GetCrossingMidLine_27
   \   000002FE   0x.... 0x....      LDR.W    R6,??DataTable28_12
   \   00000302   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000304   0xF05F 0x0C5A      MOVS     R12,#+90
   \   00000308   0xFB0C 0x6604      MLA      R6,R12,R4,R6
   \   0000030C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000030E   0x1996             ADDS     R6,R2,R6
   \   00000310   0x7876             LDRB     R6,[R6, #+1]
   \   00000312   0x2E1E             CMP      R6,#+30
   \   00000314   0xD002             BEQ.N    ??GetCrossingMidLine_28
   \                     ??GetCrossingMidLine_27: (+1)
   \   00000316   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000318   0x2A58             CMP      R2,#+88
   \   0000031A   0xD188             BNE.N    ??GetCrossingMidLine_18
   \                     ??GetCrossingMidLine_28: (+1)
   \   0000031C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000031E   0x1C56             ADDS     R6,R2,#+1
   \   00000320   0x.... 0x....      LDR.W    R7,??DataTable25_1
   \   00000324   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000326   0xF847 0x6024      STR      R6,[R7, R4, LSL #+2]
   \   0000032A   0x2701             MOVS     R7,#+1
   \   0000032C   0x.... 0x....      LDR.W    R6,??DataTable25_1
   \   00000330   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000332   0xF856 0x6024      LDR      R6,[R6, R4, LSL #+2]
   \   00000336   0x2E59             CMP      R6,#+89
   \   00000338   0xDA06             BGE.N    ??GetCrossingMidLine_29
   \   0000033A   0x2501             MOVS     R5,#+1
   \   0000033C   0x.... 0x....      LDR.W    R6,??DataTable28_5
   \   00000340   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000342   0x55A5             STRB     R5,[R4, R6]
   \   00000344   0x2500             MOVS     R5,#+0
   \   00000346   0xE009             B.N      ??GetCrossingMidLine_30
   \                     ??GetCrossingMidLine_29: (+1)
   \   00000348   0x1C6D             ADDS     R5,R5,#+1
   \   0000034A   0x.... 0x....      LDR.W    R6,??DataTable28_15
   \   0000034E   0x7836             LDRB     R6,[R6, #+0]
   \   00000350   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000352   0x42AE             CMP      R6,R5
   \   00000354   0xD202             BCS.N    ??GetCrossingMidLine_30
   \   00000356   0x.... 0x....      LDR.W    R6,??DataTable28_15
   \   0000035A   0x7035             STRB     R5,[R6, #+0]
   \                     ??GetCrossingMidLine_30: (+1)
   \   0000035C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000035E   0x2B00             CMP      R3,#+0
   \   00000360   0xF43F 0xAF66      BEQ.W    ??GetCrossingMidLine_19
   \                     ??GetCrossingMidLine_20: (+1)
   \   00000364   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000366   0x2B00             CMP      R3,#+0
   \   00000368   0xD104             BNE.N    ??GetCrossingMidLine_31
   \   0000036A   0x2000             MOVS     R0,#+0
   \   0000036C   0x....             LDR.N    R1,??DataTable25
   \   0000036E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000370   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \                     ??GetCrossingMidLine_31: (+1)
   \   00000374   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000376   0x2F00             CMP      R7,#+0
   \   00000378   0xD104             BNE.N    ??GetCrossingMidLine_32
   \   0000037A   0x2059             MOVS     R0,#+89
   \   0000037C   0x....             LDR.N    R1,??DataTable25_1
   \   0000037E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000380   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \                     ??GetCrossingMidLine_32: (+1)
   \   00000384   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000386   0x2C55             CMP      R4,#+85
   \   00000388   0xF6BF 0xAF31      BGE.W    ??GetCrossingMidLine_12
   \   0000038C   0x.... 0x....      LDR.W    R0,??DataTable28_9
   \   00000390   0x7800             LDRB     R0,[R0, #+0]
   \   00000392   0x2801             CMP      R0,#+1
   \   00000394   0xF040 0x8105      BNE.W    ??GetCrossingMidLine_33
   \   00000398   0x....             LDR.N    R0,??DataTable25
   \   0000039A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000039C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000003A0   0x....             LDR.N    R1,??DataTable25_1
   \   000003A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003A4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000003A8   0x....             LDR.N    R2,??DataTable25
   \   000003AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003AC   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   000003B0   0x1A89             SUBS     R1,R1,R2
   \   000003B2   0x2202             MOVS     R2,#+2
   \   000003B4   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000003B8   0x1808             ADDS     R0,R1,R0
   \   000003BA   0x.... 0x....      LDR.W    R1,??DataTable28_13
   \   000003BE   0x7809             LDRB     R1,[R1, #+0]
   \   000003C0   0x4288             CMP      R0,R1
   \   000003C2   0xDA43             BGE.N    ??GetCrossingMidLine_34
   \   000003C4   0x....             LDR.N    R0,??DataTable25
   \   000003C6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003C8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000003CC   0x....             LDR.N    R1,??DataTable25
   \   000003CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003D0   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000003D4   0x6849             LDR      R1,[R1, #+4]
   \   000003D6   0x1A40             SUBS     R0,R0,R1
   \   000003D8   0x.... 0x....      BL       `fabss`
   \   000003DC   0x2803             CMP      R0,#+3
   \   000003DE   0xDA35             BGE.N    ??GetCrossingMidLine_34
   \   000003E0   0x....             LDR.N    R0,??DataTable25_1
   \   000003E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003E4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000003E8   0x....             LDR.N    R1,??DataTable25_1
   \   000003EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003EC   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000003F0   0x6849             LDR      R1,[R1, #+4]
   \   000003F2   0x1A40             SUBS     R0,R0,R1
   \   000003F4   0x.... 0x....      BL       `fabss`
   \   000003F8   0x2803             CMP      R0,#+3
   \   000003FA   0xDA27             BGE.N    ??GetCrossingMidLine_34
   \   000003FC   0x....             LDR.N    R0,??DataTable25
   \   000003FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000400   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000404   0x....             LDR.N    R1,??DataTable25_1
   \   00000406   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000408   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000040C   0x....             LDR.N    R2,??DataTable25
   \   0000040E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000410   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   00000414   0x1A89             SUBS     R1,R1,R2
   \   00000416   0x2202             MOVS     R2,#+2
   \   00000418   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000041C   0x180E             ADDS     R6,R1,R0
   \   0000041E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000420   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   00000424   0x7800             LDRB     R0,[R0, #+0]
   \   00000426   0x1A30             SUBS     R0,R6,R0
   \   00000428   0x.... 0x....      BL       `fabss`
   \   0000042C   0x2814             CMP      R0,#+20
   \   0000042E   0xF280 0x80B8      BGE.W    ??GetCrossingMidLine_33
   \   00000432   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   00000436   0x7006             STRB     R6,[R0, #+0]
   \   00000438   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   0000043C   0x7800             LDRB     R0,[R0, #+0]
   \   0000043E   0x2802             CMP      R0,#+2
   \   00000440   0xF280 0x80AF      BGE.W    ??GetCrossingMidLine_33
   \   00000444   0x2001             MOVS     R0,#+1
   \   00000446   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000044A   0xE0AA             B.N      ??GetCrossingMidLine_33
   \                     ??GetCrossingMidLine_34: (+1)
   \   0000044C   0x....             LDR.N    R0,??DataTable25
   \   0000044E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000450   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000454   0x....             LDR.N    R1,??DataTable25_1
   \   00000456   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000458   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000045C   0x....             LDR.N    R2,??DataTable25
   \   0000045E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000460   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   00000464   0x1A89             SUBS     R1,R1,R2
   \   00000466   0x2202             MOVS     R2,#+2
   \   00000468   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000046C   0x1808             ADDS     R0,R1,R0
   \   0000046E   0x.... 0x....      LDR.W    R1,??DataTable28_13
   \   00000472   0x7809             LDRB     R1,[R1, #+0]
   \   00000474   0x4281             CMP      R1,R0
   \   00000476   0xDB0C             BLT.N    ??GetCrossingMidLine_35
   \   00000478   0x....             LDR.N    R0,??DataTable25_1
   \   0000047A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000047C   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000480   0x6840             LDR      R0,[R0, #+4]
   \   00000482   0x1C80             ADDS     R0,R0,#+2
   \   00000484   0x....             LDR.N    R1,??DataTable25_1
   \   00000486   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000488   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000048C   0x4288             CMP      R0,R1
   \   0000048E   0xF280 0x8088      BGE.W    ??GetCrossingMidLine_33
   \                     ??GetCrossingMidLine_35: (+1)
   \   00000492   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000496   0xF05F 0x0800      MOVS     R8,#+0
   \   0000049A   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000049E   0xF05F 0x0901      MOVS     R9,#+1
   \   000004A2   0xE001             B.N      ??GetCrossingMidLine_36
   \                     ??GetCrossingMidLine_37: (+1)
   \   000004A4   0xF119 0x0901      ADDS     R9,R9,#+1
   \                     ??GetCrossingMidLine_36: (+1)
   \   000004A8   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000004AC   0xF1B9 0x0F59      CMP      R9,#+89
   \   000004B0   0xDA4C             BGE.N    ??GetCrossingMidLine_38
   \   000004B2   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   000004B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004B8   0x215A             MOVS     R1,#+90
   \   000004BA   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000004BE   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000004C2   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   000004C6   0x28C8             CMP      R0,#+200
   \   000004C8   0xD112             BNE.N    ??GetCrossingMidLine_39
   \   000004CA   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   000004CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004D0   0x215A             MOVS     R1,#+90
   \   000004D2   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000004D6   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000004DA   0xEB19 0x0000      ADDS     R0,R9,R0
   \   000004DE   0x7840             LDRB     R0,[R0, #+1]
   \   000004E0   0x28C8             CMP      R0,#+200
   \   000004E2   0xD105             BNE.N    ??GetCrossingMidLine_39
   \   000004E4   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000004E8   0xF1BE 0x0F00      CMP      LR,#+0
   \   000004EC   0xD100             BNE.N    ??GetCrossingMidLine_39
   \   000004EE   0x46CE             MOV      LR,R9
   \                     ??GetCrossingMidLine_39: (+1)
   \   000004F0   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000004F4   0xF1BE 0x0F00      CMP      LR,#+0
   \   000004F8   0xD0D4             BEQ.N    ??GetCrossingMidLine_37
   \   000004FA   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   000004FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000500   0x215A             MOVS     R1,#+90
   \   00000502   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000506   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000050A   0xF819 0x0000      LDRB     R0,[R9, R0]
   \   0000050E   0x281E             CMP      R0,#+30
   \   00000510   0xD1C8             BNE.N    ??GetCrossingMidLine_37
   \   00000512   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   00000516   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000518   0x215A             MOVS     R1,#+90
   \   0000051A   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   0000051E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000522   0xEB19 0x0000      ADDS     R0,R9,R0
   \   00000526   0x7840             LDRB     R0,[R0, #+1]
   \   00000528   0x281E             CMP      R0,#+30
   \   0000052A   0xD1BB             BNE.N    ??GetCrossingMidLine_37
   \   0000052C   0x.... 0x....      LDR.W    R0,??DataTable28_12
   \   00000530   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000532   0x215A             MOVS     R1,#+90
   \   00000534   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000538   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000053C   0xEB19 0x0000      ADDS     R0,R9,R0
   \   00000540   0x7940             LDRB     R0,[R0, #+5]
   \   00000542   0x281E             CMP      R0,#+30
   \   00000544   0xD1AE             BNE.N    ??GetCrossingMidLine_37
   \   00000546   0x46C8             MOV      R8,R9
   \   00000548   0xF05F 0x0C01      MOVS     R12,#+1
   \                     ??GetCrossingMidLine_38: (+1)
   \   0000054C   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000550   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000554   0xD025             BEQ.N    ??GetCrossingMidLine_33
   \   00000556   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000055A   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000055E   0xEBB8 0x000E      SUBS     R0,R8,LR
   \   00000562   0x2102             MOVS     R1,#+2
   \   00000564   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000568   0xFA50 0xF08E      UXTAB    R0,R0,LR
   \   0000056C   0x.... 0x....      LDR.W    R1,??DataTable28_13
   \   00000570   0x7809             LDRB     R1,[R1, #+0]
   \   00000572   0x4288             CMP      R0,R1
   \   00000574   0xDA15             BGE.N    ??GetCrossingMidLine_33
   \   00000576   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000057A   0x4670             MOV      R0,LR
   \   0000057C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000057E   0xEBB8 0x0000      SUBS     R0,R8,R0
   \   00000582   0x2102             MOVS     R1,#+2
   \   00000584   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000588   0xEB10 0x060E      ADDS     R6,R0,LR
   \   0000058C   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   00000590   0x7006             STRB     R6,[R0, #+0]
   \   00000592   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   00000596   0x7800             LDRB     R0,[R0, #+0]
   \   00000598   0x2803             CMP      R0,#+3
   \   0000059A   0xDA02             BGE.N    ??GetCrossingMidLine_33
   \   0000059C   0x2001             MOVS     R0,#+1
   \   0000059E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \                     ??GetCrossingMidLine_33: (+1)
   \   000005A2   0x.... 0x....      LDR.W    R0,??DataTable28_9
   \   000005A6   0x7800             LDRB     R0,[R0, #+0]
   \   000005A8   0x2802             CMP      R0,#+2
   \   000005AA   0xF47F 0xAE20      BNE.W    ??GetCrossingMidLine_12
   \   000005AE   0x....             LDR.N    R0,??DataTable25
   \   000005B0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005B2   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000005B6   0x....             LDR.N    R1,??DataTable25_1
   \   000005B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005BA   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000005BE   0x....             LDR.N    R2,??DataTable25
   \   000005C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005C2   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   000005C6   0x1A89             SUBS     R1,R1,R2
   \   000005C8   0x2202             MOVS     R2,#+2
   \   000005CA   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000005CE   0x1808             ADDS     R0,R1,R0
   \   000005D0   0x.... 0x....      LDR.W    R1,??DataTable28_13
   \   000005D4   0x7809             LDRB     R1,[R1, #+0]
   \   000005D6   0x4281             CMP      R1,R0
   \   000005D8   0xDA43             BGE.N    ??GetCrossingMidLine_40
   \   000005DA   0x....             LDR.N    R0,??DataTable25
   \   000005DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005DE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000005E2   0x....             LDR.N    R1,??DataTable25
   \   000005E4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005E6   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000005EA   0x6849             LDR      R1,[R1, #+4]
   \   000005EC   0x1A40             SUBS     R0,R0,R1
   \   000005EE   0x.... 0x....      BL       `fabss`
   \   000005F2   0x2803             CMP      R0,#+3
   \   000005F4   0xDA35             BGE.N    ??GetCrossingMidLine_40
   \   000005F6   0x....             LDR.N    R0,??DataTable25_1
   \   000005F8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005FA   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000005FE   0x....             LDR.N    R1,??DataTable25_1
   \   00000600   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000602   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000606   0x6849             LDR      R1,[R1, #+4]
   \   00000608   0x1A40             SUBS     R0,R0,R1
   \   0000060A   0x.... 0x....      BL       `fabss`
   \   0000060E   0x2803             CMP      R0,#+3
   \   00000610   0xDA27             BGE.N    ??GetCrossingMidLine_40
   \   00000612   0x....             LDR.N    R0,??DataTable25
   \   00000614   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000616   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000061A   0x....             LDR.N    R1,??DataTable25_1
   \   0000061C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000061E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000622   0x....             LDR.N    R2,??DataTable25
   \   00000624   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000626   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   0000062A   0x1A89             SUBS     R1,R1,R2
   \   0000062C   0x2202             MOVS     R2,#+2
   \   0000062E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000632   0x180E             ADDS     R6,R1,R0
   \   00000634   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000636   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   0000063A   0x7800             LDRB     R0,[R0, #+0]
   \   0000063C   0x1A30             SUBS     R0,R6,R0
   \   0000063E   0x.... 0x....      BL       `fabss`
   \   00000642   0x2814             CMP      R0,#+20
   \   00000644   0xF6BF 0xADD3      BGE.W    ??GetCrossingMidLine_12
   \   00000648   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   0000064C   0x7006             STRB     R6,[R0, #+0]
   \   0000064E   0x.... 0x....      LDR.W    R0,??DataTable28_13
   \   00000652   0x7800             LDRB     R0,[R0, #+0]
   \   00000654   0x2857             CMP      R0,#+87
   \   00000656   0xF6FF 0xADCA      BLT.W    ??GetCrossingMidLine_12
   \   0000065A   0x2001             MOVS     R0,#+1
   \   0000065C   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000660   0xE5C5             B.N      ??GetCrossingMidLine_12
   \                     ??GetCrossingMidLine_40: (+1)
   \   00000662   0x....             LDR.N    R0,??DataTable25
   \   00000664   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000666   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000066A   0x....             LDR.N    R1,??DataTable25_1
   \   0000066C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000066E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000672   0x....             LDR.N    R2,??DataTable25
   \   00000674   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000676   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   0000067A   0x1A89             SUBS     R1,R1,R2
   \   0000067C   0x2202             MOVS     R2,#+2
   \   0000067E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000682   0x1808             ADDS     R0,R1,R0
   \   00000684   0x.... 0x....      LDR.W    R1,??DataTable28_13
   \   00000688   0x7809             LDRB     R1,[R1, #+0]
   \   0000068A   0x4288             CMP      R0,R1
   \   0000068C   0xDB0C             BLT.N    ??GetCrossingMidLine_41
   \   0000068E   0x....             LDR.N    R0,??DataTable25
   \   00000690   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000692   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000696   0x....             LDR.N    R1,??DataTable25
   \   00000698   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000069A   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000069E   0x6849             LDR      R1,[R1, #+4]
   \   000006A0   0x1E89             SUBS     R1,R1,#+2
   \   000006A2   0x4288             CMP      R0,R1
   \   000006A4   0xF6BF 0xADA3      BGE.W    ??GetCrossingMidLine_12
   \                     ??GetCrossingMidLine_41: (+1)
   \   000006A8   0xF05F 0x0E00      MOVS     LR,#+0
   \   000006AC   0xF05F 0x0800      MOVS     R8,#+0
   \   000006B0   0xF05F 0x0C00      MOVS     R12,#+0
   \   000006B4   0xF05F 0x0959      MOVS     R9,#+89
   \   000006B8   0xE519             B.N      ??GetCrossingMidLine_9
   3020                    // 					str.Format("找到新的搜索起点:g_BasePos %d  \r\n",g_BasePos);
   3021                    // 					fprintf(pfile,str);
   3022                  }
   3023                }
   3024              }
   3025            }
   3026            
   3027            // 	str.Format("CrossingStable:%d\r\n",CrossingStable);
   3028            // 	fprintf(pfile,str);
   3029            // 	str.Format("NoValidLMax:%d NoValidRMax:%d\r\n",NoValidLMax,NoValidRMax);
   3030            // 	fprintf(pfile,str);
   3031          }
   \                     ??GetCrossingMidLine_13: (+1)
   \   000006BA   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   3032          
   3033          //曲线两点间拟合

   \                                 In section .text, align 2, keep-with-next
   3034          void CommonRectificate(int data[],unsigned char begin,unsigned char end)
   3035          {
   \                     CommonRectificate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
   3036            unsigned char MidPos = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   3037            if (end > RowMax-1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D64             CMP      R5,#+100
   \   0000000C   0xDB00             BLT.N    ??CommonRectificate_0
   3038            {
   3039              end = RowMax-1;
   \   0000000E   0x2563             MOVS     R5,#+99
   3040            }
   3041            if (begin == end)
   \                     ??CommonRectificate_0: (+1)
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x42A9             CMP      R1,R5
   \   00000016   0xD129             BNE.N    ??CommonRectificate_1
   3042            {
   3043              //		ThresholdData[begin][data[begin]]=White;
   3044              
   3045              data[begin] = (data[begin-1]+data[begin+1])/2;
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0xEB14 0x0081      ADDS     R0,R4,R1, LSL #+2
   \   0000001E   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0xEB14 0x0281      ADDS     R2,R4,R1, LSL #+2
   \   00000028   0x6852             LDR      R2,[R2, #+4]
   \   0000002A   0x1810             ADDS     R0,R2,R0
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0xF844 0x0021      STR      R0,[R4, R1, LSL #+2]
   3046              // 		str.Format("补偿%d:%d  \r\n",n++,begin);
   3047              // 		fprintf(pfile,str);
   3048              //		ThresholdData[begin][data[begin]]=100;
   3049              
   3050              //		ThresholdData[begin][BlackLineData[begin]]=White;
   3051              
   3052              BlackLineData[begin] =  LeftBlack[begin] + (RightBlack[begin]-LeftBlack[begin])/2;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable29
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000042   0x.... 0x....      LDR.W    R2,??DataTable29_1
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \   0000004C   0x.... 0x....      LDR.W    R3,??DataTable29
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0xF853 0x3021      LDR      R3,[R3, R1, LSL #+2]
   \   00000056   0x1AD2             SUBS     R2,R2,R3
   \   00000058   0x2302             MOVS     R3,#+2
   \   0000005A   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   0000005E   0x1810             ADDS     R0,R2,R0
   \   00000060   0x.... 0x....      LDR.W    R2,??DataTable31
   \   00000064   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   0000006A   0xE046             B.N      ??CommonRectificate_2
   3053              
   3054              //		ThresholdData[begin][BlackLineData[begin]]=128;
   3055              
   3056            }
   3057            else if(begin < end)
   \                     ??CommonRectificate_1: (+1)
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   0x42A9             CMP      R1,R5
   \   00000072   0xD242             BCS.N    ??CommonRectificate_2
   3058            {
   3059              MidPos = (begin+end)/2;	
   \   00000074   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000076   0xFA55 0xF081      UXTAB    R0,R5,R1
   \   0000007A   0x2202             MOVS     R2,#+2
   \   0000007C   0xFB90 0xF6F2      SDIV     R6,R0,R2
   3060              //		ThresholdData[MidPos][data[MidPos]]=White;
   3061              data[MidPos] = (data[begin]+data[end])/2;
   \   00000080   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000082   0xF854 0x0021      LDR      R0,[R4, R1, LSL #+2]
   \   00000086   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000088   0xF854 0x2025      LDR      R2,[R4, R5, LSL #+2]
   \   0000008C   0x1810             ADDS     R0,R2,R0
   \   0000008E   0x2202             MOVS     R2,#+2
   \   00000090   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000094   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000096   0xF844 0x0026      STR      R0,[R4, R6, LSL #+2]
   3062              // 		str.Format("补偿%d:%d  \r\n",n++,MidPos);
   3063              // 		fprintf(pfile,str);
   3064              //		ThresholdData[MidPos][data[MidPos]]=100;
   3065              
   3066              //		ThresholdData[MidPos][data[MidPos]]=100;
   3067              //		ThresholdData[MidPos][BlackLineData[MidPos]]=White;
   3068              BlackLineData[MidPos] =  LeftBlack[MidPos] + (RightBlack[MidPos]-LeftBlack[MidPos])/2;	
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable29
   \   0000009E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A0   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable29_1
   \   000000A8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000AA   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   000000AE   0x.... 0x....      LDR.W    R3,??DataTable29
   \   000000B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B4   0xF853 0x3026      LDR      R3,[R3, R6, LSL #+2]
   \   000000B8   0x1AD2             SUBS     R2,R2,R3
   \   000000BA   0x2302             MOVS     R3,#+2
   \   000000BC   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000C0   0x1810             ADDS     R0,R2,R0
   \   000000C2   0x.... 0x....      LDR.W    R2,??DataTable31
   \   000000C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C8   0xF842 0x0026      STR      R0,[R2, R6, LSL #+2]
   3069              //		ThresholdData[MidPos][BlackLineData[MidPos]]=128;
   3070              
   3071              if (begin+1 < MidPos)
   \   000000CC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CE   0x1C48             ADDS     R0,R1,#+1
   \   000000D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D2   0x42B0             CMP      R0,R6
   \   000000D4   0xDA05             BGE.N    ??CommonRectificate_3
   3072              {
   3073                CommonRectificate(data,begin,MidPos);
   \   000000D6   0x0032             MOVS     R2,R6
   \   000000D8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000DA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0xF7FF 0xFF8F      BL       CommonRectificate
   3074              }
   3075              if (MidPos+1 < end)
   \                     ??CommonRectificate_3: (+1)
   \   000000E2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000E4   0x1C70             ADDS     R0,R6,#+1
   \   000000E6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E8   0x42A8             CMP      R0,R5
   \   000000EA   0xDA06             BGE.N    ??CommonRectificate_2
   3076              {
   3077                CommonRectificate(data,MidPos,end);
   \   000000EC   0x002A             MOVS     R2,R5
   \   000000EE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000F0   0x0031             MOVS     R1,R6
   \   000000F2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0xF7FF 0xFF83      BL       CommonRectificate
   3078              }
   3079            }
   3080          }
   \                     ??CommonRectificate_2: (+1)
   \   000000FA   0xBD70             POP      {R4-R6,PC}       ;; return
   3081          
   3082          //对新提取的十字交叉道中线进行滤波

   \                                 In section .text, align 2, keep-with-next
   3083          void CrossingMidFilter()
   3084          {
   \                     CrossingMidFilter: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   3085            signed char i = 0,j=0,MidEnd = 0;
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   3086            unsigned char MidToBlackCount = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   3087            int sum = 0;
   \   0000000A   0x2100             MOVS     R1,#+0
   3088            StableNumbers2 = 0;
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable31_1
   \   00000012   0x601A             STR      R2,[R3, #+0]
   3089            
   3090            for (i = RowMax-1;i >= 0 && !MidEnd;i--)
   \   00000014   0x2263             MOVS     R2,#+99
   \   00000016   0x0014             MOVS     R4,R2
   \   00000018   0xE03E             B.N      ??CrossingMidFilter_0
   3091            {
   3092              BlackLineData[i] = LeftBlack[i] + (RightBlack[i]-LeftBlack[i] )/2;
   3093              //十字中心线稳定行	
   3094              StableNumbers2++;
   3095              //中心线搜索截止
   3096              if (BlackLineData[i] < 4 || BlackLineData[i] > ColumnMax-4)
   3097              {
   3098                MidEnd = 1;
   3099                break;
   3100              }
   3101              if (i < RowMax-5 && fabss(BlackLineData[i]-BlackLineData[i+1]) > 3)
   \                     ??CrossingMidFilter_1: (+1)
   \   0000001A   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000001C   0x2C5F             CMP      R4,#+95
   \   0000001E   0xDA28             BGE.N    ??CrossingMidFilter_2
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable31
   \   00000024   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000026   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable31
   \   0000002E   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000030   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000034   0x6849             LDR      R1,[R1, #+4]
   \   00000036   0x1A40             SUBS     R0,R0,R1
   \   00000038   0x.... 0x....      BL       `fabss`
   \   0000003C   0x2804             CMP      R0,#+4
   \   0000003E   0xDB18             BLT.N    ??CrossingMidFilter_2
   3102              {
   3103                BlackLineData[i] = BlackLineData[i+1] + BlackLineData[i+1] - BlackLineData[i+2];
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable31
   \   00000044   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000046   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000004A   0x6840             LDR      R0,[R0, #+4]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable31
   \   00000050   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000052   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000056   0x6849             LDR      R1,[R1, #+4]
   \   00000058   0x1808             ADDS     R0,R1,R0
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable31
   \   0000005E   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000060   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000064   0x6889             LDR      R1,[R1, #+8]
   \   00000066   0x1A40             SUBS     R0,R0,R1
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable31
   \   0000006C   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000006E   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   3104              }
   3105              if (ThresholdData[i][BlackLineData[i]] == Black)
   \                     ??CrossingMidFilter_2: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable28_12
   \   00000074   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000076   0x215A             MOVS     R1,#+90
   \   00000078   0xFB14 0x0001      SMLABB   R0,R4,R1,R0
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable31
   \   00000080   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000082   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000086   0x5C08             LDRB     R0,[R1, R0]
   \   00000088   0x281E             CMP      R0,#+30
   \   0000008A   0xD104             BNE.N    ??CrossingMidFilter_3
   3106              {
   3107                MidToBlackCount++;
   \   0000008C   0x1C76             ADDS     R6,R6,#+1
   3108                if (MidToBlackCount >= 3)
   \   0000008E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000090   0x2E03             CMP      R6,#+3
   \   00000092   0xDB00             BLT.N    ??CrossingMidFilter_3
   3109                {
   3110                  //中心线碰到黑点了
   3111                  MidEnd = 1;
   \   00000094   0x2501             MOVS     R5,#+1
   3112                }
   3113              }
   \                     ??CrossingMidFilter_3: (+1)
   \   00000096   0x1E64             SUBS     R4,R4,#+1
   \                     ??CrossingMidFilter_0: (+1)
   \   00000098   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000009A   0x2C00             CMP      R4,#+0
   \   0000009C   0xD42B             BMI.N    ??CrossingMidFilter_4
   \   0000009E   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   000000A0   0x2D00             CMP      R5,#+0
   \   000000A2   0xD128             BNE.N    ??CrossingMidFilter_4
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000000A8   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000AA   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   000000B2   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000B4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B8   0x.... 0x....      LDR.W    R2,??DataTable29
   \   000000BC   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000BE   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   000000C2   0x1A89             SUBS     R1,R1,R2
   \   000000C4   0x2202             MOVS     R2,#+2
   \   000000C6   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000000CA   0x1808             ADDS     R0,R1,R0
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable31
   \   000000D0   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000D2   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable31_1
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable31_1
   \   000000E2   0x6008             STR      R0,[R1, #+0]
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable31
   \   000000E8   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   000000EA   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000EE   0x1F00             SUBS     R0,R0,#+4
   \   000000F0   0x2853             CMP      R0,#+83
   \   000000F2   0xD392             BCC.N    ??CrossingMidFilter_1
   \   000000F4   0x2501             MOVS     R5,#+1
   3114              //		else
   3115              //		{
   3116              //			MidToBlackCount = 0;
   3117              //		}
   3118            }
   3119            
   3120            for (i = RowMax-1;i > RowMax-(StableNumbers2-5);i--)
   \                     ??CrossingMidFilter_4: (+1)
   \   000000F6   0x2463             MOVS     R4,#+99
   \   000000F8   0xE014             B.N      ??CrossingMidFilter_5
   3121            {
   3122              sum = 0;
   3123              for (j = 0;j < 5;j++)
   3124              {
   3125                sum += BlackLineData[i-j];
   \                     ??CrossingMidFilter_6: (+1)
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable31
   \   000000FE   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000100   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000102   0x1A23             SUBS     R3,R4,R0
   \   00000104   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000108   0x1851             ADDS     R1,R2,R1
   3126              }
   \   0000010A   0x1C40             ADDS     R0,R0,#+1
   \                     ??CrossingMidFilter_7: (+1)
   \   0000010C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000010E   0x2805             CMP      R0,#+5
   \   00000110   0xDBF3             BLT.N    ??CrossingMidFilter_6
   3127              BlackLineData[i] = sum/5;
   \   00000112   0x2005             MOVS     R0,#+5
   \   00000114   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable31
   \   0000011C   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000011E   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   00000122   0x1E64             SUBS     R4,R4,#+1
   \                     ??CrossingMidFilter_5: (+1)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable31_1
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   0000012E   0x1D40             ADDS     R0,R0,#+5
   \   00000130   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   00000132   0x42A0             CMP      R0,R4
   \   00000134   0xDA02             BGE.N    ??CrossingMidFilter_8
   \   00000136   0x2100             MOVS     R1,#+0
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0xE7E7             B.N      ??CrossingMidFilter_7
   3128              
   3129              //ThresholdData[i][BlackLineData[i]]=128;
   3130            }
   3131          }
   \                     ??CrossingMidFilter_8: (+1)
   \   0000013C   0xBD70             POP      {R4-R6,PC}       ;; return
   3132          
   3133          //正十字的情况处理

   \                                 In section .text, align 2, keep-with-next
   3134          void SCProcessing()
   3135          {
   \                     SCProcessing: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   3136            char i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   3137            int startPos=0,endPos=0,temCount=0,countMax=0,temPos=0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF05F 0x0C00      MOVS     R12,#+0
   3138            int ProcessFlag=0;
   \   00000012   0x2500             MOVS     R5,#+0
   3139            
   3140            //跳变计数
   3141            unsigned char TripPointCount = 0;
   \   00000014   0x2600             MOVS     R6,#+0
   3142            unsigned char TripLen = 3;
   \   00000016   0x2703             MOVS     R7,#+3
   3143            //取十字的边缘线
   3144            //GetCrossingMidLine();
   3145            
   3146            // 	str.Format("正十字处理\r\n");
   3147            // 	fprintf(pfile,str);
   3148            for (i = 0;i < RowMax;i++)
   \   00000018   0xF05F 0x0E00      MOVS     LR,#+0
   \   0000001C   0x4674             MOV      R4,LR
   \   0000001E   0xE005             B.N      ??SCProcessing_0
   3149            {
   3150              TripPointPos[i] = 0;	
   \                     ??SCProcessing_1: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable31_2
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x5460             STRB     R0,[R4, R1]
   3151            }
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCProcessing_0: (+1)
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2C64             CMP      R4,#+100
   \   00000030   0xDBF6             BLT.N    ??SCProcessing_1
   3152            TripPointCount=0;
   \   00000032   0x2600             MOVS     R6,#+0
   3153            //根据跳变分段
   3154            for (i = 0;i < RowMax;i++)
   \   00000034   0x2400             MOVS     R4,#+0
   \   00000036   0xE029             B.N      ??SCProcessing_2
   3155            {
   3156              // 相邻中心点做差，找出中心线跳变处,进行分段处理
   3157              if (i > 0){
   \                     ??SCProcessing_3: (+1)
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x2C00             CMP      R4,#+0
   \   0000003C   0xD025             BEQ.N    ??SCProcessing_4
   3158                SubValue[i] = LeftBlack[i] - LeftBlack[i-1];
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable29
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000052   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000056   0x1A40             SUBS     R0,R0,R1
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable31_3
   \   0000005C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005E   0x5460             STRB     R0,[R4, R1]
   3159                //跳变判断
   3160                if (fabss(SubValue[i]) > TripLen || LeftBlack[i] <2){
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable31_3
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x5620             LDRSB    R0,[R4, R0]
   \   00000068   0x.... 0x....      BL       `fabss`
   \   0000006C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006E   0x4287             CMP      R7,R0
   \   00000070   0xDB06             BLT.N    ??SCProcessing_5
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000007C   0x2802             CMP      R0,#+2
   \   0000007E   0xDA04             BGE.N    ??SCProcessing_4
   3161                  //记录跳变位置（行标）
   3162                  TripPointPos[TripPointCount] = i;
   \                     ??SCProcessing_5: (+1)
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable31_2
   \   00000084   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000086   0x5434             STRB     R4,[R6, R0]
   3163                  TripPointCount++;	
   \   00000088   0x1C76             ADDS     R6,R6,#+1
   3164                }
   3165              }	
   3166            }//for结束 
   \                     ??SCProcessing_4: (+1)
   \   0000008A   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCProcessing_2: (+1)
   \   0000008C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008E   0x2C64             CMP      R4,#+100
   \   00000090   0xDBD2             BLT.N    ??SCProcessing_3
   3167            TripPointPos[TripPointCount] = RowMax;
   \   00000092   0x2064             MOVS     R0,#+100
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable31_2
   \   00000098   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009A   0x5470             STRB     R0,[R6, R1]
   3168            temCount = 0;
   \   0000009C   0x2300             MOVS     R3,#+0
   3169            countMax=0;
   \   0000009E   0x2000             MOVS     R0,#+0
   3170            temPos = TripPointPos[0]-1;
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable31_2
   \   000000A4   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   000000A8   0xF1B1 0x0C01      SUBS     R12,R1,#+1
   3171            startPos = temPos;
   \   000000AC   0x4661             MOV      R1,R12
   3172            endPos = 0;
   \   000000AE   0x2200             MOVS     R2,#+0
   3173            for (i = 1;i < TripPointCount;i++)
   \   000000B0   0x2401             MOVS     R4,#+1
   \   000000B2   0xE007             B.N      ??SCProcessing_6
   3174            {
   3175              // 			str.Format("TripPointPos:%d \r\n",TripPointPos[i]);
   3176              // 			fprintf(pfile,str);
   3177              if (TripPointPos[i]-TripPointPos[i-1] < 3)
   3178              {
   3179                temCount++;
   3180                if (temCount > countMax)
   3181                {
   3182                  countMax = temCount;
   3183                  startPos = temPos;
   3184                  endPos = TripPointPos[i]+1;
   3185                }
   3186              }
   3187              else /*if(LeftBlack[TripPointPos[i-1]]-LeftBlack[TripPointPos[i]]>15&&TripPointPos[i]>10)
   3188              {
   3189                temPos = TripPointPos[i]-1;
   3190                startPos = temPos;
   3191            }
   3192                          else */ 
   3193              {
   3194                temPos = TripPointPos[i]-1;
   \                     ??SCProcessing_7: (+1)
   \   000000B4   0x.... 0x....      LDR.W    R3,??DataTable31_2
   \   000000B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BA   0x56E3             LDRSB    R3,[R4, R3]
   \   000000BC   0xF1B3 0x0C01      SUBS     R12,R3,#+1
   3195                temCount=0;
   \   000000C0   0x2300             MOVS     R3,#+0
   3196              }
   \                     ??SCProcessing_8: (+1)
   \   000000C2   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCProcessing_6: (+1)
   \   000000C4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C8   0x42B4             CMP      R4,R6
   \   000000CA   0xD21B             BCS.N    ??SCProcessing_9
   \   000000CC   0x.... 0x....      LDR.W    LR,??DataTable31_2
   \   000000D0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D2   0xF914 0xE00E      LDRSB    LR,[R4, LR]
   \   000000D6   0x.... 0x....      LDR.W    R8,??DataTable31_2
   \   000000DA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DC   0xEB14 0x0808      ADDS     R8,R4,R8
   \   000000E0   0xF918 0x8C01      LDRSB    R8,[R8, #-1]
   \   000000E4   0xEBBE 0x0E08      SUBS     LR,LR,R8
   \   000000E8   0xF1BE 0x0F03      CMP      LR,#+3
   \   000000EC   0xDAE2             BGE.N    ??SCProcessing_7
   \   000000EE   0x1C5B             ADDS     R3,R3,#+1
   \   000000F0   0x4298             CMP      R0,R3
   \   000000F2   0xDAE6             BGE.N    ??SCProcessing_8
   \   000000F4   0x0018             MOVS     R0,R3
   \   000000F6   0x4661             MOV      R1,R12
   \   000000F8   0x.... 0x....      LDR.W    R2,??DataTable31_2
   \   000000FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000FE   0x56A2             LDRSB    R2,[R4, R2]
   \   00000100   0x1C52             ADDS     R2,R2,#+1
   \   00000102   0xE7DE             B.N      ??SCProcessing_8
   3197            }//End for
   3198            // 	str.Format("startPos:%d endPos:%d \r\n",startPos,endPos);
   3199            // 	fprintf(pfile,str);
   3200            if (startPos > 10/* &&startPos> endline*/)
   \                     ??SCProcessing_9: (+1)
   \   00000104   0x290B             CMP      R1,#+11
   \   00000106   0xDB06             BLT.N    ??SCProcessing_10
   3201            {
   3202              CommonRectificate(&LeftBlack[0],startPos,endPos);
   \   00000108   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000010A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000110   0x.... 0x....      BL       CommonRectificate
   3203              ProcessFlag=1;
   \   00000114   0x2501             MOVS     R5,#+1
   3204            }
   3205            
   3206            //	if(endPos != 0 && endPos < 35)
   3207            //	{
   3208            //		LCrossingTripPos = endPos+5;
   3209            //	}
   3210            
   3211            //右边缘补线
   3212            for (i = 0;i < RowMax;i++)
   \                     ??SCProcessing_10: (+1)
   \   00000116   0x2400             MOVS     R4,#+0
   \   00000118   0xE005             B.N      ??SCProcessing_11
   3213            {
   3214              TripPointPos[i] = 0;	
   \                     ??SCProcessing_12: (+1)
   \   0000011A   0x2000             MOVS     R0,#+0
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable31_2
   \   00000120   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000122   0x5460             STRB     R0,[R4, R1]
   3215            }
   \   00000124   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCProcessing_11: (+1)
   \   00000126   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000128   0x2C64             CMP      R4,#+100
   \   0000012A   0xDBF6             BLT.N    ??SCProcessing_12
   3216            TripPointCount=0;
   \   0000012C   0x2600             MOVS     R6,#+0
   3217            //根据跳变分段
   3218            for (i = 1;i < RowMax;i++)
   \   0000012E   0x2401             MOVS     R4,#+1
   \   00000130   0xE029             B.N      ??SCProcessing_13
   3219            {
   3220              // 相邻中心点做差，找出中心线跳变处,进行分段处理
   3221              if (i > 0){
   \                     ??SCProcessing_14: (+1)
   \   00000132   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000134   0x2C00             CMP      R4,#+0
   \   00000136   0xD025             BEQ.N    ??SCProcessing_15
   3222                SubValue[i] = RightBlack[i] - RightBlack[i-1];
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   0000013C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000142   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   00000146   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000148   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000014C   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   00000150   0x1A40             SUBS     R0,R0,R1
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable31_3
   \   00000156   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000158   0x5460             STRB     R0,[R4, R1]
   3223                //跳变判断
   3224                if (fabss(SubValue[i]) > TripLen || RightBlack[i] > (ColumnMax-3)){
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable31_3
   \   0000015E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000160   0x5620             LDRSB    R0,[R4, R0]
   \   00000162   0x.... 0x....      BL       `fabss`
   \   00000166   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000168   0x4287             CMP      R7,R0
   \   0000016A   0xDB06             BLT.N    ??SCProcessing_16
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000170   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000172   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000176   0x2858             CMP      R0,#+88
   \   00000178   0xDB04             BLT.N    ??SCProcessing_15
   3225                  //记录跳变位置（行标）
   3226                  TripPointPos[TripPointCount] = i;
   \                     ??SCProcessing_16: (+1)
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable31_2
   \   0000017E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000180   0x5434             STRB     R4,[R6, R0]
   3227                  TripPointCount++;	
   \   00000182   0x1C76             ADDS     R6,R6,#+1
   3228                }
   3229              }	
   3230            }//for结束 
   \                     ??SCProcessing_15: (+1)
   \   00000184   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCProcessing_13: (+1)
   \   00000186   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000188   0x2C64             CMP      R4,#+100
   \   0000018A   0xDBD2             BLT.N    ??SCProcessing_14
   3231            // 		str.Format("TripPointCount:%d \r\n",TripPointCount);
   3232            // 		fprintf(pfile,str);
   3233            TripPointPos[TripPointCount] = RowMax;
   \   0000018C   0x2064             MOVS     R0,#+100
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable31_2
   \   00000192   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000194   0x5470             STRB     R0,[R6, R1]
   3234            temCount = 0;
   \   00000196   0x2300             MOVS     R3,#+0
   3235            countMax=0;
   \   00000198   0x2000             MOVS     R0,#+0
   3236            
   3237            endPos = 0;
   \   0000019A   0x2200             MOVS     R2,#+0
   3238            temPos = TripPointPos[0]-1;	
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable31_2
   \   000001A0   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   000001A4   0xF1B1 0x0C01      SUBS     R12,R1,#+1
   3239            startPos = temPos;
   \   000001A8   0x4661             MOV      R1,R12
   3240            for (i = 0;i < TripPointCount;i++)
   \   000001AA   0x2400             MOVS     R4,#+0
   \   000001AC   0xE007             B.N      ??SCProcessing_17
   3241            {
   3242              // 			str.Format("TripPointPos1:%d  \r\n",TripPointPos[i]);
   3243              // 			fprintf(pfile,str);
   3244              if (TripPointPos[i]-TripPointPos[i-1] < 3)
   3245              {
   3246                temCount++;
   3247                if (temCount > countMax)
   3248                {
   3249                  countMax = temCount;
   3250                  startPos = temPos;
   3251                  endPos = TripPointPos[i]+1;
   3252                }
   3253              }
   3254              else  /*if(RightBlack[TripPointPos[i]]-RightBlack[TripPointPos[i-1]]>15&&TripPointPos[i]>10)
   3255              {
   3256                temPos = TripPointPos[i]-1;
   3257                startPos = temPos;
   3258            }
   3259                          else */ 
   3260              {
   3261                temPos = TripPointPos[i]-1;
   \                     ??SCProcessing_18: (+1)
   \   000001AE   0x.... 0x....      LDR.W    R3,??DataTable31_2
   \   000001B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B4   0x56E3             LDRSB    R3,[R4, R3]
   \   000001B6   0xF1B3 0x0C01      SUBS     R12,R3,#+1
   3262                temCount=0;
   \   000001BA   0x2300             MOVS     R3,#+0
   3263              }
   \                     ??SCProcessing_19: (+1)
   \   000001BC   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCProcessing_17: (+1)
   \   000001BE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001C0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001C2   0x42B4             CMP      R4,R6
   \   000001C4   0xD219             BCS.N    ??SCProcessing_20
   \   000001C6   0x.... 0x....      LDR.W    R7,??DataTable31_2
   \   000001CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001CC   0x57E7             LDRSB    R7,[R4, R7]
   \   000001CE   0x.... 0x....      LDR.W    LR,??DataTable31_2
   \   000001D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D4   0xEB14 0x0E0E      ADDS     LR,R4,LR
   \   000001D8   0xF91E 0xEC01      LDRSB    LR,[LR, #-1]
   \   000001DC   0xEBB7 0x070E      SUBS     R7,R7,LR
   \   000001E0   0x2F03             CMP      R7,#+3
   \   000001E2   0xDAE4             BGE.N    ??SCProcessing_18
   \   000001E4   0x1C5B             ADDS     R3,R3,#+1
   \   000001E6   0x4298             CMP      R0,R3
   \   000001E8   0xDAE8             BGE.N    ??SCProcessing_19
   \   000001EA   0x0018             MOVS     R0,R3
   \   000001EC   0x4661             MOV      R1,R12
   \   000001EE   0x.... 0x....      LDR.W    R2,??DataTable31_2
   \   000001F2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001F4   0x56A2             LDRSB    R2,[R4, R2]
   \   000001F6   0x1C52             ADDS     R2,R2,#+1
   \   000001F8   0xE7E0             B.N      ??SCProcessing_19
   3264              
   3265            }//End for
   3266            // 	str.Format("startPos1:%d endPos1:%d \r\n",startPos,endPos);
   3267            // 	fprintf(pfile,str);
   3268            if (startPos > 10/*&&startPos> endline*/)
   \                     ??SCProcessing_20: (+1)
   \   000001FA   0x290B             CMP      R1,#+11
   \   000001FC   0xDB06             BLT.N    ??SCProcessing_21
   3269            {
   3270              //拟合右边缘
   3271              CommonRectificate(&RightBlack[0],startPos,endPos);
   \   000001FE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000200   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000202   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000206   0x.... 0x....      BL       CommonRectificate
   3272              ProcessFlag=1;
   \   0000020A   0x2501             MOVS     R5,#+1
   3273            }
   3274            
   3275            //	if(endPos < 35)
   3276            //	{
   3277            //		if( endPos > LCrossingTripPos)
   3278            //		{
   3279            //			LCrossingTripPos = endPos+5;
   3280            //		} 
   3281            //	}
   3282            if(!ProcessFlag)
   \                     ??SCProcessing_21: (+1)
   \   0000020C   0x2D00             CMP      R5,#+0
   \   0000020E   0xD103             BNE.N    ??SCProcessing_22
   3283            {
   3284              IsCrossing = 0;	
   \   00000210   0x2000             MOVS     R0,#+0
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable31_4
   \   00000216   0x7008             STRB     R0,[R1, #+0]
   3285            }
   3286          }
   \                     ??SCProcessing_22: (+1)
   \   00000218   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3287          
   3288          

   \                                 In section .text, align 2, keep-with-next
   3289          void ProcessCrossing()
   3290          {
   \                     ProcessCrossing: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   3291            char i = 0,iStart= RowMax - StableNumbers -1,iEnd = RowMax-1;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable31_5
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF1D0 0x0063      RSBS     R0,R0,#+99
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000014   0x2563             MOVS     R5,#+99
   3292            unsigned char iCount=0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3293            unsigned char TripPos = 0,pos = 0;
   \   0000001C   0x2600             MOVS     R6,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   3294            unsigned char Count1 = 0,Count2=0;
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0xF05F 0x0C00      MOVS     R12,#+0
   3295            unsigned char tem0 = 0,tem1=0;
   \   00000026   0x2700             MOVS     R7,#+0
   \   00000028   0xF05F 0x0800      MOVS     R8,#+0
   3296            int startPos=0,endPos=0;
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x2200             MOVS     R2,#+0
   3297            unsigned char ProcessFlag = 0;
   \   00000030   0xF05F 0x0900      MOVS     R9,#+0
   3298            endline = RowMax-1;
   \   00000034   0xF05F 0x0E63      MOVS     LR,#+99
   \   00000038   0x.... 0x....      LDR.W    R10,??DataTable31_6
   \   0000003C   0xF88A 0xE000      STRB     LR,[R10, #+0]
   3299            LCrossingTripPos = 0;
   \   00000040   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000044   0x.... 0x....      LDR.W    R10,??DataTable31_7
   \   00000048   0xF8CA 0xE000      STR      LR,[R10, #+0]
   3300            RCrossingTripPos = 0;
   \   0000004C   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000050   0x.... 0x....      LDR.W    R10,??DataTable31_8
   \   00000054   0xF8CA 0xE000      STR      LR,[R10, #+0]
   3301            int cross_icount=0;
   \   00000058   0xF05F 0x0A00      MOVS     R10,#+0
   3302            bFoundTripPoint = 0;
   \   0000005C   0xF05F 0x0E00      MOVS     LR,#+0
   \   00000060   0x.... 0x....      LDR.W    R11,??DataTable31_9
   \   00000064   0xF88B 0xE000      STRB     LR,[R11, #+0]
   3303            /*if (iStart < 5)
   3304            {
   3305            iStart = 5;
   3306          }
   3307            for (i =  RowMax-6;i >= 0;i--)
   3308            {
   3309            
   3310            if(LineType[i] == 1 )
   3311            {
   3312            endline = i;
   3313            break;
   3314          }
   3315                    else if(LineType[i] == 2&&ValidLine[i]!=3)
   3316            {
   3317            iCount++;
   3318          }
   3319          }
   3320            if (iCount > 5 )
   3321            {
   3322            
   3323            IsCrossing = 1;
   3324            
   3325            
   3326          }
   3327                  else
   3328            {
   3329            IsCrossing = 0;
   3330            return;
   3331          }*/
   3332            
   3333            
   3334            
   3335            
   3336            if (iStart < 5)
   \   00000068   0xF89D 0xE000      LDRB     LR,[SP, #+0]
   \   0000006C   0xF1BE 0x0F05      CMP      LR,#+5
   \   00000070   0xDA02             BGE.N    ??ProcessCrossing_0
   3337            {
   3338              iStart = 5;
   \   00000072   0x2005             MOVS     R0,#+5
   \   00000074   0xF88D 0x0000      STRB     R0,[SP, #+0]
   3339            } 
   3340            if (fs==5)   LPLD_UART_PutCharArr(UART4,"开发",4);
   \                     ??ProcessCrossing_0: (+1)
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable31_10
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable31_11  ;; 0x40a00000
   \   00000082   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000086   0xD106             BNE.N    ??ProcessCrossing_1
   \   00000088   0x2204             MOVS     R2,#+4
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable31_12
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable31_13  ;; 0x400ea000
   \   00000092   0x.... 0x....      BL       LPLD_UART_PutCharArr
   3341            for (i = iStart;i < iEnd;i++)
   \                     ??ProcessCrossing_1: (+1)
   \   00000096   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   \   0000009A   0xE037             B.N      ??ProcessCrossing_2
   3342            {
   3343              tem0 = RightBlack[i]>ColumnMax-1 ? ColumnMax-1:RightBlack[i];
   3344              tem1 = LeftBlack[i] < 0 ? 0:LeftBlack[i];
   \                     ??ProcessCrossing_3: (+1)
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000000A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A2   0xF850 0x8024      LDR      R8,[R0, R4, LSL #+2]
   3345              if (fs==5){ 
   \                     ??ProcessCrossing_4: (+1)
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable31_10
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable31_11  ;; 0x40a00000
   \   000000B0   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000000B4   0xD118             BNE.N    ??ProcessCrossing_5
   3346                FloatToChar(tem0 - tem1,sa);    
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable31_14
   \   000000BA   0x468B             MOV      R11,R1
   \   000000BC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000C2   0xEBB7 0x0008      SUBS     R0,R7,R8
   \   000000C6   0x.... 0x....      BL       __aeabi_i2f
   \   000000CA   0x4659             MOV      R1,R11
   \   000000CC   0x.... 0x....      BL       FloatToChar
   3347                LPLD_UART_PutChar(UART4,'#');	
   \   000000D0   0x2123             MOVS     R1,#+35
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable31_13  ;; 0x400ea000
   \   000000D6   0x.... 0x....      BL       LPLD_UART_PutChar
   3348                LPLD_UART_PutCharArr(UART4,sa,4);
   \   000000DA   0x2204             MOVS     R2,#+4
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable31_14
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable31_13  ;; 0x400ea000
   \   000000E4   0x.... 0x....      BL       LPLD_UART_PutCharArr
   3349              }	
   3350              if (tem0 - tem1 > ColumnMax-5 )
   \                     ??ProcessCrossing_5: (+1)
   \   000000E8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000EA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000EE   0xEBB7 0x0008      SUBS     R0,R7,R8
   \   000000F2   0x2856             CMP      R0,#+86
   \   000000F4   0xDB01             BLT.N    ??ProcessCrossing_6
   3351              {
   3352                cross_icount++;
   \   000000F6   0xF11A 0x0A01      ADDS     R10,R10,#+1
   3353              }
   3354              if  (LineType[i] == 1)
   \                     ??ProcessCrossing_6: (+1)
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable31_15
   \   000000FE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000100   0x5C20             LDRB     R0,[R4, R0]
   \   00000102   0x2801             CMP      R0,#+1
   \   00000104   0xD101             BNE.N    ??ProcessCrossing_7
   3355              {
   3356                cross_icount = 0;
   \   00000106   0xF05F 0x0A00      MOVS     R10,#+0
   3357                
   3358              }
   \                     ??ProcessCrossing_7: (+1)
   \   0000010A   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_2: (+1)
   \   0000010C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000010E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000110   0x42AC             CMP      R4,R5
   \   00000112   0xD217             BCS.N    ??ProcessCrossing_8
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000118   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000011E   0x285A             CMP      R0,#+90
   \   00000120   0xDB01             BLT.N    ??ProcessCrossing_9
   \   00000122   0x2759             MOVS     R7,#+89
   \   00000124   0xE004             B.N      ??ProcessCrossing_10
   \                     ??ProcessCrossing_9: (+1)
   \   00000126   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   0000012A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012C   0xF850 0x7024      LDR      R7,[R0, R4, LSL #+2]
   \                     ??ProcessCrossing_10: (+1)
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000134   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000136   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD5AE             BPL.N    ??ProcessCrossing_3
   \   0000013E   0xF05F 0x0800      MOVS     R8,#+0
   \   00000142   0xE7B0             B.N      ??ProcessCrossing_4
   3359              // else
   3360              //  {
   3361              //break;
   3362              //}
   3363            }
   3364            // 	str.Format("ICOUNT:%d g_Derict%d \r\n",iCount,g_Derict);
   3365            // 	fprintf(pfile,str);
   3366            
   3367            // 	str.Format("iStart:%d iEnd:%d \r\n",iStart,iEnd);
   3368            // 	fprintf(pfile,str);
   3369            
   3370            
   3371            
   3372            if (cross_icount > 10&&(StableNumbers>40||BlackEndL>40||BlackEndR>40))
   \                     ??ProcessCrossing_8: (+1)
   \   00000144   0xF1BA 0x0F0B      CMP      R10,#+11
   \   00000148   0xDB26             BLT.N    ??ProcessCrossing_11
   \   0000014A   0x.... 0x....      LDR.W    R0,??DataTable31_5
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0x2829             CMP      R0,#+41
   \   00000152   0xDA09             BGE.N    ??ProcessCrossing_12
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable31_16
   \   00000158   0x6800             LDR      R0,[R0, #+0]
   \   0000015A   0x2829             CMP      R0,#+41
   \   0000015C   0xDA04             BGE.N    ??ProcessCrossing_12
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable31_17
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0x2829             CMP      R0,#+41
   \   00000166   0xDB17             BLT.N    ??ProcessCrossing_11
   3373            {
   3374              // 		str.Format("十字处理\r\n");
   3375              // 		fprintf(pfile,str);
   3376              IsCrossing = 1;
   \                     ??ProcessCrossing_12: (+1)
   \   00000168   0x2001             MOVS     R0,#+1
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable31_4
   \   0000016E   0x7008             STRB     R0,[R1, #+0]
   3377            }
   3378            else
   3379            {
   3380              if (NoValidMax > 10&&WhiteRow>10&&(StableNumbers>40||BlackEndL>40||BlackEndR>40))
   3381              {
   3382                IsCrossing = 1;
   3383                // 			str.Format("十字处理2\r\n");
   3384                // 			fprintf(pfile,str);
   3385                if (ValidLine[RowMax-3] == 0)
   3386                {
   3387                  //				SmoothLeftRight();
   3388                  //当做正十字处理
   3389                  SCProcessing();
   3390                  return;
   3391                }
   3392                else
   3393                {
   3394                  //当做正十字处理
   3395                  SCProcessing();
   3396                  return;
   3397                }
   3398              }
   3399              else
   3400              {
   3401                IsCrossing = 0;
   3402                return;
   3403              }
   3404            }
   3405            
   3406            
   3407            
   3408            if(IsCrossing)
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable31_4
   \   00000174   0x7800             LDRB     R0,[R0, #+0]
   \   00000176   0x2800             CMP      R0,#+0
   \   00000178   0xD13C             BNE.N    ??ProcessCrossing_13
   3409            {	
   3410              SCProcessing();
   3411              return;
   3412            }
   3413          #if   1
   3414            //右倾找左边缘跳变
   3415            if (IsCrossing && g_Derict == 2)
   \   0000017A   0x.... 0x....      LDR.W    R0,??DataTable31_4
   \   0000017E   0x7800             LDRB     R0,[R0, #+0]
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xF000 0x80ED      BEQ.W    ??ProcessCrossing_14
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable31_18
   \   0000018A   0x7800             LDRB     R0,[R0, #+0]
   \   0000018C   0x2802             CMP      R0,#+2
   \   0000018E   0xF040 0x80E7      BNE.W    ??ProcessCrossing_14
   3416            {
   3417              // 		str.Format("右倾十字对左边缘处理\r\n");
   3418              // 		fprintf(pfile,str);
   3419              
   3420              i = iStart;
   \   00000192   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   \   00000196   0xE031             B.N      ??ProcessCrossing_15
   \                     ??ProcessCrossing_11: (+1)
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable31_19
   \   0000019C   0x6800             LDR      R0,[R0, #+0]
   \   0000019E   0x280B             CMP      R0,#+11
   \   000001A0   0xDB23             BLT.N    ??ProcessCrossing_16
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable31_20
   \   000001A6   0x7800             LDRB     R0,[R0, #+0]
   \   000001A8   0x280B             CMP      R0,#+11
   \   000001AA   0xDB1E             BLT.N    ??ProcessCrossing_16
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable31_5
   \   000001B0   0x6800             LDR      R0,[R0, #+0]
   \   000001B2   0x2829             CMP      R0,#+41
   \   000001B4   0xDA09             BGE.N    ??ProcessCrossing_17
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable31_16
   \   000001BA   0x6800             LDR      R0,[R0, #+0]
   \   000001BC   0x2829             CMP      R0,#+41
   \   000001BE   0xDA04             BGE.N    ??ProcessCrossing_17
   \   000001C0   0x.... 0x....      LDR.W    R0,??DataTable31_17
   \   000001C4   0x6800             LDR      R0,[R0, #+0]
   \   000001C6   0x2829             CMP      R0,#+41
   \   000001C8   0xDB0F             BLT.N    ??ProcessCrossing_16
   \                     ??ProcessCrossing_17: (+1)
   \   000001CA   0x2001             MOVS     R0,#+1
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable31_4
   \   000001D0   0x7008             STRB     R0,[R1, #+0]
   \   000001D2   0x.... 0x....      LDR.W    R0,??DataTable31_21
   \   000001D6   0xF890 0x0061      LDRB     R0,[R0, #+97]
   \   000001DA   0x2800             CMP      R0,#+0
   \   000001DC   0xD102             BNE.N    ??ProcessCrossing_18
   \   000001DE   0x.... 0x....      BL       SCProcessing
   \   000001E2   0xE2F3             B.N      ??ProcessCrossing_19
   \                     ??ProcessCrossing_18: (+1)
   \   000001E4   0x.... 0x....      BL       SCProcessing
   \   000001E8   0xE2F0             B.N      ??ProcessCrossing_19
   \                     ??ProcessCrossing_16: (+1)
   \   000001EA   0x2000             MOVS     R0,#+0
   \   000001EC   0x.... 0x....      LDR.W    R1,??DataTable31_4
   \   000001F0   0x7008             STRB     R0,[R1, #+0]
   \   000001F2   0xE2EB             B.N      ??ProcessCrossing_19
   \                     ??ProcessCrossing_13: (+1)
   \   000001F4   0x.... 0x....      BL       SCProcessing
   \   000001F8   0xE2E8             B.N      ??ProcessCrossing_19
   3421              while (i < iEnd && LeftBlack[i] - LeftBlack[i+1] == 0){i++;}
   \                     ??ProcessCrossing_20: (+1)
   \   000001FA   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_15: (+1)
   \   000001FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000200   0x42AC             CMP      R4,R5
   \   00000202   0xD20D             BCS.N    ??ProcessCrossing_21
   \   00000204   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000208   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000020A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000212   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000214   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000218   0x6849             LDR      R1,[R1, #+4]
   \   0000021A   0x1A40             SUBS     R0,R0,R1
   \   0000021C   0x2800             CMP      R0,#+0
   \   0000021E   0xD0EC             BEQ.N    ??ProcessCrossing_20
   3422              // 		str.Format("抵达:%d %d\r\n",i,LeftBlack[i]-LeftBlack[i+1]);
   3423              // 		fprintf(pfile,str);
   3424              Count1=0;
   \                     ??ProcessCrossing_21: (+1)
   \   00000220   0x2300             MOVS     R3,#+0
   3425              Count2=0;
   \   00000222   0xF05F 0x0C00      MOVS     R12,#+0
   3426              if (LeftBlack[i]-LeftBlack[i+1] > 0)
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable29
   \   0000022A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000022C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000230   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000234   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000236   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000023A   0x6849             LDR      R1,[R1, #+4]
   \   0000023C   0x1A40             SUBS     R0,R0,R1
   \   0000023E   0x2801             CMP      R0,#+1
   \   00000240   0xDB47             BLT.N    ??ProcessCrossing_22
   3427              {
   3428                Count1++;
   \   00000242   0x1C5B             ADDS     R3,R3,#+1
   3429                i++;
   \   00000244   0x1C64             ADDS     R4,R4,#+1
   \   00000246   0xE017             B.N      ??ProcessCrossing_23
   3430                for (;i < iEnd;i++)
   3431                {
   3432                  if (LeftBlack[i]-LeftBlack[i+1] > 0)
   3433                  {
   3434                    Count1++;
   3435                    if (Count2 != 0)
   3436                    {
   3437                      Count1 = 1;
   3438                      Count2 = 0;
   3439                    }
   3440                  }
   3441                  else if (LeftBlack[i]-LeftBlack[i+1] < 0)
   \                     ??ProcessCrossing_24: (+1)
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable29
   \   0000024C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000024E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000252   0x.... 0x....      LDR.W    R1,??DataTable29
   \   00000256   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000258   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   0000025C   0x6849             LDR      R1,[R1, #+4]
   \   0000025E   0x1A40             SUBS     R0,R0,R1
   \   00000260   0x2800             CMP      R0,#+0
   \   00000262   0xD508             BPL.N    ??ProcessCrossing_25
   3442                  {
   3443                    if (Count1 > 2 && TripPos == 0)
   \   00000264   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000266   0x2B03             CMP      R3,#+3
   \   00000268   0xDB03             BLT.N    ??ProcessCrossing_26
   \   0000026A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000026C   0x2E00             CMP      R6,#+0
   \   0000026E   0xD100             BNE.N    ??ProcessCrossing_26
   3444                    {
   3445                      TripPos = i;
   \   00000270   0x0026             MOVS     R6,R4
   3446                    }
   3447                    Count2++;
   \                     ??ProcessCrossing_26: (+1)
   \   00000272   0xF11C 0x0C01      ADDS     R12,R12,#+1
   3448                  }
   \                     ??ProcessCrossing_25: (+1)
   \   00000276   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_23: (+1)
   \   00000278   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000027A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000027C   0x42AC             CMP      R4,R5
   \   0000027E   0xD217             BCS.N    ??ProcessCrossing_27
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000284   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000286   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000028A   0x.... 0x....      LDR.W    R1,??DataTable29
   \   0000028E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000290   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000294   0x6849             LDR      R1,[R1, #+4]
   \   00000296   0x1A40             SUBS     R0,R0,R1
   \   00000298   0x2801             CMP      R0,#+1
   \   0000029A   0xDBD5             BLT.N    ??ProcessCrossing_24
   \   0000029C   0x1C5B             ADDS     R3,R3,#+1
   \   0000029E   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000002A2   0xF1BC 0x0F00      CMP      R12,#+0
   \   000002A6   0xD0E6             BEQ.N    ??ProcessCrossing_25
   \   000002A8   0x2301             MOVS     R3,#+1
   \   000002AA   0xF05F 0x0C00      MOVS     R12,#+0
   \   000002AE   0xE7E2             B.N      ??ProcessCrossing_25
   3449                }
   3450                if (Count1 >2 && Count2 > 2)
   \                     ??ProcessCrossing_27: (+1)
   \   000002B0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002B2   0x2B03             CMP      R3,#+3
   \   000002B4   0xDB54             BLT.N    ??ProcessCrossing_14
   \   000002B6   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000002BA   0xF1BC 0x0F03      CMP      R12,#+3
   \   000002BE   0xDB4F             BLT.N    ??ProcessCrossing_14
   3451                {
   3452                  bFoundTripPoint = 1;
   \   000002C0   0x2001             MOVS     R0,#+1
   \   000002C2   0x.... 0x....      LDR.W    R1,??DataTable31_9
   \   000002C6   0x7008             STRB     R0,[R1, #+0]
   3453                  LCrossingTripPos = TripPos;//左边缘跳变点找到
   \   000002C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002CA   0x.... 0x....      LDR.W    R0,??DataTable31_7
   \   000002CE   0x6006             STR      R6,[R0, #+0]
   \   000002D0   0xE046             B.N      ??ProcessCrossing_14
   3454                }
   3455              }
   3456              else
   3457              {
   3458                Count1++;
   \                     ??ProcessCrossing_22: (+1)
   \   000002D2   0x1C5B             ADDS     R3,R3,#+1
   3459                i++;
   \   000002D4   0x1C64             ADDS     R4,R4,#+1
   \   000002D6   0xE017             B.N      ??ProcessCrossing_28
   3460                for (;i < iEnd;i++)
   3461                {
   3462                  if (LeftBlack[i]-LeftBlack[i+1] < 0)
   3463                  {
   3464                    Count1++;
   3465                    if (Count2 != 0)
   3466                    {
   3467                      Count1 = 1;
   3468                      Count2 = 0;
   3469                    }
   3470                  }
   3471                  else if (LeftBlack[i]-LeftBlack[i+1] > 0)
   \                     ??ProcessCrossing_29: (+1)
   \   000002D8   0x.... 0x....      LDR.W    R0,??DataTable29
   \   000002DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002DE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000002E2   0x.... 0x....      LDR.W    R1,??DataTable29
   \   000002E6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002E8   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000002EC   0x6849             LDR      R1,[R1, #+4]
   \   000002EE   0x1A40             SUBS     R0,R0,R1
   \   000002F0   0x2801             CMP      R0,#+1
   \   000002F2   0xDB08             BLT.N    ??ProcessCrossing_30
   3472                  {						
   3473                    if (Count1 >2 && TripPos == 0)
   \   000002F4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000002F6   0x2B03             CMP      R3,#+3
   \   000002F8   0xDB03             BLT.N    ??ProcessCrossing_31
   \   000002FA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002FC   0x2E00             CMP      R6,#+0
   \   000002FE   0xD100             BNE.N    ??ProcessCrossing_31
   3474                    {
   3475                      TripPos = i;
   \   00000300   0x0026             MOVS     R6,R4
   3476                    }
   3477                    Count2++;
   \                     ??ProcessCrossing_31: (+1)
   \   00000302   0xF11C 0x0C01      ADDS     R12,R12,#+1
   3478                  }
   \                     ??ProcessCrossing_30: (+1)
   \   00000306   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_28: (+1)
   \   00000308   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000030A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000030C   0x42AC             CMP      R4,R5
   \   0000030E   0xD217             BCS.N    ??ProcessCrossing_32
   \   00000310   0x.... 0x....      LDR.W    R0,??DataTable29
   \   00000314   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000316   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000031A   0x.... 0x....      LDR.W    R1,??DataTable29
   \   0000031E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000320   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000324   0x6849             LDR      R1,[R1, #+4]
   \   00000326   0x1A40             SUBS     R0,R0,R1
   \   00000328   0x2800             CMP      R0,#+0
   \   0000032A   0xD5D5             BPL.N    ??ProcessCrossing_29
   \   0000032C   0x1C5B             ADDS     R3,R3,#+1
   \   0000032E   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000332   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000336   0xD0E6             BEQ.N    ??ProcessCrossing_30
   \   00000338   0x2301             MOVS     R3,#+1
   \   0000033A   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000033E   0xE7E2             B.N      ??ProcessCrossing_30
   3479                }
   3480                if (Count1 >2 && Count2 > 2)
   \                     ??ProcessCrossing_32: (+1)
   \   00000340   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000342   0x2B03             CMP      R3,#+3
   \   00000344   0xDB0C             BLT.N    ??ProcessCrossing_14
   \   00000346   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000034A   0xF1BC 0x0F03      CMP      R12,#+3
   \   0000034E   0xDB07             BLT.N    ??ProcessCrossing_14
   3481                {
   3482                  bFoundTripPoint = 1;
   \   00000350   0x2001             MOVS     R0,#+1
   \   00000352   0x.... 0x....      LDR.W    R1,??DataTable31_9
   \   00000356   0x7008             STRB     R0,[R1, #+0]
   3483                  LCrossingTripPos = TripPos;//左边缘跳变点找到
   \   00000358   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000035A   0x.... 0x....      LDR.W    R0,??DataTable31_7
   \   0000035E   0x6006             STR      R6,[R0, #+0]
   3484                }
   3485              }
   3486            }
   3487            
   3488            ////左倾找右边缘跳变点
   3489            if (IsCrossing && g_Derict == 1)
   \                     ??ProcessCrossing_14: (+1)
   \   00000360   0x.... 0x....      LDR.W    R0,??DataTable31_4
   \   00000364   0x7800             LDRB     R0,[R0, #+0]
   \   00000366   0x2800             CMP      R0,#+0
   \   00000368   0xF000 0x80BC      BEQ.W    ??ProcessCrossing_33
   \   0000036C   0x.... 0x....      LDR.W    R0,??DataTable31_18
   \   00000370   0x7800             LDRB     R0,[R0, #+0]
   \   00000372   0x2801             CMP      R0,#+1
   \   00000374   0xF040 0x80B6      BNE.W    ??ProcessCrossing_33
   3490            {
   3491              // 		str.Format("左倾十字对右边缘处理\r\n");
   3492              // 		fprintf(pfile,str);
   3493              i = iStart;
   \   00000378   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   3494              Count1=0;
   \   0000037C   0x2300             MOVS     R3,#+0
   3495              Count2=0;
   \   0000037E   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000382   0xE000             B.N      ??ProcessCrossing_34
   3496              while (i < iEnd && RightBlack[i] - RightBlack[i+1] == 0){i++;}
   \                     ??ProcessCrossing_35: (+1)
   \   00000384   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_34: (+1)
   \   00000386   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000388   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000038A   0x42AC             CMP      R4,R5
   \   0000038C   0xD20D             BCS.N    ??ProcessCrossing_36
   \   0000038E   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000392   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000394   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000398   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   0000039C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000039E   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000003A2   0x6849             LDR      R1,[R1, #+4]
   \   000003A4   0x1A40             SUBS     R0,R0,R1
   \   000003A6   0x2800             CMP      R0,#+0
   \   000003A8   0xD0EC             BEQ.N    ??ProcessCrossing_35
   3497              // 		str.Format("抵达1:%d  %d\r\n",i,RightBlack[i]-RightBlack[i+1]);
   3498              // 		fprintf(pfile,str);
   3499              if (RightBlack[i]-RightBlack[i+1] > 0)
   \                     ??ProcessCrossing_36: (+1)
   \   000003AA   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   000003AE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003B0   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000003B4   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   000003B8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003BA   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000003BE   0x6849             LDR      R1,[R1, #+4]
   \   000003C0   0x1A40             SUBS     R0,R0,R1
   \   000003C2   0x2801             CMP      R0,#+1
   \   000003C4   0xDB47             BLT.N    ??ProcessCrossing_37
   3500              {
   3501                Count1++;
   \   000003C6   0x1C5B             ADDS     R3,R3,#+1
   3502                i++;
   \   000003C8   0x1C64             ADDS     R4,R4,#+1
   \   000003CA   0xE017             B.N      ??ProcessCrossing_38
   3503                for (;i < iEnd;i++)
   3504                {
   3505                  if (RightBlack[i]-RightBlack[i+1] > 0)
   3506                  {
   3507                    Count1++;
   3508                    if (Count2 != 0)
   3509                    {
   3510                      Count1 = 1;
   3511                      Count2 = 0;
   3512                    }
   3513                  }
   3514                  else if (RightBlack[i]-RightBlack[i+1] < 0)
   \                     ??ProcessCrossing_39: (+1)
   \   000003CC   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   000003D0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003D2   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000003D6   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   000003DA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003DC   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000003E0   0x6849             LDR      R1,[R1, #+4]
   \   000003E2   0x1A40             SUBS     R0,R0,R1
   \   000003E4   0x2800             CMP      R0,#+0
   \   000003E6   0xD508             BPL.N    ??ProcessCrossing_40
   3515                  {
   3516                    if (Count1 >2 && TripPos == 0)
   \   000003E8   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000003EA   0x2B03             CMP      R3,#+3
   \   000003EC   0xDB03             BLT.N    ??ProcessCrossing_41
   \   000003EE   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003F0   0x2E00             CMP      R6,#+0
   \   000003F2   0xD100             BNE.N    ??ProcessCrossing_41
   3517                    {
   3518                      TripPos = i;
   \   000003F4   0x0026             MOVS     R6,R4
   3519                      
   3520                    }
   3521                    Count2++;
   \                     ??ProcessCrossing_41: (+1)
   \   000003F6   0xF11C 0x0C01      ADDS     R12,R12,#+1
   3522                  }
   \                     ??ProcessCrossing_40: (+1)
   \   000003FA   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_38: (+1)
   \   000003FC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000003FE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000400   0x42AC             CMP      R4,R5
   \   00000402   0xD217             BCS.N    ??ProcessCrossing_42
   \   00000404   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000408   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000040A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000040E   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   00000412   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000414   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000418   0x6849             LDR      R1,[R1, #+4]
   \   0000041A   0x1A40             SUBS     R0,R0,R1
   \   0000041C   0x2801             CMP      R0,#+1
   \   0000041E   0xDBD5             BLT.N    ??ProcessCrossing_39
   \   00000420   0x1C5B             ADDS     R3,R3,#+1
   \   00000422   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000426   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000042A   0xD0E6             BEQ.N    ??ProcessCrossing_40
   \   0000042C   0x2301             MOVS     R3,#+1
   \   0000042E   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000432   0xE7E2             B.N      ??ProcessCrossing_40
   3523                }
   3524                if (Count1 > 2 && Count2 > 2)
   \                     ??ProcessCrossing_42: (+1)
   \   00000434   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000436   0x2B03             CMP      R3,#+3
   \   00000438   0xDB54             BLT.N    ??ProcessCrossing_33
   \   0000043A   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   0000043E   0xF1BC 0x0F03      CMP      R12,#+3
   \   00000442   0xDB4F             BLT.N    ??ProcessCrossing_33
   3525                {
   3526                  bFoundTripPoint = 1;
   \   00000444   0x2001             MOVS     R0,#+1
   \   00000446   0x.... 0x....      LDR.W    R1,??DataTable31_9
   \   0000044A   0x7008             STRB     R0,[R1, #+0]
   3527                  RCrossingTripPos = TripPos;//右边缘跳变点找到
   \   0000044C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000044E   0x.... 0x....      LDR.W    R0,??DataTable31_8
   \   00000452   0x6006             STR      R6,[R0, #+0]
   \   00000454   0xE046             B.N      ??ProcessCrossing_33
   3528                }
   3529              }
   3530              else
   3531              {
   3532                Count1++;
   \                     ??ProcessCrossing_37: (+1)
   \   00000456   0x1C5B             ADDS     R3,R3,#+1
   3533                i++;
   \   00000458   0x1C64             ADDS     R4,R4,#+1
   \   0000045A   0xE017             B.N      ??ProcessCrossing_43
   3534                for (;i < iEnd;i++)
   3535                {
   3536                  if (RightBlack[i]-RightBlack[i+1] < 0)
   3537                  {
   3538                    Count1++;
   3539                    if (Count2 != 0)
   3540                    {
   3541                      Count1 = 1;
   3542                      Count2 = 0;
   3543                    }
   3544                  }
   3545                  else if (RightBlack[i]-RightBlack[i+1] > 0)
   \                     ??ProcessCrossing_44: (+1)
   \   0000045C   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000460   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000462   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000466   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   0000046A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000046C   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000470   0x6849             LDR      R1,[R1, #+4]
   \   00000472   0x1A40             SUBS     R0,R0,R1
   \   00000474   0x2801             CMP      R0,#+1
   \   00000476   0xDB08             BLT.N    ??ProcessCrossing_45
   3546                  {
   3547                    if (Count1 > 2 && TripPos == 0)
   \   00000478   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000047A   0x2B03             CMP      R3,#+3
   \   0000047C   0xDB03             BLT.N    ??ProcessCrossing_46
   \   0000047E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000480   0x2E00             CMP      R6,#+0
   \   00000482   0xD100             BNE.N    ??ProcessCrossing_46
   3548                    {
   3549                      TripPos = i;
   \   00000484   0x0026             MOVS     R6,R4
   3550                      
   3551                    }
   3552                    Count2++;
   \                     ??ProcessCrossing_46: (+1)
   \   00000486   0xF11C 0x0C01      ADDS     R12,R12,#+1
   3553                  }
   \                     ??ProcessCrossing_45: (+1)
   \   0000048A   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_43: (+1)
   \   0000048C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000048E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000490   0x42AC             CMP      R4,R5
   \   00000492   0xD217             BCS.N    ??ProcessCrossing_47
   \   00000494   0x.... 0x....      LDR.W    R0,??DataTable29_1
   \   00000498   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000049A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000049E   0x.... 0x....      LDR.W    R1,??DataTable29_1
   \   000004A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004A4   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   000004A8   0x6849             LDR      R1,[R1, #+4]
   \   000004AA   0x1A40             SUBS     R0,R0,R1
   \   000004AC   0x2800             CMP      R0,#+0
   \   000004AE   0xD5D5             BPL.N    ??ProcessCrossing_44
   \   000004B0   0x1C5B             ADDS     R3,R3,#+1
   \   000004B2   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000004B6   0xF1BC 0x0F00      CMP      R12,#+0
   \   000004BA   0xD0E6             BEQ.N    ??ProcessCrossing_45
   \   000004BC   0x2301             MOVS     R3,#+1
   \   000004BE   0xF05F 0x0C00      MOVS     R12,#+0
   \   000004C2   0xE7E2             B.N      ??ProcessCrossing_45
   3554                }
   3555                if (Count1 > 2 && Count2 > 2)
   \                     ??ProcessCrossing_47: (+1)
   \   000004C4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000004C6   0x2B03             CMP      R3,#+3
   \   000004C8   0xDB0C             BLT.N    ??ProcessCrossing_33
   \   000004CA   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000004CE   0xF1BC 0x0F03      CMP      R12,#+3
   \   000004D2   0xDB07             BLT.N    ??ProcessCrossing_33
   3556                {
   3557                  bFoundTripPoint = 1;
   \   000004D4   0x2001             MOVS     R0,#+1
   \   000004D6   0x.... 0x....      LDR.W    R1,??DataTable31_9
   \   000004DA   0x7008             STRB     R0,[R1, #+0]
   3558                  RCrossingTripPos = TripPos;//右边缘跳变点找到
   \   000004DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004DE   0x.... 0x....      LDR.W    R0,??DataTable31_8
   \   000004E2   0x6006             STR      R6,[R0, #+0]
   3559                }
   3560              }
   3561            }
   3562            if (bFoundTripPoint)
   \                     ??ProcessCrossing_33: (+1)
   \   000004E4   0x.... 0x....      LDR.W    R0,??DataTable31_9
   \   000004E8   0x7800             LDRB     R0,[R0, #+0]
   \   000004EA   0x2800             CMP      R0,#+0
   \   000004EC   0xF000 0x8104      BEQ.W    ??ProcessCrossing_48
   3563            {
   3564              GetCrossingMidLine();//取十字的边缘线
   \   000004F0   0x.... 0x....      BL       GetCrossingMidLine
   3565              // 		str.Format("找到跳变点处理\r\n");
   3566              // 		fprintf(pfile,str);
   3567              // 		str.Format("跳变点:%d  %d  1:%d  2:%d\r\n",TripPos,RightBlack[TripPos],Count1,Count2);
   3568              // 		fprintf(pfile,str);
   3569              if (g_Derict == 1)//左倾
   \   000004F4   0x.... 0x....      LDR.W    R0,??DataTable31_18
   \   000004F8   0x7800             LDRB     R0,[R0, #+0]
   \   000004FA   0x2801             CMP      R0,#+1
   \   000004FC   0xD17D             BNE.N    ??ProcessCrossing_49
   3570              {
   3571                pos = TripPos-8;
   \   000004FE   0xF1B6 0x0008      SUBS     R0,R6,#+8
   \   00000502   0xE000             B.N      ??ProcessCrossing_50
   3572                while(pos > 0 && (ValidLineR[pos] == 0 || RightBlack[pos] > RightBlack[TripPos])){pos--;}
   \                     ??ProcessCrossing_51: (+1)
   \   00000504   0x1E40             SUBS     R0,R0,#+1
   \                     ??ProcessCrossing_50: (+1)
   \   00000506   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000508   0x2800             CMP      R0,#+0
   \   0000050A   0xD00F             BEQ.N    ??ProcessCrossing_52
   \   0000050C   0x.... 0x....      LDR.W    R1,??DataTable31_22
   \   00000510   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000512   0x5C41             LDRB     R1,[R0, R1]
   \   00000514   0x2900             CMP      R1,#+0
   \   00000516   0xD0F5             BEQ.N    ??ProcessCrossing_51
   \   00000518   0x....             LDR.N    R1,??DataTable29_1
   \   0000051A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000051C   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00000520   0x....             LDR.N    R2,??DataTable29_1
   \   00000522   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000524   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000528   0x4291             CMP      R1,R2
   \   0000052A   0xDBEB             BLT.N    ??ProcessCrossing_51
   3573                // 			str.Format("补偿起点:%d RightBlack[%d]=%d\r\n",pos-2,pos-2,RightBlack[pos-2]);
   3574                // 			fprintf(pfile,str);
   3575                // 			if (RowMax-CrossingStable > pos-2)
   3576                // 			{
   3577                // 				if (RightBlack[RowMax-CrossingStable] < RightBlack[TripPos])
   3578                // 				{
   3579                // 					//右边缘拟合
   3580                // 					CommonRectificate(&RightBlack[0],RowMax-CrossingStable,TripPos);
   3581                // 					ProcessFlag = 1;
   3582                // 				}
   3583                // 				else
   3584                // 				{
   3585                // 					for (i = 0;i < ColumnMax;i++)
   3586                // 					{
   3587                // 						if (ThresholdData[RowMax-CrossingStable][i] == White && ThresholdData[RowMax-CrossingStable][i+1] == Black)
   3588                // 						{
   3589                // 							pos = i;
   3590                // 							RightBlack[RowMax-CrossingStable]=i;
   3591                // 							break;
   3592                // 						}
   3593                // 					}
   3594                // 					if (RightBlack[RowMax-CrossingStable] < RightBlack[TripPos])
   3595                // 					{
   3596                // 						//右边缘拟合
   3597                // 						CommonRectificate(&RightBlack[0],RowMax-CrossingStable,TripPos);
   3598                // 						ProcessFlag = 1;
   3599                // 					}
   3600                // 					else
   3601                // 					{
   3602                // 						RightBlack[RowMax-CrossingStable]=1;
   3603                // 						//右边缘拟合
   3604                // 						CommonRectificate(&RightBlack[0],RowMax-CrossingStable,TripPos);
   3605                // 						ProcessFlag = 1;
   3606                // 					}
   3607                // 				}
   3608                // 			}
   3609                // 			else 
   3610                if (RightBlack[pos-2] < RightBlack[TripPos]/*&&TripPos-(pos-2)<30*/)//拟合起点合理，可以进行拟合
   \                     ??ProcessCrossing_52: (+1)
   \   0000052C   0x....             LDR.N    R1,??DataTable29_1
   \   0000052E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000530   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000534   0xF851 0x1C08      LDR      R1,[R1, #-8]
   \   00000538   0x....             LDR.N    R2,??DataTable29_1
   \   0000053A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000053C   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   00000540   0x4291             CMP      R1,R2
   \   00000542   0xDA09             BGE.N    ??ProcessCrossing_53
   3611                {
   3612                  //右边缘拟合
   3613                  CommonRectificate(&RightBlack[0],pos-2,TripPos);
   \   00000544   0x0032             MOVS     R2,R6
   \   00000546   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000548   0x1E81             SUBS     R1,R0,#+2
   \   0000054A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000054C   0x....             LDR.N    R0,??DataTable29_1
   \   0000054E   0x.... 0x....      BL       CommonRectificate
   3614                  ProcessFlag = 1;
   \   00000552   0xF05F 0x0901      MOVS     R9,#+1
   \   00000556   0xE130             B.N      ??ProcessCrossing_54
   3615                }
   3616                else
   3617                {
   3618                  //进行另一种方式拟合
   3619                  for (i = 0;i < ColumnMax;i++)
   \                     ??ProcessCrossing_53: (+1)
   \   00000558   0x2400             MOVS     R4,#+0
   \   0000055A   0xE000             B.N      ??ProcessCrossing_55
   \                     ??ProcessCrossing_56: (+1)
   \   0000055C   0x1C64             ADDS     R4,R4,#+1
   \                     ??ProcessCrossing_55: (+1)
   \   0000055E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000560   0x2C5A             CMP      R4,#+90
   \   00000562   0xDA1E             BGE.N    ??ProcessCrossing_57
   3620                  {
   3621                    if (ThresholdData[pos-2][i] == White && ThresholdData[pos-2][i+1] == Black)
   \   00000564   0x.... 0x....      LDR.W    R1,??DataTable31_23
   \   00000568   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000056A   0x225A             MOVS     R2,#+90
   \   0000056C   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   00000570   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000572   0x1861             ADDS     R1,R4,R1
   \   00000574   0xF811 0x1CB4      LDRB     R1,[R1, #-180]
   \   00000578   0x29C8             CMP      R1,#+200
   \   0000057A   0xD1EF             BNE.N    ??ProcessCrossing_56
   \   0000057C   0x.... 0x....      LDR.W    R1,??DataTable31_23
   \   00000580   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000582   0x225A             MOVS     R2,#+90
   \   00000584   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   00000588   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000058A   0x1861             ADDS     R1,R4,R1
   \   0000058C   0xF811 0x1CB3      LDRB     R1,[R1, #-179]
   \   00000590   0x291E             CMP      R1,#+30
   \   00000592   0xD1E3             BNE.N    ??ProcessCrossing_56
   3622                    {
   3623                      RightBlack[pos-2]=i;
   \   00000594   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000596   0x....             LDR.N    R1,??DataTable29_1
   \   00000598   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000059A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000059E   0xF841 0x4C08      STR      R4,[R1, #-8]
   3624                      break;
   3625                    }
   3626                  }
   3627                  if (RightBlack[pos-2] < RightBlack[TripPos]/*&&TripPos-(pos-2)<30*/)//拟合起点合理，可以进行拟合
   \                     ??ProcessCrossing_57: (+1)
   \   000005A2   0x....             LDR.N    R1,??DataTable29_1
   \   000005A4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A6   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   000005AA   0xF851 0x1C08      LDR      R1,[R1, #-8]
   \   000005AE   0x....             LDR.N    R2,??DataTable29_1
   \   000005B0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005B2   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   000005B6   0x4291             CMP      R1,R2
   \   000005B8   0xDA09             BGE.N    ??ProcessCrossing_58
   3628                  {
   3629                    //右边缘拟合
   3630                    CommonRectificate(&RightBlack[0],pos-2,TripPos);
   \   000005BA   0x0032             MOVS     R2,R6
   \   000005BC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005BE   0x1E81             SUBS     R1,R0,#+2
   \   000005C0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005C2   0x....             LDR.N    R0,??DataTable29_1
   \   000005C4   0x.... 0x....      BL       CommonRectificate
   3631                    ProcessFlag = 1;
   \   000005C8   0xF05F 0x0901      MOVS     R9,#+1
   \   000005CC   0xE0F5             B.N      ??ProcessCrossing_54
   3632                  }
   3633                  else if (NoValidLMax > 20/*&&TripPos-(pos-2)<30*/)
   \                     ??ProcessCrossing_58: (+1)
   \   000005CE   0x....             LDR.N    R1,??DataTable31_24
   \   000005D0   0x7809             LDRB     R1,[R1, #+0]
   \   000005D2   0x2915             CMP      R1,#+21
   \   000005D4   0xF2C0 0x80F1      BLT.W    ??ProcessCrossing_54
   3634                  {
   3635                    RightBlack[pos-2]=2;
   \   000005D8   0x2102             MOVS     R1,#+2
   \   000005DA   0x....             LDR.N    R2,??DataTable29_1
   \   000005DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005DE   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   000005E2   0xF842 0x1C08      STR      R1,[R2, #-8]
   3636                    CommonRectificate(&RightBlack[0],pos-2,TripPos);
   \   000005E6   0x0032             MOVS     R2,R6
   \   000005E8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005EA   0x1E81             SUBS     R1,R0,#+2
   \   000005EC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005EE   0x....             LDR.N    R0,??DataTable29_1
   \   000005F0   0x.... 0x....      BL       CommonRectificate
   3637                    ProcessFlag = 1;
   \   000005F4   0xF05F 0x0901      MOVS     R9,#+1
   \   000005F8   0xE0DF             B.N      ??ProcessCrossing_54
   3638                    
   3639                  }
   3640                }
   3641                //			//处理左边缘
   3642                //			if (NoValidLMax < 20)
   3643                //			{
   3644                //				startPos = 0;
   3645                //				endPos = 0;
   3646                //				for (i = RowMax-1;i > 0;i--)
   3647                //				{
   3648                //					if (ValidLineL[i] == 0 && endPos == 0)
   3649                //					{
   3650                //						endPos = i+4;
   3651                //					}
   3652                //					if (endPos != 0 && startPos == 0 && ValidLineL[i]==1)
   3653                //					{
   3654                //						startPos = i-4;
   3655                //					}
   3656                //					
   3657                //					if (startPos != 0 && endPos != 0)
   3658                //					{
   3659                //// 						str.Format("L补偿起点:%d \r\n",startPos,endPos);
   3660                //// 						fprintf(pfile,str);
   3661                //						CommonRectificate(&LeftBlack[0],startPos,endPos);
   3662                //						startPos = 0;
   3663                //						endPos = 0;
   3664                //						ProcessFlag = 1;
   3665                //					}
   3666                //				}
   3667                //			}
   3668              }
   3669              else if (g_Derict == 2)//右倾
   \                     ??ProcessCrossing_49: (+1)
   \   000005FA   0x....             LDR.N    R0,??DataTable31_18
   \   000005FC   0x7800             LDRB     R0,[R0, #+0]
   \   000005FE   0x2802             CMP      R0,#+2
   \   00000600   0xF040 0x80DB      BNE.W    ??ProcessCrossing_54
   3670              {
   3671                pos = TripPos-8;
   \   00000604   0xF1B6 0x0008      SUBS     R0,R6,#+8
   \   00000608   0xE000             B.N      ??ProcessCrossing_59
   3672                while(pos > 0 && ValidLineL[pos] == 0 || LeftBlack[pos] < LeftBlack[TripPos]){pos--;}
   \                     ??ProcessCrossing_60: (+1)
   \   0000060A   0x1E40             SUBS     R0,R0,#+1
   \                     ??ProcessCrossing_59: (+1)
   \   0000060C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000060E   0x2800             CMP      R0,#+0
   \   00000610   0xD004             BEQ.N    ??ProcessCrossing_61
   \   00000612   0x....             LDR.N    R1,??DataTable31_25
   \   00000614   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000616   0x5C41             LDRB     R1,[R0, R1]
   \   00000618   0x2900             CMP      R1,#+0
   \   0000061A   0xD0F6             BEQ.N    ??ProcessCrossing_60
   \                     ??ProcessCrossing_61: (+1)
   \   0000061C   0x....             LDR.N    R1,??DataTable29
   \   0000061E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000620   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000624   0x....             LDR.N    R2,??DataTable29
   \   00000626   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000628   0xF852 0x2026      LDR      R2,[R2, R6, LSL #+2]
   \   0000062C   0x4291             CMP      R1,R2
   \   0000062E   0xDBEC             BLT.N    ??ProcessCrossing_60
   3673                // 			str.Format("补偿起点:%d LeftBlack[pos-2]%d\r\n",pos-2,LeftBlack[pos-2]);
   3674                // 			fprintf(pfile,str);
   3675                
   3676                
   3677                // 			if (RowMax-CrossingStable > pos-2)
   3678                // 			{
   3679                // 				if (LeftBlack[RowMax-CrossingStable] > LeftBlack[TripPos])
   3680                // 				{
   3681                // 					//右边缘拟合
   3682                // 					CommonRectificate(&LeftBlack[0],RowMax-CrossingStable,TripPos);
   3683                // 					ProcessFlag = 1;
   3684                // 				}
   3685                // 				else
   3686                // 				{
   3687                // 					for (i = ColumnMax-1;i > 0;i--)
   3688                // 					{
   3689                // 						if (ThresholdData[RowMax-CrossingStable][i] == White && ThresholdData[RowMax-CrossingStable][i-1] == Black)
   3690                // 						{
   3691                // 							pos = i;
   3692                // 							RightBlack[RowMax-CrossingStable]=i;
   3693                // 							break;
   3694                // 						}
   3695                // 					}
   3696                // 					if (LeftBlack[RowMax-CrossingStable] > LeftBlack[TripPos])
   3697                // 					{
   3698                // 						//右边缘拟合
   3699                // 						CommonRectificate(&LeftBlack[0],RowMax-CrossingStable,TripPos);
   3700                // 						ProcessFlag = 1;
   3701                // 					}
   3702                // 					else
   3703                // 					{
   3704                // 						RightBlack[RowMax-CrossingStable]=ColumnMax-2;
   3705                // 						//右边缘拟合
   3706                // 						CommonRectificate(&LeftBlack[0],RowMax-CrossingStable,TripPos);
   3707                // 						ProcessFlag = 1;
   3708                // 					}
   3709                // 				}
   3710                // 			}
   3711                // 			else 
   3712                if (LeftBlack[pos-2] > LeftBlack[TripPos]/*&&TripPos-(pos-2)<30*/)
   \   00000630   0x....             LDR.N    R1,??DataTable29
   \   00000632   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000634   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00000638   0x....             LDR.N    R2,??DataTable29
   \   0000063A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000063C   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000640   0xF852 0x2C08      LDR      R2,[R2, #-8]
   \   00000644   0x4291             CMP      R1,R2
   \   00000646   0xDA09             BGE.N    ??ProcessCrossing_62
   3713                {
   3714                  CommonRectificate(&LeftBlack[0],pos-2,TripPos);
   \   00000648   0x0032             MOVS     R2,R6
   \   0000064A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000064C   0x1E81             SUBS     R1,R0,#+2
   \   0000064E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000650   0x....             LDR.N    R0,??DataTable29
   \   00000652   0x.... 0x....      BL       CommonRectificate
   3715                  ProcessFlag = 1;
   \   00000656   0xF05F 0x0901      MOVS     R9,#+1
   \   0000065A   0xE0AE             B.N      ??ProcessCrossing_54
   3716                }
   3717                else
   3718                {
   3719                  //另外一种方式进行拟合
   3720                  for (i = ColumnMax-1;i > 0;i--)
   \                     ??ProcessCrossing_62: (+1)
   \   0000065C   0x2459             MOVS     R4,#+89
   \   0000065E   0xE000             B.N      ??ProcessCrossing_63
   \                     ??ProcessCrossing_64: (+1)
   \   00000660   0x1E64             SUBS     R4,R4,#+1
   \                     ??ProcessCrossing_63: (+1)
   \   00000662   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000664   0x2C00             CMP      R4,#+0
   \   00000666   0xD01C             BEQ.N    ??ProcessCrossing_65
   3721                  {
   3722                    if (ThresholdData[pos-2][i] == White && ThresholdData[pos-2][i-1] == Black)
   \   00000668   0x....             LDR.N    R1,??DataTable31_23
   \   0000066A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000066C   0x225A             MOVS     R2,#+90
   \   0000066E   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   00000672   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000674   0x1861             ADDS     R1,R4,R1
   \   00000676   0xF811 0x1CB4      LDRB     R1,[R1, #-180]
   \   0000067A   0x29C8             CMP      R1,#+200
   \   0000067C   0xD1F0             BNE.N    ??ProcessCrossing_64
   \   0000067E   0x....             LDR.N    R1,??DataTable31_23
   \   00000680   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000682   0x225A             MOVS     R2,#+90
   \   00000684   0xFB02 0x1100      MLA      R1,R2,R0,R1
   \   00000688   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000068A   0x1861             ADDS     R1,R4,R1
   \   0000068C   0xF811 0x1CB5      LDRB     R1,[R1, #-181]
   \   00000690   0x291E             CMP      R1,#+30
   \   00000692   0xD1E5             BNE.N    ??ProcessCrossing_64
   3723                    {
   3724                      LeftBlack[pos-2]=i;
   \   00000694   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000696   0x....             LDR.N    R1,??DataTable29
   \   00000698   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000069A   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   0000069E   0xF841 0x4C08      STR      R4,[R1, #-8]
   3725                      break;
   3726                    }
   3727                  }
   3728                  if (LeftBlack[pos-2] > LeftBlack[TripPos] /*&&TripPos-(pos-2)<30*/)
   \                     ??ProcessCrossing_65: (+1)
   \   000006A2   0x....             LDR.N    R1,??DataTable29
   \   000006A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000006A6   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   000006AA   0x....             LDR.N    R2,??DataTable29
   \   000006AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006AE   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   000006B2   0xF852 0x2C08      LDR      R2,[R2, #-8]
   \   000006B6   0x4291             CMP      R1,R2
   \   000006B8   0xDA09             BGE.N    ??ProcessCrossing_66
   3729                  {
   3730                    CommonRectificate(&LeftBlack[0],pos-2,TripPos);
   \   000006BA   0x0032             MOVS     R2,R6
   \   000006BC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000006BE   0x1E81             SUBS     R1,R0,#+2
   \   000006C0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000006C2   0x....             LDR.N    R0,??DataTable29
   \   000006C4   0x.... 0x....      BL       CommonRectificate
   3731                    ProcessFlag = 1;
   \   000006C8   0xF05F 0x0901      MOVS     R9,#+1
   \   000006CC   0xE075             B.N      ??ProcessCrossing_54
   3732                  }
   3733                  else if (NoValidRMax > 20 /*&&TripPos-(pos-2)<30*/)
   \                     ??ProcessCrossing_66: (+1)
   \   000006CE   0x....             LDR.N    R1,??DataTable31_26
   \   000006D0   0x7809             LDRB     R1,[R1, #+0]
   \   000006D2   0x2915             CMP      R1,#+21
   \   000006D4   0xDB71             BLT.N    ??ProcessCrossing_54
   3734                  {
   3735                    LeftBlack[pos-2]=ColumnMax-2;
   \   000006D6   0x2158             MOVS     R1,#+88
   \   000006D8   0x....             LDR.N    R2,??DataTable29
   \   000006DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006DC   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   000006E0   0xF842 0x1C08      STR      R1,[R2, #-8]
   3736                    CommonRectificate(&LeftBlack[0],pos-2,TripPos);
   \   000006E4   0x0032             MOVS     R2,R6
   \   000006E6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000006E8   0x1E81             SUBS     R1,R0,#+2
   \   000006EA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000006EC   0x....             LDR.N    R0,??DataTable29
   \   000006EE   0x.... 0x....      BL       CommonRectificate
   3737                    ProcessFlag = 1;
   \   000006F2   0xF05F 0x0901      MOVS     R9,#+1
   \   000006F6   0xE060             B.N      ??ProcessCrossing_54
   3738                  }
   3739                }
   3740                
   3741                //			//处理右边缘
   3742                //			if (NoValidRMax < 20)
   3743                //			{
   3744                //				startPos = 0;
   3745                //				endPos = 0;
   3746                //				for (i = RowMax-1;i > 0;i--)
   3747                //				{
   3748                //					if (ValidLineR[i] == 0 && endPos == 0)
   3749                //					{
   3750                //						endPos = i+4;
   3751                //					}
   3752                //					if (endPos != 0 && startPos == 0 && ValidLineR[i]==1)
   3753                //					{
   3754                //						startPos = i-4;
   3755                //					}
   3756                //					
   3757                //					if (startPos != 0 && endPos != 0)
   3758                //					{
   3759                //// 						str.Format("R补偿起点:%d \r\n",startPos,endPos);
   3760                //// 						fprintf(pfile,str);
   3761                //						CommonRectificate(&RightBlack[0],startPos,endPos);
   3762                //						startPos = 0;
   3763                //						endPos = 0;
   3764                //						ProcessFlag = 1;
   3765                //					}
   3766                //				}
   3767                //			}
   3768              }
   3769            }
   3770            else//找不到跳变点
   3771            {
   3772              // 		str.Format("未找到跳变点处理\r\n");
   3773              // 		fprintf(pfile,str);
   3774              GetCrossingMidLine();//取十字的边缘线
   \                     ??ProcessCrossing_48: (+1)
   \   000006F8   0x.... 0x....      BL       GetCrossingMidLine
   3775              if (g_Derict == 1)//左倾
   \   000006FC   0x....             LDR.N    R0,??DataTable31_18
   \   000006FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000700   0x2801             CMP      R0,#+1
   \   00000702   0xD12B             BNE.N    ??ProcessCrossing_67
   3776              {
   3777                pos=20;
   \   00000704   0x2014             MOVS     R0,#+20
   \   00000706   0xE000             B.N      ??ProcessCrossing_68
   3778                while (ValidLineR[pos]==0)
   3779                {
   3780                  pos++;
   \                     ??ProcessCrossing_69: (+1)
   \   00000708   0x1C40             ADDS     R0,R0,#+1
   3781                }
   \                     ??ProcessCrossing_68: (+1)
   \   0000070A   0x....             LDR.N    R1,??DataTable31_22
   \   0000070C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000070E   0x5C41             LDRB     R1,[R0, R1]
   \   00000710   0x2900             CMP      R1,#+0
   \   00000712   0xD0F9             BEQ.N    ??ProcessCrossing_69
   3782                while(ValidLineR[pos]==1)
   \                     ??ProcessCrossing_70: (+1)
   \   00000714   0x....             LDR.N    R1,??DataTable31_22
   \   00000716   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000718   0x5C41             LDRB     R1,[R0, R1]
   \   0000071A   0x2901             CMP      R1,#+1
   \   0000071C   0xD101             BNE.N    ??ProcessCrossing_71
   3783                {
   3784                  pos++;
   \   0000071E   0x1C40             ADDS     R0,R0,#+1
   \   00000720   0xE7F8             B.N      ??ProcessCrossing_70
   3785                }
   3786                startPos = pos-2;
   \                     ??ProcessCrossing_71: (+1)
   \   00000722   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000724   0x1E81             SUBS     R1,R0,#+2
   3787                pos += 8;
   \   00000726   0x3008             ADDS     R0,R0,#+8
   \   00000728   0xE000             B.N      ??ProcessCrossing_72
   3788                while (pos < RowMax-1 && (ValidLineR[pos] == 0 || RightBlack[pos] > ColumnMax-3 ))
   3789                {
   3790                  pos++;
   \                     ??ProcessCrossing_73: (+1)
   \   0000072A   0x1C40             ADDS     R0,R0,#+1
   3791                }
   \                     ??ProcessCrossing_72: (+1)
   \   0000072C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000072E   0x2863             CMP      R0,#+99
   \   00000730   0xDA0A             BGE.N    ??ProcessCrossing_74
   \   00000732   0x....             LDR.N    R2,??DataTable31_22
   \   00000734   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000736   0x5C82             LDRB     R2,[R0, R2]
   \   00000738   0x2A00             CMP      R2,#+0
   \   0000073A   0xD0F6             BEQ.N    ??ProcessCrossing_73
   \   0000073C   0x....             LDR.N    R2,??DataTable29_1
   \   0000073E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000740   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000744   0x2A58             CMP      R2,#+88
   \   00000746   0xDAF0             BGE.N    ??ProcessCrossing_73
   3792                endPos = pos+4;
   \                     ??ProcessCrossing_74: (+1)
   \   00000748   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000074A   0x1D02             ADDS     R2,R0,#+4
   3793                // 
   3794                // 			str.Format("startPos:%d. endPos %d\r\n",startPos,endPos);
   3795                // 			fprintf(pfile,str);
   3796                //if (RightBlack[pos-1] < 40)
   3797                //			if(endPos-startPos<30)
   3798                {
   3799                  CommonRectificate(&RightBlack[0],startPos,endPos);
   \   0000074C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000074E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000750   0x....             LDR.N    R0,??DataTable29_1
   \   00000752   0x.... 0x....      BL       CommonRectificate
   3800                  ProcessFlag = 1;
   \   00000756   0xF05F 0x0901      MOVS     R9,#+1
   \   0000075A   0xE02E             B.N      ??ProcessCrossing_54
   3801                }
   3802              }
   3803              else if (g_Derict == 2)
   \                     ??ProcessCrossing_67: (+1)
   \   0000075C   0x....             LDR.N    R0,??DataTable31_18
   \   0000075E   0x7800             LDRB     R0,[R0, #+0]
   \   00000760   0x2802             CMP      R0,#+2
   \   00000762   0xD12A             BNE.N    ??ProcessCrossing_54
   3804              {
   3805                pos=20;
   \   00000764   0x2014             MOVS     R0,#+20
   \   00000766   0xE000             B.N      ??ProcessCrossing_75
   3806                while (ValidLineL[pos]==0)
   3807                {
   3808                  pos++;
   \                     ??ProcessCrossing_76: (+1)
   \   00000768   0x1C40             ADDS     R0,R0,#+1
   3809                }
   \                     ??ProcessCrossing_75: (+1)
   \   0000076A   0x....             LDR.N    R1,??DataTable31_25
   \   0000076C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000076E   0x5C41             LDRB     R1,[R0, R1]
   \   00000770   0x2900             CMP      R1,#+0
   \   00000772   0xD0F9             BEQ.N    ??ProcessCrossing_76
   3810                while(ValidLineL[pos]==1)
   \                     ??ProcessCrossing_77: (+1)
   \   00000774   0x....             LDR.N    R1,??DataTable31_25
   \   00000776   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000778   0x5C41             LDRB     R1,[R0, R1]
   \   0000077A   0x2901             CMP      R1,#+1
   \   0000077C   0xD101             BNE.N    ??ProcessCrossing_78
   3811                {
   3812                  pos++;
   \   0000077E   0x1C40             ADDS     R0,R0,#+1
   \   00000780   0xE7F8             B.N      ??ProcessCrossing_77
   3813                }
   3814                startPos = pos-2;
   \                     ??ProcessCrossing_78: (+1)
   \   00000782   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000784   0x1E81             SUBS     R1,R0,#+2
   3815                pos += 8;
   \   00000786   0x3008             ADDS     R0,R0,#+8
   \   00000788   0xE000             B.N      ??ProcessCrossing_79
   3816                while (pos < RowMax-1 && (ValidLineL[pos] == 0 || LeftBlack[pos] < 3 ))
   3817                {
   3818                  pos++;
   \                     ??ProcessCrossing_80: (+1)
   \   0000078A   0x1C40             ADDS     R0,R0,#+1
   3819                }
   \                     ??ProcessCrossing_79: (+1)
   \   0000078C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000078E   0x2863             CMP      R0,#+99
   \   00000790   0xDA0A             BGE.N    ??ProcessCrossing_81
   \   00000792   0x....             LDR.N    R2,??DataTable31_25
   \   00000794   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000796   0x5C82             LDRB     R2,[R0, R2]
   \   00000798   0x2A00             CMP      R2,#+0
   \   0000079A   0xD0F6             BEQ.N    ??ProcessCrossing_80
   \   0000079C   0x....             LDR.N    R2,??DataTable29
   \   0000079E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000007A0   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000007A4   0x2A03             CMP      R2,#+3
   \   000007A6   0xDBF0             BLT.N    ??ProcessCrossing_80
   3820                endPos = pos+4;
   \                     ??ProcessCrossing_81: (+1)
   \   000007A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000007AA   0x1D02             ADDS     R2,R0,#+4
   3821                // 			str.Format("startPos:%d. endPos %d\r\n",startPos,endPos);
   3822                // 			fprintf(pfile,str);
   3823                //if (RightBlack[pos-1] < 40)
   3824                //			if(endPos-startPos<30)
   3825                {
   3826                  CommonRectificate(&LeftBlack[0],startPos,endPos);
   \   000007AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000007AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000007B0   0x....             LDR.N    R0,??DataTable29
   \   000007B2   0x.... 0x....      BL       CommonRectificate
   3827                  ProcessFlag = 1;
   \   000007B6   0xF05F 0x0901      MOVS     R9,#+1
   3828                }
   3829              }
   3830            }
   3831            
   3832            if (ProcessFlag == 0)
   \                     ??ProcessCrossing_54: (+1)
   \   000007BA   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000007BE   0xF1B9 0x0F00      CMP      R9,#+0
   \   000007C2   0xD103             BNE.N    ??ProcessCrossing_82
   3833            {	
   3834              IsCrossing = 0;
   \   000007C4   0x2000             MOVS     R0,#+0
   \   000007C6   0x....             LDR.N    R1,??DataTable31_4
   \   000007C8   0x7008             STRB     R0,[R1, #+0]
   3835              return;
   \   000007CA   0xE7FF             B.N      ??ProcessCrossing_19
   3836            }
   3837          #endif
   3838          }
   \                     ??ProcessCrossing_82: (+1)
   \                     ??ProcessCrossing_19: (+1)
   \   000007CC   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   3839          

   \                                 In section .text, align 2, keep-with-next
   3840          void Rectification(unsigned char begin,unsigned char end)
   3841          {
   \                     Rectification: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   3842            unsigned char MidPos = (begin+end)/2;
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0xFA54 0xF180      UXTAB    R1,R4,R0
   \   0000000A   0x2202             MOVS     R2,#+2
   \   0000000C   0xFB91 0xF5F2      SDIV     R5,R1,R2
   3843            if (end > RowMax-1)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C64             CMP      R4,#+100
   \   00000014   0xDB00             BLT.N    ??Rectification_0
   3844            {
   3845              end = RowMax-1;
   \   00000016   0x2463             MOVS     R4,#+99
   3846            }
   3847            if (begin == end)
   \                     ??Rectification_0: (+1)
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x42A0             CMP      R0,R4
   \   0000001E   0xD113             BNE.N    ??Rectification_1
   3848            {
   3849              //		ThresholdData[begin][BlackLineData[begin]]=White;
   3850              BlackLineData[begin] = (BlackLineData[begin-1]+BlackLineData[begin+1])/2;
   \   00000020   0x....             LDR.N    R1,??DataTable31
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000028   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \   0000002C   0x....             LDR.N    R2,??DataTable31
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xEB12 0x0280      ADDS     R2,R2,R0, LSL #+2
   \   00000034   0x6852             LDR      R2,[R2, #+4]
   \   00000036   0x1851             ADDS     R1,R2,R1
   \   00000038   0x2202             MOVS     R2,#+2
   \   0000003A   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000003E   0x....             LDR.N    R2,??DataTable31
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000046   0xE028             B.N      ??Rectification_2
   3851              // 		str.Format("补偿%d:%d  \r\n",n++,begin);
   3852              // 		fprintf(pfile,str);
   3853              //		ThresholdData[begin][BlackLineData[begin]]=128;
   3854            }
   3855            else if(begin < end)
   \                     ??Rectification_1: (+1)
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x42A0             CMP      R0,R4
   \   0000004E   0xD224             BCS.N    ??Rectification_2
   3856            {	
   3857              //		ThresholdData[MidPos][BlackLineData[MidPos]]=White;
   3858              BlackLineData[MidPos] = (BlackLineData[begin]+BlackLineData[end])/2;
   \   00000050   0x....             LDR.N    R1,??DataTable31
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000058   0x....             LDR.N    R2,??DataTable31
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0xF852 0x2024      LDR      R2,[R2, R4, LSL #+2]
   \   00000060   0x1851             ADDS     R1,R2,R1
   \   00000062   0x2202             MOVS     R2,#+2
   \   00000064   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000068   0x....             LDR.N    R2,??DataTable31
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0xF842 0x1025      STR      R1,[R2, R5, LSL #+2]
   3859              // 		str.Format("补偿%d:%d  \r\n",n++,MidPos);
   3860              // 		fprintf(pfile,str);
   3861              //		ThresholdData[MidPos][BlackLineData[MidPos]]=128;
   3862              if (begin+1 < MidPos)
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x1C41             ADDS     R1,R0,#+1
   \   00000074   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000076   0x42A9             CMP      R1,R5
   \   00000078   0xDA04             BGE.N    ??Rectification_3
   3863              {
   3864                Rectification(begin,MidPos);
   \   0000007A   0x0029             MOVS     R1,R5
   \   0000007C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0xF7FF 0xFFBE      BL       Rectification
   3865              }
   3866              if (MidPos+1 < end)
   \                     ??Rectification_3: (+1)
   \   00000084   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000086   0x1C68             ADDS     R0,R5,#+1
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x42A0             CMP      R0,R4
   \   0000008C   0xDA05             BGE.N    ??Rectification_2
   3867              {
   3868                Rectification(MidPos,end);
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0xF7FF 0xFFB3      BL       Rectification
   3869              }
   3870            }
   3871          }
   \                     ??Rectification_2: (+1)
   \   0000009A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   3872          void RectificationMidLine()
   3873          {
   \                     RectificationMidLine: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   3874            int iStart = RowMax - (StableNumbers+CompensateCount-12),iEnd=iStart+CompensateCount+5;
   \   00000002   0x....             LDR.N    R0,??DataTable31_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF1D0 0x0064      RSBS     R0,R0,#+100
   \   0000000A   0x....             LDR.N    R1,??DataTable31_27
   \   0000000C   0x6809             LDR      R1,[R1, #+0]
   \   0000000E   0x1A40             SUBS     R0,R0,R1
   \   00000010   0x300C             ADDS     R0,R0,#+12
   \   00000012   0x....             LDR.N    R1,??DataTable31_27
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x1809             ADDS     R1,R1,R0
   \   00000018   0x1D49             ADDS     R1,R1,#+5
   3875            Rectification(iStart,iEnd);
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       Rectification
   3876          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     UseStaticFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     StaticThreshold

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     ThresholdValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ImageData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     ThresholdData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     ImageData+0x2327

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     BlackEndL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     BlackEndM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     BlackEndR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     BlackEndMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     BlackEndLMR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     g_Derict

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     BlackEndA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     BlackEndB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     BlackEndC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     BlackEndD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     BlackEndE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     BlackEndF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     BlackEndG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x........         DC32     BlackEndColumnMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x........         DC32     StoreFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     StableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     LeftStableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x........         DC32     RightStableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     MidLineExcursion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x........         DC32     TopE1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     TopE2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   0x........         DC32     MidLineVariance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   0x40590000         DC32     0x40590000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   0x4062C000         DC32     0x4062c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   0x........         DC32     RoadType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   0x........         DC32     this_is_midline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   0x........         DC32     hx_end_line

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   0x........         DC32     hx_find_count_max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   0x........         DC32     hx_found_Column

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   0x........         DC32     hx_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     StableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     EndType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     LineType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     BlackRow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     WhiteRow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     LeftStableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     RightStableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     tiaobian_Left

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     tbs_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     tbs_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     tbs_all

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     yxhs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     mode1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     RoadType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     RoadMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     RightBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     BlackLineData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     LeftBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x3FD99999         DC32     0x3fd99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     hx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     BlackEndMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     sfzj

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     firstline_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     firstline_r

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     mode2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     firstline_m

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x3FE33333         DC32     0x3fe33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     mode3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     BlackEndColumnMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     mode4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     mode4_zhangai

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     zaw_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     ValidLineCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x........         DC32     ValidExcursionCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     TripPointPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     SubValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     midline_fcount_max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     Excursion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     EPerCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     NoValidMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     StableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     LeftStableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     RightStableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     ValidLineCount1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     ValidLineCount2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     ThresholdData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x........         DC32     LeftBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x........         DC32     RightBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     BlackLineData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     P1_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     P2_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     P1_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     P0_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     P0_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     Mid_K1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     P2_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     Mid_K2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x........         DC32     CompensateCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x3F800001         DC32     0x3f800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x3F0CCCCD         DC32     0x3f0ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x3E800001         DC32     0x3e800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x........         DC32     MidLineExcursion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \   00000000   0x........         DC32     MidLineVariance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \   00000000   0x4072C000         DC32     0x4072c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \   00000000   0x........         DC32     SubBasePoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \   00000000   0x........         DC32     TopE1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \   00000000   0x........         DC32     TopE2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \   00000000   0x........         DC32     TopLen1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \   00000000   0x........         DC32     TopLen2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \   00000000   0x........         DC32     SubBasePointLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_15:
   \   00000000   0x........         DC32     TemMidLineData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_16:
   \   00000000   0x........         DC32     ImageData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_17:
   \   00000000   0x........         DC32     ThresholdValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_18:
   \   00000000   0x........         DC32     BlackEndMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     LeftBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x........         DC32     RightBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0x........         DC32     IsStartLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   0x........         DC32     AllStraightCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   0x........         DC32     AllSmallSCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   0x........         DC32     AllBigSCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   0x........         DC32     Rear2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_5:
   \   00000000   0x........         DC32     ElementCount2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   0x........         DC32     AllBendCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \   00000000   0x........         DC32     RoadTypeData2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_2:
   \   00000000   0x........         DC32     StandardRoadType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_3:
   \   00000000   0x........         DC32     RoadType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_4:
   \   00000000   0x........         DC32     CrossingStable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_5:
   \   00000000   0x........         DC32     ValidLineR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_6:
   \   00000000   0x........         DC32     ValidLineL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_7:
   \   00000000   0x........         DC32     BlackEndMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_8:
   \   00000000   0x........         DC32     BlackEndL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_9:
   \   00000000   0x........         DC32     g_Derict

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_10:
   \   00000000   0x........         DC32     BlackEndR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_11:
   \   00000000   0x........         DC32     BlackEndM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_12:
   \   00000000   0x........         DC32     ThresholdData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_13:
   \   00000000   0x........         DC32     g_BasePos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_14:
   \   00000000   0x........         DC32     NoValidLMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_15:
   \   00000000   0x........         DC32     NoValidRMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0x........         DC32     LeftBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   0x........         DC32     RightBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0x........         DC32     BlackLineData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \   00000000   0x........         DC32     StableNumbers2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_2:
   \   00000000   0x........         DC32     TripPointPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_3:
   \   00000000   0x........         DC32     SubValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_4:
   \   00000000   0x........         DC32     IsCrossing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_5:
   \   00000000   0x........         DC32     StableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_6:
   \   00000000   0x........         DC32     endline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_7:
   \   00000000   0x........         DC32     LCrossingTripPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_8:
   \   00000000   0x........         DC32     RCrossingTripPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_9:
   \   00000000   0x........         DC32     bFoundTripPoint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_10:
   \   00000000   0x........         DC32     fs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_11:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_12:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_13:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_14:
   \   00000000   0x........         DC32     sa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_15:
   \   00000000   0x........         DC32     LineType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_16:
   \   00000000   0x........         DC32     BlackEndL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_17:
   \   00000000   0x........         DC32     BlackEndR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_18:
   \   00000000   0x........         DC32     g_Derict

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_19:
   \   00000000   0x........         DC32     NoValidMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_20:
   \   00000000   0x........         DC32     WhiteRow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_21:
   \   00000000   0x........         DC32     ValidLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_22:
   \   00000000   0x........         DC32     ValidLineR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_23:
   \   00000000   0x........         DC32     ThresholdData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_24:
   \   00000000   0x........         DC32     NoValidLMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_25:
   \   00000000   0x........         DC32     ValidLineL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_26:
   \   00000000   0x........         DC32     NoValidRMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_27:
   \   00000000   0x........         DC32     CompensateCount

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0xBF 0xAA          DC8 "\277\252\267\242"
   \              0xB7 0xA2    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   3877          
   3878          
   3879          //
   3880          ////平滑左右边缘线
   3881          //void SmoothLeftRight()
   3882          //{
   3883          //	unsigned char i = 20;
   3884          //	unsigned char end = 0,end1=0;
   3885          //	unsigned char iCount = 0;
   3886          //	int sum = 0;
   3887          //	
   3888          //	//右边缘补线
   3889          //	while (i < RowMax && (ValidLine[i] == 0 || ValidLine[i] == 1)){i++;}
   3890          //	sum=0;
   3891          //	while ((ValidLine[i] == 3 || ValidLine[i] == 2) && fabss(RightBlack[i]-RightBlack[i+1]) < 3 && i < RowMax)
   3892          //	{
   3893          //		iCount++;
   3894          //		sum += (RightBlack[i]-RightBlack[i+1]);
   3895          //		i++;
   3896          //	}
   3897          //	if (iCount > 5)
   3898          //	{
   3899          //		end = i-1;
   3900          //		
   3901          //// 		str.Format("start:%d  end:%d  sum:%d iCount:%d\r\n",start,end,sum,iCount);
   3902          //// 		fprintf(pfile,str);
   3903          //		
   3904          //		end1 = RightBlack[end] - (RowMax-end)*sum/iCount;
   3905          //		
   3906          //// 		str.Format("补偿点0:%d\r\n",end1);
   3907          //// 		fprintf(pfile,str);
   3908          //		
   3909          //		RightBlack[RowMax-1] = end1;
   3910          //		CommonRectificate(&RightBlack[0],end,RowMax-1);
   3911          //	}
   3912          //
   3913          //	i=20;
   3914          //
   3915          //	//左边缘补线
   3916          //	while (i < RowMax && (ValidLine[i] == 0 || ValidLine[i] == 2))
   3917          //	{
   3918          //		i++;
   3919          //	}
   3920          //	iCount=0;
   3921          //	sum=0;
   3922          //	while ((ValidLine[i] == 3 || ValidLine[i] == 1) && fabss(LeftBlack[i]-LeftBlack[i+1]) < 3 && i < RowMax)
   3923          //	{
   3924          //		iCount++;
   3925          //		sum += (LeftBlack[i]-LeftBlack[i+1]);
   3926          //		i++;
   3927          //	}
   3928          //	if (iCount > 5)
   3929          //	{
   3930          //		end = i-1;
   3931          //		
   3932          //// 		str.Format("start1:%d  end1:%d  sum1:%d iCount1:%d\r\n",start,end,sum,iCount);
   3933          //// 		fprintf(pfile,str);
   3934          //		
   3935          //		end1 = LeftBlack[end] - (RowMax-end)*sum/iCount;
   3936          //		
   3937          //// 		str.Format("补偿点1:%d\r\n",end1);
   3938          //// 		fprintf(pfile,str);
   3939          //		
   3940          //		LeftBlack[RowMax-1] = end1;
   3941          //		CommonRectificate(&LeftBlack[0],end,RowMax-1);
   3942          //	}	
   3943          //}
   3944          //

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   AverageFilter
        16   -> __aeabi_d2f
        16   -> __aeabi_ddiv
        16   -> __aeabi_dmul
        16   -> __aeabi_i2d
        16   -> fabss
      44   CheckStartLine
      16   CommonRectificate
        16   -> CommonRectificate
      16   CrossingMidFilter
        16   -> fabss
      24   FindHeixian
        24   -> __aeabi_d2iz
        24   -> __aeabi_dmul
        24   -> __aeabi_i2d
      48   FindMidLine_lastismidline
        48   -> __aeabi_memclr4
        48   -> fabss
       8   FindMidLine_lastisnotmidline
         8   -> FindMidLine_lastismidline
       0   Find_Endline
      16   GetBlackEndParam
        16   -> fabss
      16   GetBlackEndParam2
        16   -> Find_Endline
        16   -> fabss
      40   GetCrossingMidLine
        40   -> fabss
      24   GetEPerCount
        24   -> __aeabi_i2f
        24   -> fabss
       4   GetFinalMidLine
       8   GetImageParam
         8   -> GetBlackEndParam2
     104   GetLMR
       104   -> FindHeixian
       104   -> FindMidLine_lastismidline
       104   -> FindMidLine_lastisnotmidline
       104   -> __aeabi_d2iz
       104   -> __aeabi_dadd
       104   -> __aeabi_ddiv
       104   -> __aeabi_dmul
       104   -> __aeabi_i2d
       104   -> fabss
       104 __aeabi_cdcmple
      24   GetMidLineVariance
        24   -> __aeabi_d2f
        24   -> __aeabi_dadd
        24   -> __aeabi_ddiv
        24   -> __aeabi_dmul
        24   -> __aeabi_f2d
        24   -> __aeabi_fmul
        24   -> __aeabi_fsub
        24   -> __aeabi_i2f
        24   -> __aeabi_ui2d
      24   GetSectionParam
        24   -> fabss
       4   GetSpecialError
       8   HistoryRTProccess
         8   -> HistoryRoadTypeCount
      16   HistoryRoadTypeCount
       4   ImageProcess
       8   IsStraightToBend
         8   -> fabss
       4   LAverageFilter
      24   MidLineCompensate
        24   -> __aeabi_d2f
        24   -> __aeabi_ddiv
        24   -> __aeabi_dmul
        24   -> __aeabi_fmul
        24   -> __aeabi_i2d
        24 __aeabi_cfcmple
        24 __aeabi_cfrcmple
       8   MidLineProcess
         8   -> GetEPerCount
         8   -> GetLMR
         8   -> GetMidLineVariance
         8   -> GetSectionParam
      40   ProcessCrossing
        40   -> CommonRectificate
        40   -> FloatToChar
        40   -> GetCrossingMidLine
        40   -> LPLD_UART_PutChar
        40   -> LPLD_UART_PutCharArr
        40   -> SCProcessing
        40   -> __aeabi_i2f
        40 __aeabi_cfcmpeq
       4   RAverageFilter
       8   RTRecognition
         8   -> fabss
         8 __aeabi_cdcmple
      16   Rectification
        16   -> Rectification
       8   RectificationMidLine
         8   -> Rectification
      24   SCProcessing
        24   -> CommonRectificate
        24   -> fabss
       0   StoreMidLine
       0   UseTemMidLine
       0   fabss
      40   getmidline
        40   -> fabss


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable15
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable23
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_16
       4  ??DataTable24_17
       4  ??DataTable24_18
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable27_2
       4  ??DataTable27_3
       4  ??DataTable27_4
       4  ??DataTable27_5
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable28_10
       4  ??DataTable28_11
       4  ??DataTable28_12
       4  ??DataTable28_13
       4  ??DataTable28_14
       4  ??DataTable28_15
       4  ??DataTable28_2
       4  ??DataTable28_3
       4  ??DataTable28_4
       4  ??DataTable28_5
       4  ??DataTable28_6
       4  ??DataTable28_7
       4  ??DataTable28_8
       4  ??DataTable28_9
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable31_10
       4  ??DataTable31_11
       4  ??DataTable31_12
       4  ??DataTable31_13
       4  ??DataTable31_14
       4  ??DataTable31_15
       4  ??DataTable31_16
       4  ??DataTable31_17
       4  ??DataTable31_18
       4  ??DataTable31_19
       4  ??DataTable31_2
       4  ??DataTable31_20
       4  ??DataTable31_21
       4  ??DataTable31_22
       4  ??DataTable31_23
       4  ??DataTable31_24
       4  ??DataTable31_25
       4  ??DataTable31_26
       4  ??DataTable31_27
       4  ??DataTable31_3
       4  ??DataTable31_4
       4  ??DataTable31_5
       4  ??DataTable31_6
       4  ??DataTable31_7
       4  ??DataTable31_8
       4  ??DataTable31_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      16  ?_0
       8  ?_1
       4  AllBendCount
       4  AllBigSCount
     262  AverageFilter
       1  BanMa_Derict
       1  BanMa_Left
       1  BanMa_Right
       4  BlackEndA
       4  BlackEndB
       4  BlackEndC
       4  BlackEndColumnMax
       4  BlackEndD
       4  BlackEndE
       4  BlackEndF
       4  BlackEndG
       4  BlackEndL
       4  BlackEndLMR
       4  BlackEndM
       4  BlackEndMax
       4  BlackEndR
     400  BlackLineData
       1  BlackRow
       1  BlackRow1
    1382  CheckStartLine
     252  CommonRectificate
       4  CompensateCount
     318  CrossingMidFilter
       1  CrossingStable
       4  EPerCount
       1  ElementCount2
       4  EndType
       4  Endline
       4  Excursion
     392  FindHeixian
     606  FindMidLine_lastismidline
       8  FindMidLine_lastisnotmidline
      92  Find_Endline
     538  GetBlackEndParam
     838  GetBlackEndParam2
    1726  GetCrossingMidLine
     602  GetEPerCount
     158  GetFinalMidLine
       8  GetImageParam
    6052  GetLMR
     278  GetMidLineVariance
     248  GetSectionParam
     186  GetSpecialError
       1  Head2
     132  HistoryRTProccess
      16  HistoryRoadType
     236  HistoryRoadTypeCount
     430  ImageProcess
      46  IsStraightToBend
     128  LAverageFilter
       4  LCrossingTripPos
       1  LastRoadType
     400  LeftBlack
       4  LeftStableNumbers
       1  LeftWhite
     100  LineType
     434  MidLineCompensate
       4  MidLineExcursion
      28  MidLineProcess
       8  MidLineVariance
       4  Mid_K1
       4  Mid_K2
       1  NoValidLMax
       4  NoValidMax
       1  NoValidRMax
       4  P0_X
       4  P0_Y
       4  P1_X
       4  P1_Y
       4  P2_X
       4  P2_Y
    2000  ProcessCrossing
       4  ProcessFlag
     128  RAverageFilter
       4  RCrossingTripPos
     204  RTRecognition
       1  Rear2
     156  Rectification
      36  RectificationMidLine
     400  RightBlack
       4  RightStableNumbers
       1  RightWhite
     400  RoadMode
       1  RoadType
      32  RoadTypeData2
     540  SCProcessing
       4  StableNumbers
       4  StableNumbers2
       1  StandardRoadType
       4  StaticThreshold
       4  StoreFlag
      30  StoreMidLine
       4  StraightToBendCount
       4  SubBasePoint
       4  SubBasePointLen
     100  SubValue
     100  TemMidLineData
       4  ThresholdValue
       4  TopE1
       4  TopE2
       4  TopLen1
       4  TopLen2
     100  TripPointPos
       4  UseStaticFlag
      30  UseTemMidLine
       4  ValidExcursionCount
     100  ValidLine
       4  ValidLineCount
       4  ValidLineCount1
       4  ValidLineCount2
     100  ValidLineL
     100  ValidLineR
       1  WhiteRow
       1  WhiteRow1
       1  bFoundTripPoint
       4  countMax
       4  endPos
       1  endline
      14  fabss
       4  firstline_l
       4  firstline_m
       4  firstline_r
       1  g_BasePos
       1  g_Derict
       4  g_Head
       4  g_Rear
     772  getmidline
       4  hx
     360  hx_end
       4  hx_end_line
       4  hx_find_count_max
       4  hx_found_Column
       4  hx_i
       4  last_is_midline
       4  mid_line_count
       4  mid_line_count_last
       4  mid_line_count_ls
       4  midline_fcount
       4  midline_fcount_max
       4  mode1
       4  mode2
       4  mode3
       4  mode4
       4  mode4_zhangai
       4  sfminline
       4  sfzj
       4  startPos
       4  tbs_all
       4  tbs_y
       4  tbs_z
       4  temCount
       4  temPos
       4  this_is_midline
     400  tiaobian_Left
     400  tiaobian_Right
       4  yxhs
       4  zaw_mode

 
  3 839 bytes in section .bss
     43 bytes in section .data
     24 bytes in section .rodata
 19 970 bytes in section .text
 
 19 970 bytes of CODE  memory
     24 bytes of CONST memory
  3 882 bytes of DATA  memory

Errors: none
Warnings: 38
