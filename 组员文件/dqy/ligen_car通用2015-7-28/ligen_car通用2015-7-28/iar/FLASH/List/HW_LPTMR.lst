###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        25/Jul/2015  16:58:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\lib\LPLD\HW\HW_LPTMR.c
#    Command line =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\lib\LPLD\HW\HW_LPTMR.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\class\
#        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\List\HW_LPTMR.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\Obj\HW_LPTMR.o
#
###############################################################################

C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\lib\LPLD\HW\HW_LPTMR.c
      1          /**
      2           * @file HW_LPTMR.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief LPTMR底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable7  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable7_1  ;; 0xe000e180
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0940             LSRS     R0,R0,#+5
   \   0000000E   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     24          #include "HW_LPTMR.h"
     25          

   \                                 In section .bss, align 4
     26          LPTMR_ISR_CALLBACK LPTMR_ISR[1];
   \                     LPTMR_ISR:
   \   00000000                      DS8 4
     27          
     28          /*
     29           * LPLD_LPTMR_Init
     30           * LPTMR初始化函数
     31           * 
     32           * 参数:
     33           *    lptmr_init_structure--LPTMR初始化结构体，
     34           *                         具体定义见LPTMR_InitTypeDef 
     35           * 输出:
     36           *    0--配置错误
     37           *    1--配置成功
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          uint8 LPLD_LPTMR_Init(LPTMR_InitTypeDef lptmr_init_structure)
     40          {
   \                     LPLD_LPTMR_Init: (+1)
   \   00000000   0xB437             PUSH     {R0-R2,R4,R5}
     41            uint8  mode = lptmr_init_structure.LPTMR_Mode; 
   \   00000002   0xF89D 0x3000      LDRB     R3,[SP, #+0]
     42            uint16 period_ms = lptmr_init_structure.LPTMR_PeriodMs;
   \   00000006   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
     43            uint8  pluseacc_input = lptmr_init_structure.LPTMR_PluseAccInput;
   \   0000000A   0xF89D 0x2004      LDRB     R2,[SP, #+4]
     44            LPTMR_ISR_CALLBACK isr_func = lptmr_init_structure.LPTMR_Isr;
   \   0000000E   0x9802             LDR      R0,[SP, #+8]
     45          
     46            ASSERT(mode <= LPTMR_MODE_PLACC );
     47            ASSERT(pluseacc_input <= LPTMR_ALT2 );
     48          
     49            //初始化LPTMR时钟
     50            SIM->SCGC5|=SIM_SCGC5_LPTIMER_MASK;  
   \   00000010   0x....             LDR.N    R4,??DataTable7_2  ;; 0x40048038
   \   00000012   0x6824             LDR      R4,[R4, #+0]
   \   00000014   0xF054 0x0401      ORRS     R4,R4,#0x1
   \   00000018   0x....             LDR.N    R5,??DataTable7_2  ;; 0x40048038
   \   0000001A   0x602C             STR      R4,[R5, #+0]
     51             
     52            //清空寄存器
     53            LPTMR0->CSR = 0x00;                   
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0x....             LDR.N    R5,??DataTable7_3  ;; 0x40040000
   \   00000020   0x602C             STR      R4,[R5, #+0]
     54            LPTMR0->PSR = 0x00;
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0x....             LDR.N    R5,??DataTable7_4  ;; 0x40040004
   \   00000026   0x602C             STR      R4,[R5, #+0]
     55            LPTMR0->CMR = 0x00;
   \   00000028   0x2400             MOVS     R4,#+0
   \   0000002A   0x....             LDR.N    R5,??DataTable7_5  ;; 0x40040008
   \   0000002C   0x602C             STR      R4,[R5, #+0]
     56             
     57            if(mode == LPTMR_MODE_TIMER)          // 配置成低功耗定时器功能
   \   0000002E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000030   0x2B00             CMP      R3,#+0
   \   00000032   0xD106             BNE.N    ??LPLD_LPTMR_Init_0
     58            {    
     59              /* 配置LPTMR */
     60              // LPO 1Khz
     61              //设置比较的值
     62              //使用内部时钟 分频系数Prescale为 2^(X+1)
     63              //定时器的一个计数周期=时钟源(Clk_Src)/ 预分频值(Prescale)
     64              //定时器的定时值=设置的比较值(compare_value)/定时器的一个计数周期
     65              LPTMR0->CMR = LPTMR_CMR_COMPARE(period_ms);                 //设置比较值
   \   00000034   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000036   0x....             LDR.N    R2,??DataTable7_5  ;; 0x40040008
   \   00000038   0x6011             STR      R1,[R2, #+0]
     66              LPTMR0->PSR = LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK;       //采用LPO时钟旁路使能
   \   0000003A   0x2105             MOVS     R1,#+5
   \   0000003C   0x....             LDR.N    R2,??DataTable7_4  ;; 0x40040004
   \   0000003E   0x6011             STR      R1,[R2, #+0]
   \   00000040   0xE026             B.N      ??LPLD_LPTMR_Init_1
     67                  
     68            }
     69            else if(mode == LPTMR_MODE_PLACC)             //配置成脉冲捕获模式
   \                     ??LPLD_LPTMR_Init_0: (+1)
   \   00000042   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000044   0x2B01             CMP      R3,#+1
   \   00000046   0xD123             BNE.N    ??LPLD_LPTMR_Init_1
     70            {
     71              
     72              if(pluseacc_input == LPTMR_ALT1)            //PTA19引脚
   \   00000048   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000004A   0x2A01             CMP      R2,#+1
   \   0000004C   0xD104             BNE.N    ??LPLD_LPTMR_Init_2
     73              {
     74                PORTA->PCR[19] = PORT_PCR_MUX(0x6);       //设置PTA19为脉冲累加
   \   0000004E   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000052   0x....             LDR.N    R3,??DataTable7_6  ;; 0x4004904c
   \   00000054   0x6019             STR      R1,[R3, #+0]
   \   00000056   0xE006             B.N      ??LPLD_LPTMR_Init_3
     75              }
     76              else if(pluseacc_input == LPTMR_ALT2)       //PTC5引脚
   \                     ??LPLD_LPTMR_Init_2: (+1)
   \   00000058   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005A   0x2A02             CMP      R2,#+2
   \   0000005C   0xD103             BNE.N    ??LPLD_LPTMR_Init_3
     77              {
     78                PORTC->PCR[5] = PORT_PCR_MUX(0x4);        //设置PTC5为脉冲累加  
   \   0000005E   0xF44F 0x6180      MOV      R1,#+1024
   \   00000062   0x....             LDR.N    R3,??DataTable7_7  ;; 0x4004b014
   \   00000064   0x6019             STR      R1,[R3, #+0]
     79              }
     80          
     81              //与所用的内部时钟无关
     82              //外部输入的信号作为计数时钟
     83              LPTMR0->PSR = LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK; 
   \                     ??LPLD_LPTMR_Init_3: (+1)
   \   00000066   0x2105             MOVS     R1,#+5
   \   00000068   0x....             LDR.N    R3,??DataTable7_4  ;; 0x40040004
   \   0000006A   0x6019             STR      R1,[R3, #+0]
     84              LPTMR0->CSR = LPTMR_CSR_TPS(pluseacc_input);
   \   0000006C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006E   0x0111             LSLS     R1,R2,#+4
   \   00000070   0xF011 0x0130      ANDS     R1,R1,#0x30
   \   00000074   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40040000
   \   00000076   0x6011             STR      R1,[R2, #+0]
     85              LPTMR0->CSR |= LPTMR_CSR_TMS_MASK; //捕获模式
   \   00000078   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   0000007A   0x6809             LDR      R1,[R1, #+0]
   \   0000007C   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000080   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40040000
   \   00000082   0x6011             STR      R1,[R2, #+0]
     86              LPTMR0->CSR |= LPTMR_CSR_TFC_MASK; //自由计数模式
   \   00000084   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   00000086   0x6809             LDR      R1,[R1, #+0]
   \   00000088   0xF051 0x0104      ORRS     R1,R1,#0x4
   \   0000008C   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40040000
   \   0000008E   0x6011             STR      R1,[R2, #+0]
     87            }
     88            
     89            if(lptmr_init_structure.LPTMR_IntEnable == TRUE && isr_func != NULL)
   \                     ??LPLD_LPTMR_Init_1: (+1)
   \   00000090   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000094   0x2901             CMP      R1,#+1
   \   00000096   0xD10A             BNE.N    ??LPLD_LPTMR_Init_4
   \   00000098   0x0001             MOVS     R1,R0
   \   0000009A   0x2900             CMP      R1,#+0
   \   0000009C   0xD007             BEQ.N    ??LPLD_LPTMR_Init_4
     90            {
     91              LPTMR_ISR[0] = isr_func;
   \   0000009E   0x....             LDR.N    R1,??DataTable7_8
   \   000000A0   0x6008             STR      R0,[R1, #+0]
     92              LPTMR0->CSR |= LPTMR_CSR_TIE_MASK;
   \   000000A2   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000AA   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   000000AC   0x6008             STR      R0,[R1, #+0]
     93            }
     94          
     95            LPTMR0->CSR |= LPTMR_CSR_TEN_MASK; //开启LPTMR
   \                     ??LPLD_LPTMR_Init_4: (+1)
   \   000000AE   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000B6   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   000000B8   0x6008             STR      R0,[R1, #+0]
     96            return 1;
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0xBC3E             POP      {R1-R5}
   \   000000BE   0x4770             BX       LR               ;; return
     97          }
     98          
     99          /*
    100           * LPLD_LPTMR_DeInit
    101           * LPTMR反初始化函数，关闭lptmrx
    102           * 
    103           * 参数:
    104           *    无
    105           *
    106           * 输出:
    107           *    0--配置错误
    108           *    1--配置成功
    109           */

   \                                 In section .text, align 2, keep-with-next
    110          uint8 LPLD_LPTMR_Deinit(void)
    111          {
   \                     LPLD_LPTMR_Deinit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    112            //清空CSR寄存器
    113            LPTMR0->CSR=0x00;  
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   00000006   0x6008             STR      R0,[R1, #+0]
    114            //清空PSR寄存器
    115            LPTMR0->PSR=0x00;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40040004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    116            //清空CMR寄存器
    117            LPTMR0->CMR=0x00;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40040008
   \   00000012   0x6008             STR      R0,[R1, #+0]
    118            //禁止LPTimer中断
    119            disable_irq(LPTimer_IRQn);
   \   00000014   0x2055             MOVS     R0,#+85
   \   00000016   0x.... 0x....      BL       NVIC_DisableIRQ
    120            
    121             //关闭LPTMR时钟
    122            SIM->SCGC5 &= ~(SIM_SCGC5_LPTIMER_MASK);  
   \   0000001A   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40048038
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x0840             LSRS     R0,R0,#+1
   \   00000020   0x0040             LSLS     R0,R0,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40048038
   \   00000024   0x6008             STR      R0,[R1, #+0]
    123            
    124            return 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    125          }
    126          
    127          /*
    128           *  LPLD_LPTMR_Reset
    129           *  低功耗定时器复位，复位以后清空低功耗定时器Counter
    130           * 
    131           *  参数:
    132           *      无
    133           *  输出:
    134           *      无
    135           */

   \                                 In section .text, align 2, keep-with-next
    136          void LPLD_LPTMR_ResetCounter(void)
    137          {
    138            LPTMR0->CSR&=(~LPTMR_CSR_TEN_MASK);       //Reset LPTMR0 Counter
   \                     LPLD_LPTMR_ResetCounter: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0840             LSRS     R0,R0,#+1
   \   00000006   0x0040             LSLS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    139          }
   \   0000000C   0x4770             BX       LR               ;; return
    140          /*
    141           * LPLD_LPTMR_EnableIrq
    142           * 使能LPTMR中断功能，在该函数中使能TIE位和LPTMR模块中断
    143           * 
    144           * 参数:
    145           *    无
    146           *
    147           * 输出:
    148           *    0--配置错误
    149           *    1--配置成功
    150           *
    151           */

   \                                 In section .text, align 2, keep-with-next
    152          uint8 LPLD_LPTMR_EnableIrq(void)
    153          {
   \                     LPLD_LPTMR_EnableIrq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    154            enable_irq(LPTimer_IRQn);
   \   00000002   0x2055             MOVS     R0,#+85
   \   00000004   0x.... 0x....      BL       NVIC_EnableIRQ
    155            return 1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    156          }
    157          
    158          /*
    159           * LPLD_LPTMR_DisableIrq
    160           * 禁止LPTMR中断
    161           * 
    162           * 参数:
    163           *    无
    164           *
    165           * 输出:
    166           *    0--配置错误
    167           *    1--配置成功
    168           *
    169           */

   \                                 In section .text, align 2, keep-with-next
    170          uint8 LPLD_LPTMR_DisableIrq(void)
    171          {
   \                     LPLD_LPTMR_DisableIrq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    172            disable_irq(LPTimer_IRQn); 
   \   00000002   0x2055             MOVS     R0,#+85
   \   00000004   0x.... 0x....      BL       NVIC_DisableIRQ
    173            return 1;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    174          }
    175          
    176          /*
    177           *  LPLD_LPTMR_GetPulseAcc
    178           *  得到脉冲累加的值
    179           * 
    180           *  参数:
    181           *      无
    182           *  输出:
    183           *      脉冲累加值
    184           */

   \                                 In section .text, align 2, keep-with-next
    185          uint16 LPLD_LPTMR_GetPulseAcc(void)
    186          {
    187             return (uint16)LPTMR0->CNR;
   \                     LPLD_LPTMR_GetPulseAcc: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_9  ;; 0x4004000c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x4770             BX       LR               ;; return
    188          }
    189          
    190          /*
    191           *  LPLD_LPTMR_DelayMs
    192           *  低功耗定时器延时n个ms
    193           * 
    194           * 参数:
    195           *    period_ms--设定定时器的定时值 单位ms
    196           *    最大65535ms
    197           *
    198           *  输出:
    199           *      无
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          void LPLD_LPTMR_DelayMs(uint16 period_ms)
    202          {
    203            if(!period_ms)
   \                     LPLD_LPTMR_DelayMs: (+1)
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD01B             BEQ.N    ??LPLD_LPTMR_DelayMs_0
    204              return;
    205            
    206            /* 开启LPTMR时钟 */
    207            SIM->SCGC5|=SIM_SCGC5_LPTIMER_MASK; 
   \                     ??LPLD_LPTMR_DelayMs_1: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable7_2  ;; 0x40048038
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000000E   0x....             LDR.N    R2,??DataTable7_2  ;; 0x40048038
   \   00000010   0x6011             STR      R1,[R2, #+0]
    208            
    209            /* 设置毫秒延时计数 */
    210            LPTMR0->CMR = period_ms; 
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40040008
   \   00000016   0x6008             STR      R0,[R1, #+0]
    211            
    212            /* 设置LPTMR不分频采用1kHz LPO为时钟源 */
    213            LPTMR0->PSR = 0|LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK; 
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40040004
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    214            
    215            /* 开启定时器 */
    216            LPTMR0->CSR |= LPTMR_CSR_TEN_MASK; 
   \   0000001E   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000026   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   00000028   0x6008             STR      R0,[R1, #+0]
    217          
    218            /* 等待计数达到设定值 */
    219            while (!(LPTMR0->CSR & LPTMR_CSR_TCF_MASK));
   \                     ??LPLD_LPTMR_DelayMs_2: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0600             LSLS     R0,R0,#+24
   \   00000030   0xD5FB             BPL.N    ??LPLD_LPTMR_DelayMs_2
    220            
    221            /*清除定时比较标志 */
    222            LPTMR0->CSR &= ~LPTMR_CSR_TEN_MASK;
   \   00000032   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x0840             LSRS     R0,R0,#+1
   \   00000038   0x0040             LSLS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    223            
    224          }
   \                     ??LPLD_LPTMR_DelayMs_0: (+1)
   \   0000003E   0x4770             BX       LR               ;; return
    225          
    226          
    227          /*
    228           * LPTMR中断处理函数
    229           * 与启动文件startup_K60.s中的中断向量表关联
    230           * 用户无需修改，程序自动进入对应通道中断函数
    231           */

   \                                 In section .text, align 2, keep-with-next
    232          void LPT_IRQHandler(void)
    233          {
   \                     LPT_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    234            LPTMR0->CSR|=LPTMR_CSR_TCF_MASK;  //清除LPT比较标志
   \   00000002   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40040000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000000A   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40040000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    235            LPTMR_ISR[0]();
   \   0000000E   0x....             LDR.N    R0,??DataTable7_8
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x4780             BLX      R0
    236          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x40040004         DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40040008         DC32     0x40040008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x4004904C         DC32     0x4004904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     LPTMR_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x4004000C         DC32     0x4004000c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_LPTMR_Deinit
         8   -> NVIC_DisableIRQ
       0   LPLD_LPTMR_DelayMs
       8   LPLD_LPTMR_DisableIrq
         8   -> NVIC_DisableIRQ
       8   LPLD_LPTMR_EnableIrq
         8   -> NVIC_EnableIRQ
       0   LPLD_LPTMR_GetPulseAcc
      20   LPLD_LPTMR_Init
       0   LPLD_LPTMR_ResetCounter
       8   LPT_IRQHandler
         8   -- Indirect call
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      42  LPLD_LPTMR_Deinit
      64  LPLD_LPTMR_DelayMs
      12  LPLD_LPTMR_DisableIrq
      12  LPLD_LPTMR_EnableIrq
       8  LPLD_LPTMR_GetPulseAcc
     192  LPLD_LPTMR_Init
      14  LPLD_LPTMR_ResetCounter
       4  LPTMR_ISR
      22  LPT_IRQHandler
      20  NVIC_DisableIRQ
      20  NVIC_EnableIRQ

 
   4 bytes in section .bss
 446 bytes in section .text
 
 446 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
