###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        25/Jul/2015  16:58:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\lib\LPLD\HW\HW_SPI.c
#    Command line =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\lib\LPLD\HW\HW_SPI.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\..\..\..\lib\USB\class\
#        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\List\HW_SPI.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-23-20.36\iar\FLASH\Obj\HW_SPI.o
#
###############################################################################

C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\lib\LPLD\HW\HW_SPI.c
      1          /**
      2           * @file HW_SPI.c
      3           * @version 3.03[By LPLD]
      4           * @date 2014-2-10
      5           * @brief SPI底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable8_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_SPI.h"
     24          

   \                                 In section .bss, align 4
     25          SPI_ISR_CALLBACK SPI0_ISR[6];
   \                     SPI0_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     26          SPI_ISR_CALLBACK SPI1_ISR[6];
   \                     SPI1_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     27          SPI_ISR_CALLBACK SPI2_ISR[6];
   \                     SPI2_ISR:
   \   00000000                      DS8 24
     28          
     29          /*
     30           * LPLD_SPI_Init
     31           * SPI初始化函数,在该函数中选择SPI通道，初始化SPI SCK总线时钟
     32           * 选择使能Tx，Rx FIFO，选择开启SPI外设的发送完成，发送队列结束，
     33           * Tx FIFO队列为空，Rx FIFO队列溢出，选择FIFO的中断方式和DMA请求等
     34           * 
     35           * 参数:
     36           *    spi_init_structure--SPI初始化结构体，
     37           *                        具体定义见SPI_InitTypeDef
     38           *
     39           * 输出:
     40           *    0--配置错误
     41           *    1--配置成功
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 LPLD_SPI_Init(SPI_InitTypeDef spi_init_structure)
     44          {
   \                     LPLD_SPI_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB087             SUB      SP,SP,#+28
     45            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000008   0x9810             LDR      R0,[SP, #+64]
     46            uint8 spi_mode = spi_init_structure.SPI_ModeSelect;
   \   0000000A   0xF89D 0x1044      LDRB     R1,[SP, #+68]
   \   0000000E   0xF88D 0x1018      STRB     R1,[SP, #+24]
     47            uint8 sck_div = spi_init_structure.SPI_SckDivider; 
   \   00000012   0xF89D 0x1045      LDRB     R1,[SP, #+69]
   \   00000016   0xF88D 0x100B      STRB     R1,[SP, #+11]
     48            boolean txFIFO_enable = spi_init_structure.SPI_EnableTxFIFO;
   \   0000001A   0xF89D 0x1046      LDRB     R1,[SP, #+70]
   \   0000001E   0xF88D 0x100A      STRB     R1,[SP, #+10]
     49            boolean rxFIFO_enable = spi_init_structure.SPI_EnableRxFIFO;
   \   00000022   0xF89D 0x1047      LDRB     R1,[SP, #+71]
   \   00000026   0xF88D 0x1009      STRB     R1,[SP, #+9]
     50            //定义SPI外设中断变量
     51            boolean tx_complete_int = spi_init_structure.SPI_TxCompleteIntEnable;
   \   0000002A   0xF89D 0x1048      LDRB     R1,[SP, #+72]
     52            boolean QueueEnd_Request_int = spi_init_structure.SPI_QueueEndIntEnable; 
   \   0000002E   0xF89D 0x2049      LDRB     R2,[SP, #+73]
     53            boolean txFIFO_underflow_int = spi_init_structure.SPI_TxFIFO_UnderflowIntEnable;
   \   00000032   0xF89D 0x304A      LDRB     R3,[SP, #+74]
     54            boolean rxFIFO_overflow_int = spi_init_structure.SPI_RxFIFO_OverflowIntEnable;
   \   00000036   0xF89D 0x404B      LDRB     R4,[SP, #+75]
     55            boolean txFIFO_Fill_int = spi_init_structure.SPI_TxFIFO_FillIntEnable;
   \   0000003A   0xF89D 0x504C      LDRB     R5,[SP, #+76]
     56            boolean rxFIFO_Drain_int = spi_init_structure.SPI_RxFIFO_DrainIntEnable; 
   \   0000003E   0xF89D 0x604D      LDRB     R6,[SP, #+77]
     57            boolean txFIFO_req = spi_init_structure.SPI_TxFIFO_RequestSelect;
   \   00000042   0xF89D 0x704E      LDRB     R7,[SP, #+78]
     58            boolean rxFIFO_req = spi_init_structure.SPI_RxFIFO_RequestSelect;
   \   00000046   0xF89D 0xE04F      LDRB     LR,[SP, #+79]
     59            //选择SPI引脚
     60            PortPinsEnum_Type miso_pin = spi_init_structure.SPI_MisoPin;//MISO 
   \   0000004A   0xF89D 0x8058      LDRB     R8,[SP, #+88]
   \   0000004E   0xF88D 0x8004      STRB     R8,[SP, #+4]
     61            PortPinsEnum_Type mosi_pin = spi_init_structure.SPI_MosiPin;//MOSI
   \   00000052   0xF89D 0x8057      LDRB     R8,[SP, #+87]
   \   00000056   0xF88D 0x8003      STRB     R8,[SP, #+3]
     62            PortPinsEnum_Type sck_pin = spi_init_structure.SPI_SckPin;  //SCK
   \   0000005A   0xF89D 0x8056      LDRB     R8,[SP, #+86]
   \   0000005E   0xF88D 0x8002      STRB     R8,[SP, #+2]
     63            PortPinsEnum_Type pcs0_pin = spi_init_structure.SPI_Pcs0Pin;//PCS0
   \   00000062   0xF89D 0x8050      LDRB     R8,[SP, #+80]
   \   00000066   0xF88D 0x8001      STRB     R8,[SP, #+1]
     64            PortPinsEnum_Type pcs1_pin = spi_init_structure.SPI_Pcs1Pin;//PCS1
   \   0000006A   0xF89D 0x8051      LDRB     R8,[SP, #+81]
   \   0000006E   0xF88D 0x8000      STRB     R8,[SP, #+0]
     65            PortPinsEnum_Type pcs2_pin = spi_init_structure.SPI_Pcs2Pin;//PCS2
   \   00000072   0xF89D 0x8052      LDRB     R8,[SP, #+82]
   \   00000076   0xF88D 0x8006      STRB     R8,[SP, #+6]
     66            PortPinsEnum_Type pcs3_pin = spi_init_structure.SPI_Pcs3Pin;//PCS3
   \   0000007A   0xF89D 0x8053      LDRB     R8,[SP, #+83]
   \   0000007E   0xF88D 0x8005      STRB     R8,[SP, #+5]
     67            PortPinsEnum_Type pcs4_pin = spi_init_structure.SPI_Pcs4Pin;//PCS4
   \   00000082   0xF89D 0x8054      LDRB     R8,[SP, #+84]
   \   00000086   0xF88D 0x8008      STRB     R8,[SP, #+8]
     68            PortPinsEnum_Type pcs5_pin = spi_init_structure.SPI_Pcs5Pin;//PCS5
   \   0000008A   0xF89D 0x8055      LDRB     R8,[SP, #+85]
   \   0000008E   0xF88D 0x8007      STRB     R8,[SP, #+7]
     69            //定义中断回掉函数
     70            SPI_ISR_CALLBACK TxComplete_isr = spi_init_structure.SPI_TxCompleteIntIsr;
   \   00000092   0xF8DD 0x805C      LDR      R8,[SP, #+92]
   \   00000096   0xF8CD 0x8014      STR      R8,[SP, #+20]
     71            SPI_ISR_CALLBACK QueueEndReq_isr = spi_init_structure.SPI_QueueEndIntIsr;
   \   0000009A   0xF8DD 0x8060      LDR      R8,[SP, #+96]
   \   0000009E   0xF8CD 0x8010      STR      R8,[SP, #+16]
     72            SPI_ISR_CALLBACK UnderflowInt_isr = spi_init_structure.SPI_TxFIFO_UnderflowIntIsr;
   \   000000A2   0xF8DD 0x8064      LDR      R8,[SP, #+100]
   \   000000A6   0xF8CD 0x800C      STR      R8,[SP, #+12]
     73            SPI_ISR_CALLBACK OverflowInt_isr = spi_init_structure.SPI_RxFIFO_OverflowIntIsr;
   \   000000AA   0xF8DD 0xC068      LDR      R12,[SP, #+104]
     74            SPI_ISR_CALLBACK FillInt_isr = spi_init_structure.SPI_TxFIFO_FillIntIsr;
   \   000000AE   0xF8DD 0x806C      LDR      R8,[SP, #+108]
     75            SPI_ISR_CALLBACK DrainInt_isr = spi_init_structure.SPI_RxFIFO_DrainIntIsr;
   \   000000B2   0xF8DD 0x9070      LDR      R9,[SP, #+112]
     76            //检测参数
     77            ASSERT(spi_mode <= SPI_MODE_MASTER);
     78            ASSERT(sck_div <= SPI_SCK_DIV_32768);
     79          
     80            if(spix == SPI0)
   \   000000B6   0x.... 0x....      LDR.W    R10,??DataTable8_2  ;; 0x4002c000
   \   000000BA   0x4550             CMP      R0,R10
   \   000000BC   0xF040 0x80B1      BNE.W    ??LPLD_SPI_Init_0
     81            {
     82          #if defined(CPU_MK60D10)  
     83              SIM->SCGC6 |= SIM_SCGC6_SPI0_MASK; 
     84          #elif defined(CPU_MK60DZ10) || defined(CPU_MK60F12) || defined(CPU_MK60F15)
     85              SIM->SCGC6 |= SIM_SCGC6_DSPI0_MASK;  
   \   000000C0   0x.... 0x....      LDR.W    R10,??DataTable8_3  ;; 0x4004803c
   \   000000C4   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   000000C8   0xF45A 0x5A80      ORRS     R10,R10,#0x1000
   \   000000CC   0x.... 0x....      LDR.W    R11,??DataTable8_3  ;; 0x4004803c
   \   000000D0   0xF8CB 0xA000      STR      R10,[R11, #+0]
     86          #endif
     87               
     88              //选择PCS0
     89              if(pcs0_pin == PTA14)
   \   000000D4   0xF89D 0xA001      LDRB     R10,[SP, #+1]
   \   000000D8   0xF1BA 0x0F0E      CMP      R10,#+14
   \   000000DC   0xD106             BNE.N    ??LPLD_SPI_Init_1
     90              {
     91                PORTA->PCR[14] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000000DE   0xF44F 0x7A10      MOV      R10,#+576
   \   000000E2   0x.... 0x....      LDR.W    R11,??DataTable8_4  ;; 0x40049038
   \   000000E6   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000000EA   0xE005             B.N      ??LPLD_SPI_Init_2
     92              }
     93              else//pcs0_pin == PTC4
     94              {
     95                PORTC->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_1: (+1)
   \   000000EC   0xF44F 0x7A10      MOV      R10,#+576
   \   000000F0   0x.... 0x....      LDR.W    R11,??DataTable8_5  ;; 0x4004b010
   \   000000F4   0xF8CB 0xA000      STR      R10,[R11, #+0]
     96              }
     97              //选择PCS1
     98              if(pcs1_pin == PTC3)
   \                     ??LPLD_SPI_Init_2: (+1)
   \   000000F8   0xF89D 0xA000      LDRB     R10,[SP, #+0]
   \   000000FC   0xF1BA 0x0F3F      CMP      R10,#+63
   \   00000100   0xD106             BNE.N    ??LPLD_SPI_Init_3
     99              {
    100                PORTC->PCR[3]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000102   0xF44F 0x7A10      MOV      R10,#+576
   \   00000106   0x.... 0x....      LDR.W    R11,??DataTable8_6  ;; 0x4004b00c
   \   0000010A   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000010E   0xE005             B.N      ??LPLD_SPI_Init_4
    101              }
    102              else //pcs1_pin == PTD4
    103              {
    104                PORTD->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_3: (+1)
   \   00000110   0xF44F 0x7A10      MOV      R10,#+576
   \   00000114   0x.... 0x....      LDR.W    R11,??DataTable8_7  ;; 0x4004c010
   \   00000118   0xF8CB 0xA000      STR      R10,[R11, #+0]
    105              }
    106              //选择PCS2
    107              if(pcs2_pin == PTC2)
   \                     ??LPLD_SPI_Init_4: (+1)
   \   0000011C   0xF89D 0xA006      LDRB     R10,[SP, #+6]
   \   00000120   0xF1BA 0x0F3E      CMP      R10,#+62
   \   00000124   0xD106             BNE.N    ??LPLD_SPI_Init_5
    108              {
    109                PORTC->PCR[2]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000126   0xF44F 0x7A10      MOV      R10,#+576
   \   0000012A   0x.... 0x....      LDR.W    R11,??DataTable8_8  ;; 0x4004b008
   \   0000012E   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000132   0xE005             B.N      ??LPLD_SPI_Init_6
    110              }
    111              else //pcs2_pin == PTD5
    112              {
    113                PORTD->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_5: (+1)
   \   00000134   0xF44F 0x7A10      MOV      R10,#+576
   \   00000138   0x.... 0x....      LDR.W    R11,??DataTable8_9  ;; 0x4004c014
   \   0000013C   0xF8CB 0xA000      STR      R10,[R11, #+0]
    114              }
    115              //选择PCS3
    116              if(pcs3_pin == PTC1)
   \                     ??LPLD_SPI_Init_6: (+1)
   \   00000140   0xF89D 0xA005      LDRB     R10,[SP, #+5]
   \   00000144   0xF1BA 0x0F3D      CMP      R10,#+61
   \   00000148   0xD106             BNE.N    ??LPLD_SPI_Init_7
    117              {
    118                PORTC->PCR[1]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000014A   0xF44F 0x7A10      MOV      R10,#+576
   \   0000014E   0x.... 0x....      LDR.W    R11,??DataTable8_10  ;; 0x4004b004
   \   00000152   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000156   0xE005             B.N      ??LPLD_SPI_Init_8
    119              }
    120              else //pcs3_pin == PTD6
    121              {
    122                PORTD->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_7: (+1)
   \   00000158   0xF44F 0x7A10      MOV      R10,#+576
   \   0000015C   0x.... 0x....      LDR.W    R11,??DataTable8_11  ;; 0x4004c018
   \   00000160   0xF8CB 0xA000      STR      R10,[R11, #+0]
    123              }
    124              //选择PCS4
    125              if(pcs4_pin == PTC0)
   \                     ??LPLD_SPI_Init_8: (+1)
   \   00000164   0xF89D 0xA008      LDRB     R10,[SP, #+8]
   \   00000168   0xF1BA 0x0F3C      CMP      R10,#+60
   \   0000016C   0xD105             BNE.N    ??LPLD_SPI_Init_9
    126              {
    127                PORTC->PCR[0]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000016E   0xF44F 0x7A10      MOV      R10,#+576
   \   00000172   0x.... 0x....      LDR.W    R11,??DataTable8_12  ;; 0x4004b000
   \   00000176   0xF8CB 0xA000      STR      R10,[R11, #+0]
    128              }
    129              //选择PCS5
    130              if(pcs5_pin == PTB23)
   \                     ??LPLD_SPI_Init_9: (+1)
   \   0000017A   0xF89D 0xA007      LDRB     R10,[SP, #+7]
   \   0000017E   0xF1BA 0x0F37      CMP      R10,#+55
   \   00000182   0xD105             BNE.N    ??LPLD_SPI_Init_10
    131              {
    132                PORTB->PCR[23] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
   \   00000184   0xF44F 0x7A50      MOV      R10,#+832
   \   00000188   0x.... 0x....      LDR.W    R11,??DataTable8_13  ;; 0x4004a05c
   \   0000018C   0xF8CB 0xA000      STR      R10,[R11, #+0]
    133              }
    134          
    135              //选择SCK
    136              if(sck_pin == PTA15)
   \                     ??LPLD_SPI_Init_10: (+1)
   \   00000190   0xF89D 0xA002      LDRB     R10,[SP, #+2]
   \   00000194   0xF1BA 0x0F0F      CMP      R10,#+15
   \   00000198   0xD106             BNE.N    ??LPLD_SPI_Init_11
    137              {
    138                PORTA->PCR[15] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \   0000019A   0xF44F 0x7A10      MOV      R10,#+576
   \   0000019E   0x.... 0x....      LDR.W    R11,??DataTable8_14  ;; 0x4004903c
   \   000001A2   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000001A6   0xE005             B.N      ??LPLD_SPI_Init_12
    139              }
    140              else //sck_pin == PTC5
    141              {
    142                PORTC->PCR[5] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_11: (+1)
   \   000001A8   0xF44F 0x7A10      MOV      R10,#+576
   \   000001AC   0x.... 0x....      LDR.W    R11,??DataTable8_15  ;; 0x4004b014
   \   000001B0   0xF8CB 0xA000      STR      R10,[R11, #+0]
    143              }
    144              //选择MOSI
    145              if(mosi_pin == PTA16)
   \                     ??LPLD_SPI_Init_12: (+1)
   \   000001B4   0xF89D 0xA003      LDRB     R10,[SP, #+3]
   \   000001B8   0xF1BA 0x0F10      CMP      R10,#+16
   \   000001BC   0xD106             BNE.N    ??LPLD_SPI_Init_13
    146              {
    147                PORTA->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   000001BE   0xF44F 0x7A10      MOV      R10,#+576
   \   000001C2   0x.... 0x....      LDR.W    R11,??DataTable8_16  ;; 0x40049040
   \   000001C6   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000001CA   0xE005             B.N      ??LPLD_SPI_Init_14
    148              }
    149              else //mosi_pin == PTC6
    150              {
    151                PORTC->PCR[6] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_13: (+1)
   \   000001CC   0xF44F 0x7A10      MOV      R10,#+576
   \   000001D0   0x.... 0x....      LDR.W    R11,??DataTable8_17  ;; 0x4004b018
   \   000001D4   0xF8CB 0xA000      STR      R10,[R11, #+0]
    152              }
    153              //选择MISO
    154              if(miso_pin == PTA17)
   \                     ??LPLD_SPI_Init_14: (+1)
   \   000001D8   0xF89D 0xA004      LDRB     R10,[SP, #+4]
   \   000001DC   0xF1BA 0x0F11      CMP      R10,#+17
   \   000001E0   0xD118             BNE.N    ??LPLD_SPI_Init_15
    155              {
    156                PORTA->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
   \   000001E2   0xF44F 0x7A00      MOV      R10,#+512
   \   000001E6   0x.... 0x....      LDR.W    R11,??DataTable8_18  ;; 0x40049044
   \   000001EA   0xF8CB 0xA000      STR      R10,[R11, #+0]
    157              }
    158              else //miso_pin == PTC7
    159              {
    160                PORTC->PCR[7] = 0 | PORT_PCR_MUX(2); //SIN
    161              } 
    162            
    163            }
    164            else if(spix == SPI1)
    165            {
    166          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)  
    167              SIM->SCGC6 |= SIM_SCGC6_SPI1_MASK; 
    168          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    169              SIM->SCGC6 |= SIM_SCGC6_DSPI1_MASK; 
    170          #endif
    171              //选择PCS0
    172              if(pcs0_pin == PTB10)
    173              {
    174                PORTB->PCR[10] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    175              }
    176              else//pcs0_pin == PTE4
    177              {
    178                PORTE->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    179              }
    180              //选择PCS1
    181              if(pcs1_pin == PTB9)
    182              {
    183                PORTB->PCR[9]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    184              }
    185              else //pcs1_pin == PTE0
    186              {
    187                PORTE->PCR[0] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    188              }
    189              //选择PCS2
    190              if(pcs2_pin == PTE5)
    191              {
    192                PORTE->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    193              }
    194          
    195              //选择PCS3
    196              if(pcs3_pin == PTE6)
    197              {
    198                PORTE->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    199              }
    200          
    201              //选择SCK
    202              if(sck_pin == PTB11)
    203              {
    204                PORTB->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    205              }
    206              else //sck_pin == PTE2
    207              {
    208                PORTE->PCR[2] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
    209              }
    210              //选择MOSI
    211              if(mosi_pin == PTB16)
    212              {
    213                PORTB->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    214              }
    215              else //mosi_pin == PTE1
    216              {
    217                PORTE->PCR[1] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    218              }
    219              //选择MISO
    220              if(miso_pin == PTB17)
    221              {
    222                PORTB->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
    223              }
    224              else //miso_pin == PTE3
    225              {
    226                PORTE->PCR[3] = 0 | PORT_PCR_MUX(2); //SIN
    227              } 
    228            }
    229            else if(spix == SPI2)
    230            {
    231          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    232              SIM->SCGC3 |= SIM_SCGC3_SPI2_MASK; 
    233          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    234              SIM->SCGC3 |= SIM_SCGC3_DSPI2_MASK; 
    235          #endif
    236              //选择PCS0
    237              if(pcs0_pin == PTD11)
    238              {
    239                PORTD->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    240              }
    241              else//pcs0_pin == PTB20
    242              {
    243                PORTB->PCR[20] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    244              }
    245              //选择PCS1
    246              if(pcs1_pin == PTD15)
    247              {
    248                PORTD->PCR[15]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    249              }
    250          
    251              //选择SCK
    252              if(sck_pin == PTD12)
    253              {
    254                PORTD->PCR[12] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
    255              }
    256              else //sck_pin == PTB21
    257              {
    258                PORTB->PCR[21] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
    259              }
    260              //选择MOSI
    261              if(mosi_pin == PTD13)
    262              {
    263                PORTD->PCR[13] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    264              }
    265              else //mosi_pin == PTB22
    266              {
    267                PORTB->PCR[22] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
    268              }
    269              //选择MISO
    270              if(miso_pin == PTD14)
    271              {
    272                PORTD->PCR[14] = 0 | PORT_PCR_MUX(2); //SIN
    273              }
    274              else //miso_pin == PTB23
    275              {
    276                PORTB->PCR[23] = 0 | PORT_PCR_MUX(2); //SIN
    277              } 
    278            }
    279            else
    280              return 0;
    281            //配置SPI MCR寄存器
    282            spix->MCR = 0 & (~SPI_MCR_MDIS_MASK)        
    283                          |SPI_MCR_HALT_MASK        
    284                          |SPI_MCR_PCSIS_MASK       
    285                          |SPI_MCR_CLR_TXF_MASK    
    286                          |SPI_MCR_CLR_RXF_MASK;  
   \                     ??LPLD_SPI_Init_16: (+1)
   \   000001EE   0x.... 0x....      LDR.W    R10,??DataTable8_19  ;; 0x3f0c01
   \   000001F2   0xF8C0 0xA000      STR      R10,[R0, #+0]
    287            //选择SPI 工作模式
    288            if(spi_mode == SPI_MODE_SLAVE)
   \   000001F6   0xF89D 0xA018      LDRB     R10,[SP, #+24]
   \   000001FA   0xF1BA 0x0F01      CMP      R10,#+1
   \   000001FE   0xF040 0x80F3      BNE.W    ??LPLD_SPI_Init_17
    289            {
    290              spix->MCR &= ~SPI_MCR_MSTR_MASK;//从机模式  
   \   00000202   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000206   0xEA5F 0x0A4A      LSLS     R10,R10,#+1      ;; ZeroExtS R10,R10,#+1,#+1
   \   0000020A   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   0000020E   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   00000212   0xE0EF             B.N      ??LPLD_SPI_Init_18
    291            }
   \                     ??LPLD_SPI_Init_15: (+1)
   \   00000214   0xF44F 0x7A00      MOV      R10,#+512
   \   00000218   0x.... 0x....      LDR.W    R11,??DataTable8_20  ;; 0x4004b01c
   \   0000021C   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000220   0xE7E5             B.N      ??LPLD_SPI_Init_16
   \                     ??LPLD_SPI_Init_0: (+1)
   \   00000222   0x.... 0x....      LDR.W    R10,??DataTable8_21  ;; 0x4002d000
   \   00000226   0x4550             CMP      R0,R10
   \   00000228   0xD17A             BNE.N    ??LPLD_SPI_Init_19
   \   0000022A   0x.... 0x....      LDR.W    R10,??DataTable8_3  ;; 0x4004803c
   \   0000022E   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   00000232   0xF45A 0x5A00      ORRS     R10,R10,#0x2000
   \   00000236   0x.... 0x....      LDR.W    R11,??DataTable8_3  ;; 0x4004803c
   \   0000023A   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000023E   0xF89D 0xA001      LDRB     R10,[SP, #+1]
   \   00000242   0xF1BA 0x0F2A      CMP      R10,#+42
   \   00000246   0xD106             BNE.N    ??LPLD_SPI_Init_20
   \   00000248   0xF44F 0x7A10      MOV      R10,#+576
   \   0000024C   0x.... 0x....      LDR.W    R11,??DataTable8_22  ;; 0x4004a028
   \   00000250   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000254   0xE005             B.N      ??LPLD_SPI_Init_21
   \                     ??LPLD_SPI_Init_20: (+1)
   \   00000256   0xF44F 0x7A10      MOV      R10,#+576
   \   0000025A   0x.... 0x....      LDR.W    R11,??DataTable8_23  ;; 0x4004d010
   \   0000025E   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_21: (+1)
   \   00000262   0xF89D 0xA000      LDRB     R10,[SP, #+0]
   \   00000266   0xF1BA 0x0F29      CMP      R10,#+41
   \   0000026A   0xD106             BNE.N    ??LPLD_SPI_Init_22
   \   0000026C   0xF44F 0x7A10      MOV      R10,#+576
   \   00000270   0x.... 0x....      LDR.W    R11,??DataTable8_24  ;; 0x4004a024
   \   00000274   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000278   0xE005             B.N      ??LPLD_SPI_Init_23
   \                     ??LPLD_SPI_Init_22: (+1)
   \   0000027A   0xF44F 0x7A10      MOV      R10,#+576
   \   0000027E   0x.... 0x....      LDR.W    R11,??DataTable8_25  ;; 0x4004d000
   \   00000282   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_23: (+1)
   \   00000286   0xF89D 0xA006      LDRB     R10,[SP, #+6]
   \   0000028A   0xF1BA 0x0F81      CMP      R10,#+129
   \   0000028E   0xD105             BNE.N    ??LPLD_SPI_Init_24
   \   00000290   0xF44F 0x7A10      MOV      R10,#+576
   \   00000294   0x.... 0x....      LDR.W    R11,??DataTable8_26  ;; 0x4004d014
   \   00000298   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_24: (+1)
   \   0000029C   0xF89D 0xA005      LDRB     R10,[SP, #+5]
   \   000002A0   0xF1BA 0x0F82      CMP      R10,#+130
   \   000002A4   0xD105             BNE.N    ??LPLD_SPI_Init_25
   \   000002A6   0xF44F 0x7A10      MOV      R10,#+576
   \   000002AA   0x.... 0x....      LDR.W    R11,??DataTable8_27  ;; 0x4004d018
   \   000002AE   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_25: (+1)
   \   000002B2   0xF89D 0xA002      LDRB     R10,[SP, #+2]
   \   000002B6   0xF1BA 0x0F2B      CMP      R10,#+43
   \   000002BA   0xD106             BNE.N    ??LPLD_SPI_Init_26
   \   000002BC   0xF44F 0x7A10      MOV      R10,#+576
   \   000002C0   0x.... 0x....      LDR.W    R11,??DataTable8_28  ;; 0x4004a02c
   \   000002C4   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000002C8   0xE005             B.N      ??LPLD_SPI_Init_27
   \                     ??LPLD_SPI_Init_26: (+1)
   \   000002CA   0xF44F 0x7A10      MOV      R10,#+576
   \   000002CE   0x.... 0x....      LDR.W    R11,??DataTable8_29  ;; 0x4004d008
   \   000002D2   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_27: (+1)
   \   000002D6   0xF89D 0xA003      LDRB     R10,[SP, #+3]
   \   000002DA   0xF1BA 0x0F30      CMP      R10,#+48
   \   000002DE   0xD106             BNE.N    ??LPLD_SPI_Init_28
   \   000002E0   0xF44F 0x7A10      MOV      R10,#+576
   \   000002E4   0x.... 0x....      LDR.W    R11,??DataTable8_30  ;; 0x4004a040
   \   000002E8   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000002EC   0xE005             B.N      ??LPLD_SPI_Init_29
   \                     ??LPLD_SPI_Init_28: (+1)
   \   000002EE   0xF44F 0x7A10      MOV      R10,#+576
   \   000002F2   0x.... 0x....      LDR.W    R11,??DataTable8_31  ;; 0x4004d004
   \   000002F6   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_29: (+1)
   \   000002FA   0xF89D 0xA004      LDRB     R10,[SP, #+4]
   \   000002FE   0xF1BA 0x0F31      CMP      R10,#+49
   \   00000302   0xD106             BNE.N    ??LPLD_SPI_Init_30
   \   00000304   0xF44F 0x7A00      MOV      R10,#+512
   \   00000308   0x.... 0x....      LDR.W    R11,??DataTable8_32  ;; 0x4004a044
   \   0000030C   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000310   0xE76D             B.N      ??LPLD_SPI_Init_16
   \                     ??LPLD_SPI_Init_30: (+1)
   \   00000312   0xF44F 0x7A00      MOV      R10,#+512
   \   00000316   0x.... 0x....      LDR.W    R11,??DataTable8_33  ;; 0x4004d00c
   \   0000031A   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000031E   0xE766             B.N      ??LPLD_SPI_Init_16
   \                     ??LPLD_SPI_Init_19: (+1)
   \   00000320   0x.... 0x....      LDR.W    R10,??DataTable8_34  ;; 0x400ac000
   \   00000324   0x4550             CMP      R0,R10
   \   00000326   0xD15D             BNE.N    ??LPLD_SPI_Init_31
   \   00000328   0x.... 0x....      LDR.W    R10,??DataTable8_35  ;; 0x40048030
   \   0000032C   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   00000330   0xF45A 0x5A80      ORRS     R10,R10,#0x1000
   \   00000334   0x.... 0x....      LDR.W    R11,??DataTable8_35  ;; 0x40048030
   \   00000338   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000033C   0xF89D 0xA001      LDRB     R10,[SP, #+1]
   \   00000340   0xF1BA 0x0F67      CMP      R10,#+103
   \   00000344   0xD106             BNE.N    ??LPLD_SPI_Init_32
   \   00000346   0xF44F 0x7A10      MOV      R10,#+576
   \   0000034A   0x.... 0x....      LDR.W    R11,??DataTable8_36  ;; 0x4004c02c
   \   0000034E   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   00000352   0xE005             B.N      ??LPLD_SPI_Init_33
   \                     ??LPLD_SPI_Init_32: (+1)
   \   00000354   0xF44F 0x7A10      MOV      R10,#+576
   \   00000358   0x.... 0x....      LDR.W    R11,??DataTable8_37  ;; 0x4004a050
   \   0000035C   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_33: (+1)
   \   00000360   0xF89D 0xA000      LDRB     R10,[SP, #+0]
   \   00000364   0xF1BA 0x0F6B      CMP      R10,#+107
   \   00000368   0xD105             BNE.N    ??LPLD_SPI_Init_34
   \   0000036A   0xF44F 0x7A10      MOV      R10,#+576
   \   0000036E   0x.... 0x....      LDR.W    R11,??DataTable8_38  ;; 0x4004c03c
   \   00000372   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_34: (+1)
   \   00000376   0xF89D 0xA002      LDRB     R10,[SP, #+2]
   \   0000037A   0xF1BA 0x0F68      CMP      R10,#+104
   \   0000037E   0xD106             BNE.N    ??LPLD_SPI_Init_35
   \   00000380   0xF44F 0x7A10      MOV      R10,#+576
   \   00000384   0x.... 0x....      LDR.W    R11,??DataTable8_39  ;; 0x4004c030
   \   00000388   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   0000038C   0xE005             B.N      ??LPLD_SPI_Init_36
   \                     ??LPLD_SPI_Init_35: (+1)
   \   0000038E   0xF44F 0x7A10      MOV      R10,#+576
   \   00000392   0x.... 0x....      LDR.W    R11,??DataTable8_40  ;; 0x4004a054
   \   00000396   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_36: (+1)
   \   0000039A   0xF89D 0xA003      LDRB     R10,[SP, #+3]
   \   0000039E   0xF1BA 0x0F69      CMP      R10,#+105
   \   000003A2   0xD106             BNE.N    ??LPLD_SPI_Init_37
   \   000003A4   0xF44F 0x7A10      MOV      R10,#+576
   \   000003A8   0x.... 0x....      LDR.W    R11,??DataTable8_41  ;; 0x4004c034
   \   000003AC   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000003B0   0xE005             B.N      ??LPLD_SPI_Init_38
   \                     ??LPLD_SPI_Init_37: (+1)
   \   000003B2   0xF44F 0x7A10      MOV      R10,#+576
   \   000003B6   0x.... 0x....      LDR.W    R11,??DataTable8_42  ;; 0x4004a058
   \   000003BA   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \                     ??LPLD_SPI_Init_38: (+1)
   \   000003BE   0xF89D 0xA004      LDRB     R10,[SP, #+4]
   \   000003C2   0xF1BA 0x0F6A      CMP      R10,#+106
   \   000003C6   0xD106             BNE.N    ??LPLD_SPI_Init_39
   \   000003C8   0xF44F 0x7A00      MOV      R10,#+512
   \   000003CC   0x.... 0x....      LDR.W    R11,??DataTable8_43  ;; 0x4004c038
   \   000003D0   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000003D4   0xE70B             B.N      ??LPLD_SPI_Init_16
   \                     ??LPLD_SPI_Init_39: (+1)
   \   000003D6   0xF44F 0x7A00      MOV      R10,#+512
   \   000003DA   0x.... 0x....      LDR.W    R11,??DataTable8_13  ;; 0x4004a05c
   \   000003DE   0xF8CB 0xA000      STR      R10,[R11, #+0]
   \   000003E2   0xE704             B.N      ??LPLD_SPI_Init_16
   \                     ??LPLD_SPI_Init_31: (+1)
   \   000003E4   0x2000             MOVS     R0,#+0
   \   000003E6   0xE17E             B.N      ??LPLD_SPI_Init_40
    292            else
    293            {
    294              spix->MCR |= SPI_MCR_MSTR_MASK; //主机模式 
   \                     ??LPLD_SPI_Init_17: (+1)
   \   000003E8   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   000003EC   0xF05A 0x4A00      ORRS     R10,R10,#0x80000000
   \   000003F0   0xF8C0 0xA000      STR      R10,[R0, #+0]
    295            }
    296            //选择使能tx FIFO
    297            if(txFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_18: (+1)
   \   000003F4   0xF89D 0xA00A      LDRB     R10,[SP, #+10]
   \   000003F8   0xF1BA 0x0F01      CMP      R10,#+1
   \   000003FC   0xD106             BNE.N    ??LPLD_SPI_Init_41
    298            {
    299              spix->MCR &= ~SPI_MCR_DIS_TXF_MASK; 
   \   000003FE   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000402   0xF43A 0x5A00      BICS     R10,R10,#0x2000
   \   00000406   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   0000040A   0xE005             B.N      ??LPLD_SPI_Init_42
    300            }
    301            else
    302            {
    303              spix->MCR |= SPI_MCR_DIS_TXF_MASK;//选择传统方式
   \                     ??LPLD_SPI_Init_41: (+1)
   \   0000040C   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000410   0xF45A 0x5A00      ORRS     R10,R10,#0x2000
   \   00000414   0xF8C0 0xA000      STR      R10,[R0, #+0]
    304            }
    305            //选择使能Rx FIFO
    306            if(rxFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_42: (+1)
   \   00000418   0xF89D 0xA009      LDRB     R10,[SP, #+9]
   \   0000041C   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000420   0xD106             BNE.N    ??LPLD_SPI_Init_43
    307            {
    308              spix->MCR &= ~SPI_MCR_DIS_RXF_MASK;
   \   00000422   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000426   0xF43A 0x5A80      BICS     R10,R10,#0x1000
   \   0000042A   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   0000042E   0xE005             B.N      ??LPLD_SPI_Init_44
    309            }
    310            else
    311            {
    312              spix->MCR |= SPI_MCR_DIS_RXF_MASK; //选择传统方式
   \                     ??LPLD_SPI_Init_43: (+1)
   \   00000430   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000434   0xF45A 0x5A80      ORRS     R10,R10,#0x1000
   \   00000438   0xF8C0 0xA000      STR      R10,[R0, #+0]
    313            }
    314            //选择使能发送完成中断
    315            if(tx_complete_int == TRUE)
   \                     ??LPLD_SPI_Init_44: (+1)
   \   0000043C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000043E   0x2901             CMP      R1,#+1
   \   00000440   0xD106             BNE.N    ??LPLD_SPI_Init_45
    316            {
    317              spix->RSER |= SPI_RSER_TCF_RE_MASK; 
   \   00000442   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   00000446   0xF05A 0x4A00      ORRS     R10,R10,#0x80000000
   \   0000044A   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   0000044E   0xE007             B.N      ??LPLD_SPI_Init_46
    318            }
    319            else
    320            { 
    321              spix->RSER &= ~SPI_RSER_TCF_RE_MASK;
   \                     ??LPLD_SPI_Init_45: (+1)
   \   00000450   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   00000454   0xEA5F 0x0A4A      LSLS     R10,R10,#+1      ;; ZeroExtS R10,R10,#+1,#+1
   \   00000458   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   0000045C   0xF8C0 0xA030      STR      R10,[R0, #+48]
    322            }
    323            //选择使能发送队列结束中断
    324            if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_46: (+1)
   \   00000460   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000462   0x2A01             CMP      R2,#+1
   \   00000464   0xD106             BNE.N    ??LPLD_SPI_Init_47
    325            {
    326              spix->RSER |=SPI_RSER_EOQF_RE_MASK;
   \   00000466   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   0000046A   0xF05A 0x5A80      ORRS     R10,R10,#0x10000000
   \   0000046E   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   00000472   0xE005             B.N      ??LPLD_SPI_Init_48
    327            }
    328            else
    329              spix->RSER &= ~SPI_RSER_EOQF_RE_MASK;
   \                     ??LPLD_SPI_Init_47: (+1)
   \   00000474   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   00000478   0xF03A 0x5A80      BICS     R10,R10,#0x10000000
   \   0000047C   0xF8C0 0xA030      STR      R10,[R0, #+48]
    330            //选择使能txFIFO为空中断
    331            if(txFIFO_underflow_int== TRUE)
   \                     ??LPLD_SPI_Init_48: (+1)
   \   00000480   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000482   0x2B01             CMP      R3,#+1
   \   00000484   0xD106             BNE.N    ??LPLD_SPI_Init_49
    332            {
    333              spix->RSER |=SPI_RSER_TFUF_RE_MASK;
   \   00000486   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   0000048A   0xF05A 0x6A00      ORRS     R10,R10,#0x8000000
   \   0000048E   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   00000492   0xE005             B.N      ??LPLD_SPI_Init_50
    334            }
    335            else
    336              spix->RSER &= ~SPI_RSER_TFUF_RE_MASK;
   \                     ??LPLD_SPI_Init_49: (+1)
   \   00000494   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   00000498   0xF03A 0x6A00      BICS     R10,R10,#0x8000000
   \   0000049C   0xF8C0 0xA030      STR      R10,[R0, #+48]
    337            //选择使能rxFIFO溢出中断
    338            if(rxFIFO_overflow_int== TRUE)
   \                     ??LPLD_SPI_Init_50: (+1)
   \   000004A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004A2   0x2C01             CMP      R4,#+1
   \   000004A4   0xD106             BNE.N    ??LPLD_SPI_Init_51
    339            {
    340              spix->RSER |=SPI_RSER_RFOF_RE_MASK;
   \   000004A6   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   000004AA   0xF45A 0x2A00      ORRS     R10,R10,#0x80000
   \   000004AE   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   000004B2   0xE005             B.N      ??LPLD_SPI_Init_52
    341            }
    342            else
    343            {
    344              spix->RSER &= ~SPI_RSER_RFOF_RE_MASK;
   \                     ??LPLD_SPI_Init_51: (+1)
   \   000004B4   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   000004B8   0xF43A 0x2A00      BICS     R10,R10,#0x80000
   \   000004BC   0xF8C0 0xA030      STR      R10,[R0, #+48]
    345            }
    346            //选择使能txFIFO有数据进入队列中断或者DMA请求
    347            if(txFIFO_Fill_int== TRUE)
   \                     ??LPLD_SPI_Init_52: (+1)
   \   000004C0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004C2   0x2D01             CMP      R5,#+1
   \   000004C4   0xD106             BNE.N    ??LPLD_SPI_Init_53
    348            {
    349              spix->RSER |=SPI_RSER_TFFF_RE_MASK;
   \   000004C6   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   000004CA   0xF05A 0x7A00      ORRS     R10,R10,#0x2000000
   \   000004CE   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   000004D2   0xE005             B.N      ??LPLD_SPI_Init_54
    350            }
    351            else
    352            {
    353              spix->RSER &= ~SPI_RSER_TFFF_RE_MASK;
   \                     ??LPLD_SPI_Init_53: (+1)
   \   000004D4   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   000004D8   0xF03A 0x7A00      BICS     R10,R10,#0x2000000
   \   000004DC   0xF8C0 0xA030      STR      R10,[R0, #+48]
    354            }
    355            //选择使能rxFIFO非空中断或者DMA请求
    356            if(rxFIFO_Drain_int== TRUE)
   \                     ??LPLD_SPI_Init_54: (+1)
   \   000004E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004E2   0x2E01             CMP      R6,#+1
   \   000004E4   0xD106             BNE.N    ??LPLD_SPI_Init_55
    357            {
    358              spix->RSER |=SPI_RSER_RFDF_RE_MASK;
   \   000004E6   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   000004EA   0xF45A 0x3A00      ORRS     R10,R10,#0x20000
   \   000004EE   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   000004F2   0xE005             B.N      ??LPLD_SPI_Init_56
    359            }
    360            else
    361            {
    362              spix->RSER &= ~SPI_RSER_RFDF_RE_MASK;
   \                     ??LPLD_SPI_Init_55: (+1)
   \   000004F4   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   000004F8   0xF43A 0x3A00      BICS     R10,R10,#0x20000
   \   000004FC   0xF8C0 0xA030      STR      R10,[R0, #+48]
    363            }
    364            //选择使能txFIFO中断或者DMA请求
    365            if(txFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_56: (+1)
   \   00000500   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000502   0x2F01             CMP      R7,#+1
   \   00000504   0xD106             BNE.N    ??LPLD_SPI_Init_57
    366            {
    367              spix->RSER |=SPI_RSER_TFFF_DIRS_MASK;
   \   00000506   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   0000050A   0xF05A 0x7A80      ORRS     R10,R10,#0x1000000
   \   0000050E   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   00000512   0xE005             B.N      ??LPLD_SPI_Init_58
    368            }
    369            else
    370            {
    371              spix->RSER &= ~SPI_RSER_TFFF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_57: (+1)
   \   00000514   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   00000518   0xF03A 0x7A80      BICS     R10,R10,#0x1000000
   \   0000051C   0xF8C0 0xA030      STR      R10,[R0, #+48]
    372            }
    373            //选择使能rxFIFO中断或者DMA请求
    374            if(rxFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_58: (+1)
   \   00000520   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000524   0xF1BE 0x0F01      CMP      LR,#+1
   \   00000528   0xD106             BNE.N    ??LPLD_SPI_Init_59
    375            {
    376              spix->RSER |= SPI_RSER_RFDF_DIRS_MASK;
   \   0000052A   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   0000052E   0xF45A 0x3A80      ORRS     R10,R10,#0x10000
   \   00000532   0xF8C0 0xA030      STR      R10,[R0, #+48]
   \   00000536   0xE005             B.N      ??LPLD_SPI_Init_60
    377            }
    378            else 
    379            {
    380              spix->RSER &= ~SPI_RSER_RFDF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_59: (+1)
   \   00000538   0xF8D0 0xA030      LDR      R10,[R0, #+48]
   \   0000053C   0xF43A 0x3A80      BICS     R10,R10,#0x10000
   \   00000540   0xF8C0 0xA030      STR      R10,[R0, #+48]
    381            }
    382            //添加中断回调函数
    383          
    384            if(spix == SPI0)
   \                     ??LPLD_SPI_Init_60: (+1)
   \   00000544   0x.... 0x....      LDR.W    R10,??DataTable8_2  ;; 0x4002c000
   \   00000548   0x4550             CMP      R0,R10
   \   0000054A   0xD133             BNE.N    ??LPLD_SPI_Init_61
    385            {
    386              if(tx_complete_int == TRUE)
   \   0000054C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000054E   0x2901             CMP      R1,#+1
   \   00000550   0xD104             BNE.N    ??LPLD_SPI_Init_62
    387              { SPI0_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000552   0x9905             LDR      R1,[SP, #+20]
   \   00000554   0x.... 0x....      LDR.W    R10,??DataTable8_44
   \   00000558   0xF8CA 0x1000      STR      R1,[R10, #+0]
    388              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_62: (+1)
   \   0000055C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000055E   0x2A01             CMP      R2,#+1
   \   00000560   0xD103             BNE.N    ??LPLD_SPI_Init_63
    389              { SPI0_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   00000562   0x9904             LDR      R1,[SP, #+16]
   \   00000564   0x.... 0x....      LDR.W    R2,??DataTable8_44
   \   00000568   0x6051             STR      R1,[R2, #+4]
    390              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_63: (+1)
   \   0000056A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000056C   0x2B01             CMP      R3,#+1
   \   0000056E   0xD103             BNE.N    ??LPLD_SPI_Init_64
    391              { SPI0_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   00000570   0x9903             LDR      R1,[SP, #+12]
   \   00000572   0x.... 0x....      LDR.W    R2,??DataTable8_44
   \   00000576   0x6091             STR      R1,[R2, #+8]
    392              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_64: (+1)
   \   00000578   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000057A   0x2C01             CMP      R4,#+1
   \   0000057C   0xD103             BNE.N    ??LPLD_SPI_Init_65
    393              { SPI0_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   0000057E   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   00000582   0xF8C1 0xC00C      STR      R12,[R1, #+12]
    394              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_65: (+1)
   \   00000586   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000588   0x2D01             CMP      R5,#+1
   \   0000058A   0xD106             BNE.N    ??LPLD_SPI_Init_66
   \   0000058C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000058E   0x2F00             CMP      R7,#+0
   \   00000590   0xD103             BNE.N    ??LPLD_SPI_Init_66
    395              { SPI0_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000592   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   00000596   0xF8C1 0x8010      STR      R8,[R1, #+16]
    396              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_66: (+1)
   \   0000059A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000059C   0x2E01             CMP      R6,#+1
   \   0000059E   0xD178             BNE.N    ??LPLD_SPI_Init_67
   \   000005A0   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000005A4   0xF1BE 0x0F00      CMP      LR,#+0
   \   000005A8   0xD173             BNE.N    ??LPLD_SPI_Init_67
    397              { SPI0_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   000005AA   0x.... 0x....      LDR.W    R1,??DataTable8_44
   \   000005AE   0xF8C1 0x9014      STR      R9,[R1, #+20]
   \   000005B2   0xE06E             B.N      ??LPLD_SPI_Init_67
    398            }
    399            else if (spix == SPI1)
   \                     ??LPLD_SPI_Init_61: (+1)
   \   000005B4   0x.... 0x....      LDR.W    R10,??DataTable8_21  ;; 0x4002d000
   \   000005B8   0x4550             CMP      R0,R10
   \   000005BA   0xD133             BNE.N    ??LPLD_SPI_Init_68
    400            {
    401              if(tx_complete_int == TRUE)
   \   000005BC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005BE   0x2901             CMP      R1,#+1
   \   000005C0   0xD104             BNE.N    ??LPLD_SPI_Init_69
    402              { SPI1_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   000005C2   0x9905             LDR      R1,[SP, #+20]
   \   000005C4   0x.... 0x....      LDR.W    R10,??DataTable8_45
   \   000005C8   0xF8CA 0x1000      STR      R1,[R10, #+0]
    403              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_69: (+1)
   \   000005CC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005CE   0x2A01             CMP      R2,#+1
   \   000005D0   0xD103             BNE.N    ??LPLD_SPI_Init_70
    404              { SPI1_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   000005D2   0x9904             LDR      R1,[SP, #+16]
   \   000005D4   0x.... 0x....      LDR.W    R2,??DataTable8_45
   \   000005D8   0x6051             STR      R1,[R2, #+4]
    405              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_70: (+1)
   \   000005DA   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000005DC   0x2B01             CMP      R3,#+1
   \   000005DE   0xD103             BNE.N    ??LPLD_SPI_Init_71
    406              { SPI1_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   000005E0   0x9903             LDR      R1,[SP, #+12]
   \   000005E2   0x.... 0x....      LDR.W    R2,??DataTable8_45
   \   000005E6   0x6091             STR      R1,[R2, #+8]
    407              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_71: (+1)
   \   000005E8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005EA   0x2C01             CMP      R4,#+1
   \   000005EC   0xD103             BNE.N    ??LPLD_SPI_Init_72
    408              { SPI1_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   000005EE   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   000005F2   0xF8C1 0xC00C      STR      R12,[R1, #+12]
    409              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_72: (+1)
   \   000005F6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005F8   0x2D01             CMP      R5,#+1
   \   000005FA   0xD106             BNE.N    ??LPLD_SPI_Init_73
   \   000005FC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000005FE   0x2F00             CMP      R7,#+0
   \   00000600   0xD103             BNE.N    ??LPLD_SPI_Init_73
    410              { SPI1_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000602   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   00000606   0xF8C1 0x8010      STR      R8,[R1, #+16]
    411              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_73: (+1)
   \   0000060A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000060C   0x2E01             CMP      R6,#+1
   \   0000060E   0xD140             BNE.N    ??LPLD_SPI_Init_67
   \   00000610   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000614   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000618   0xD13B             BNE.N    ??LPLD_SPI_Init_67
    412              { SPI1_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   0000061A   0x.... 0x....      LDR.W    R1,??DataTable8_45
   \   0000061E   0xF8C1 0x9014      STR      R9,[R1, #+20]
   \   00000622   0xE036             B.N      ??LPLD_SPI_Init_67
    413            }
    414            else if (spix == SPI2)
   \                     ??LPLD_SPI_Init_68: (+1)
   \   00000624   0x.... 0x....      LDR.W    R10,??DataTable8_34  ;; 0x400ac000
   \   00000628   0x4550             CMP      R0,R10
   \   0000062A   0xD132             BNE.N    ??LPLD_SPI_Init_67
    415            {
    416              if(tx_complete_int == TRUE)
   \   0000062C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000062E   0x2901             CMP      R1,#+1
   \   00000630   0xD104             BNE.N    ??LPLD_SPI_Init_74
    417              { SPI2_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000632   0x9905             LDR      R1,[SP, #+20]
   \   00000634   0x.... 0x....      LDR.W    R10,??DataTable8_46
   \   00000638   0xF8CA 0x1000      STR      R1,[R10, #+0]
    418              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_74: (+1)
   \   0000063C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000063E   0x2A01             CMP      R2,#+1
   \   00000640   0xD103             BNE.N    ??LPLD_SPI_Init_75
    419              { SPI2_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   00000642   0x9904             LDR      R1,[SP, #+16]
   \   00000644   0x.... 0x....      LDR.W    R2,??DataTable8_46
   \   00000648   0x6051             STR      R1,[R2, #+4]
    420              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_75: (+1)
   \   0000064A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000064C   0x2B01             CMP      R3,#+1
   \   0000064E   0xD103             BNE.N    ??LPLD_SPI_Init_76
    421              { SPI2_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   00000650   0x9903             LDR      R1,[SP, #+12]
   \   00000652   0x.... 0x....      LDR.W    R2,??DataTable8_46
   \   00000656   0x6091             STR      R1,[R2, #+8]
    422              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_76: (+1)
   \   00000658   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000065A   0x2C01             CMP      R4,#+1
   \   0000065C   0xD103             BNE.N    ??LPLD_SPI_Init_77
    423              { SPI2_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   0000065E   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000662   0xF8C1 0xC00C      STR      R12,[R1, #+12]
    424              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_77: (+1)
   \   00000666   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000668   0x2D01             CMP      R5,#+1
   \   0000066A   0xD106             BNE.N    ??LPLD_SPI_Init_78
   \   0000066C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000066E   0x2F00             CMP      R7,#+0
   \   00000670   0xD103             BNE.N    ??LPLD_SPI_Init_78
    425              { SPI2_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000672   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   00000676   0xF8C1 0x8010      STR      R8,[R1, #+16]
    426              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_78: (+1)
   \   0000067A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000067C   0x2E01             CMP      R6,#+1
   \   0000067E   0xD108             BNE.N    ??LPLD_SPI_Init_67
   \   00000680   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000684   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000688   0xD103             BNE.N    ??LPLD_SPI_Init_67
    427              { SPI2_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   0000068A   0x.... 0x....      LDR.W    R1,??DataTable8_46
   \   0000068E   0xF8C1 0x9014      STR      R9,[R1, #+20]
    428            }
    429            //配置SPI CTAR寄存器，设置SPI的总线时序
    430            spix->CTAR[0] = 0 & (~SPI_CTAR_LSBFE_MASK)
    431                                |SPI_CTAR_DBR_MASK  
    432                                |SPI_CTAR_PBR(0)           
    433                                |SPI_CTAR_FMSZ(7);        
   \                     ??LPLD_SPI_Init_67: (+1)
   \   00000692   0xF05F 0x4138      MOVS     R1,#-1207959552
   \   00000696   0x60C1             STR      R1,[R0, #+12]
    434                                 
    435            //设置SPI总线频率
    436            //SCK总线频率 = g_bus_clock/ SCK_DIV_x                                             
    437            spix->CTAR[0] |=SPI_CTAR_BR(sck_div);
   \   00000698   0x68C1             LDR      R1,[R0, #+12]
   \   0000069A   0xF89D 0x200B      LDRB     R2,[SP, #+11]
   \   0000069E   0xF012 0x020F      ANDS     R2,R2,#0xF
   \   000006A2   0x4311             ORRS     R1,R2,R1
   \   000006A4   0x60C1             STR      R1,[R0, #+12]
    438          
    439            //tCSC = (1/g_bus_clock) x PCSSCK x CSSCK
    440            //tCSC = 1/50,000,000 x PCSSCK x CSSCK
    441            spix->CTAR[0] |=SPI_CTAR_PCSSCK(1); 
   \   000006A6   0x68C1             LDR      R1,[R0, #+12]
   \   000006A8   0xF451 0x0180      ORRS     R1,R1,#0x400000
   \   000006AC   0x60C1             STR      R1,[R0, #+12]
    442            spix->CTAR[0] |=SPI_CTAR_CSSCK(1);  
   \   000006AE   0x68C1             LDR      R1,[R0, #+12]
   \   000006B0   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \   000006B4   0x60C1             STR      R1,[R0, #+12]
    443            
    444            //tDT = (1/g_bus_clock) x PDT x DT
    445            spix->CTAR[0] |=SPI_CTAR_DT(1);
   \   000006B6   0x68C1             LDR      R1,[R0, #+12]
   \   000006B8   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   000006BC   0x60C1             STR      R1,[R0, #+12]
    446            spix->CTAR[0] |=SPI_CTAR_PDT(1);
   \   000006BE   0x68C1             LDR      R1,[R0, #+12]
   \   000006C0   0xF451 0x2180      ORRS     R1,R1,#0x40000
   \   000006C4   0x60C1             STR      R1,[R0, #+12]
    447            
    448            //Config the Delay of the last edge of SCK and the negation of PCS
    449            //tASC = (1/g_bus_clock) x PASC x ASC
    450            spix->CTAR[0] |=SPI_CTAR_PASC(1);
   \   000006C6   0x68C1             LDR      R1,[R0, #+12]
   \   000006C8   0xF451 0x1180      ORRS     R1,R1,#0x100000
   \   000006CC   0x60C1             STR      R1,[R0, #+12]
    451            spix->CTAR[0] |=SPI_CTAR_ASC(1);
   \   000006CE   0x68C1             LDR      R1,[R0, #+12]
   \   000006D0   0xF451 0x7180      ORRS     R1,R1,#0x100
   \   000006D4   0x60C1             STR      R1,[R0, #+12]
    452            //清除标志位
    453            spix->SR =  SPI_SR_RFDF_MASK   
    454                        |SPI_SR_RFOF_MASK
    455                        |SPI_SR_TFFF_MASK
    456                        |SPI_SR_TFUF_MASK
    457                        |SPI_SR_TCF_MASK
    458                        |SPI_SR_EOQF_MASK;
   \   000006D6   0x.... 0x....      LDR.W    R1,??DataTable8_47  ;; 0x9a0a0000
   \   000006DA   0x62C1             STR      R1,[R0, #+44]
    459            //使能SPIx
    460            spix->MCR &=~SPI_MCR_HALT_MASK; 
   \   000006DC   0x6801             LDR      R1,[R0, #+0]
   \   000006DE   0x0849             LSRS     R1,R1,#+1
   \   000006E0   0x0049             LSLS     R1,R1,#+1
   \   000006E2   0x6001             STR      R1,[R0, #+0]
    461            
    462            return 1;
   \   000006E4   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Init_40: (+1)
   \   000006E6   0xB007             ADD      SP,SP,#+28
   \   000006E8   0xE8BD 0x0FF0      POP      {R4-R11}
   \   000006EC   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    463          }
    464          
    465          /*
    466           * LPLD_SPI_Deinit
    467           * SPI反初始化函数,在该函数中将SPI设置成为暂停模式，关闭SPI总线时钟，
    468           * 关闭SPI外设中断
    469           * 
    470           * 参数:
    471           *    spi_init_structure--SPI初始化结构体，
    472           *                        具体定义见SPI_InitTypeDef
    473           *
    474           * 输出:
    475           *    0--配置错误
    476           *    1--配置成功
    477           */

   \                                 In section .text, align 2, keep-with-next
    478          uint8 LPLD_SPI_Deinit(SPI_InitTypeDef spi_init_structure)
    479          {
   \                     LPLD_SPI_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    480            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    481            spix->MCR |= SPI_MCR_HALT_MASK; //
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    482            if(spix == SPI0)
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable8_2  ;; 0x4002c000
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD10E             BNE.N    ??LPLD_SPI_Deinit_0
    483            {
    484              disable_irq(SPI0_IRQn);
   \   00000016   0x201A             MOVS     R0,#+26
   \   00000018   0x.... 0x....      BL       NVIC_DisableIRQ
    485          #if defined(CPU_MK60D10)
    486              SIM->SCGC6 &= ~SIM_SCGC6_SPI0_MASK;
    487          #elif defined(CPU_MK60DZ10) || defined(CPU_MK60F12) || defined(CPU_MK60F15)
    488              SIM->SCGC6 &= ~SIM_SCGC6_DSPI0_MASK;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    489          #endif 
    490            }
    491            else if(spix == SPI1)
    492            {
    493              disable_irq(SPI1_IRQn);
    494          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10) 
    495              SIM->SCGC6 &= ~SIM_SCGC6_SPI1_MASK; 
    496          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    497              SIM->SCGC6 &= ~SIM_SCGC6_DSPI1_MASK; 
    498          #endif
    499            }
    500            else if(spix == SPI2)
    501            {
    502              disable_irq(SPI2_IRQn);
    503          #if defined(CPU_MK60DZ10) || defined(CPU_MK60D10)  
    504              SIM->SCGC3 &= ~SIM_SCGC3_SPI2_MASK; 
    505          #elif defined(CPU_MK60F12) || defined(CPU_MK60F15)
    506              SIM->SCGC3 &= ~SIM_SCGC3_DSPI2_MASK; 
    507          #endif
    508            }
    509            else
    510              return 0;
    511            return 1;
   \                     ??LPLD_SPI_Deinit_1: (+1)
   \   0000002C   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Deinit_2: (+1)
   \   0000002E   0xBC02             POP      {R1}
   \   00000030   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_SPI_Deinit_0: (+1)
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x4002d000
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD10B             BNE.N    ??LPLD_SPI_Deinit_3
   \   0000003C   0x201B             MOVS     R0,#+27
   \   0000003E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   00000050   0x6008             STR      R0,[R1, #+0]
   \   00000052   0xE7EB             B.N      ??LPLD_SPI_Deinit_1
   \                     ??LPLD_SPI_Deinit_3: (+1)
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x400ac000
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD10B             BNE.N    ??LPLD_SPI_Deinit_4
   \   0000005C   0x201C             MOVS     R0,#+28
   \   0000005E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable8_35  ;; 0x40048030
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable8_35  ;; 0x40048030
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \   00000072   0xE7DB             B.N      ??LPLD_SPI_Deinit_1
   \                     ??LPLD_SPI_Deinit_4: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xE7DA             B.N      ??LPLD_SPI_Deinit_2
    512          }
    513          
    514          /*
    515           * LPLD_SPI_EnableIrq
    516           * 使能SPI外设中断
    517           * 
    518           * 参数:
    519           *    spi_init_structure--SPI初始化结构体，
    520           *                        具体定义见SPI_InitTypeDef
    521           *
    522           * 输出:
    523           *    0--配置错误
    524           *    1--配置成功
    525           */

   \                                 In section .text, align 2, keep-with-next
    526          uint8 LPLD_SPI_EnableIrq(SPI_InitTypeDef spi_init_structure)
    527          {
   \                     LPLD_SPI_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    528            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    529            if(spix == SPI0)
   \   00000006   0x....             LDR.N    R1,??DataTable8_2  ;; 0x4002c000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD106             BNE.N    ??LPLD_SPI_EnableIrq_0
    530            {
    531              enable_irq(SPI0_IRQn);
   \   0000000C   0x201A             MOVS     R0,#+26
   \   0000000E   0x.... 0x....      BL       NVIC_EnableIRQ
    532            }
    533            else if(spix == SPI1)
    534            {
    535              enable_irq(SPI1_IRQn);
    536            }
    537            else if(spix == SPI2)
    538            {
    539              enable_irq(SPI2_IRQn);
    540            }
    541            else
    542              return 0;
    543          
    544            return 1;
   \                     ??LPLD_SPI_EnableIrq_1: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_EnableIrq_2: (+1)
   \   00000014   0xBC02             POP      {R1}
   \   00000016   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_SPI_EnableIrq_0: (+1)
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable8_21  ;; 0x4002d000
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_3
   \   00000022   0x201B             MOVS     R0,#+27
   \   00000024   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000028   0xE7F3             B.N      ??LPLD_SPI_EnableIrq_1
   \                     ??LPLD_SPI_EnableIrq_3: (+1)
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x400ac000
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_4
   \   00000032   0x201C             MOVS     R0,#+28
   \   00000034   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000038   0xE7EB             B.N      ??LPLD_SPI_EnableIrq_1
   \                     ??LPLD_SPI_EnableIrq_4: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE7EA             B.N      ??LPLD_SPI_EnableIrq_2
    545          }
    546          
    547          /*
    548           * LPLD_SPI_EnableIrq
    549           * 禁止SPI外设中断
    550           * 
    551           * 参数:
    552           *    spi_init_structure--SPI初始化结构体，
    553           *                        具体定义见SPI_InitTypeDef
    554           *
    555           * 输出:
    556           *    0--配置错误
    557           *    1--配置成功
    558           */

   \                                 In section .text, align 2, keep-with-next
    559          uint8 LPLD_SPI_DisableIrq(SPI_InitTypeDef spi_init_structure)
    560          {
   \                     LPLD_SPI_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    561            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9802             LDR      R0,[SP, #+8]
    562            if(spix == SPI0)
   \   00000006   0x....             LDR.N    R1,??DataTable8_2  ;; 0x4002c000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD106             BNE.N    ??LPLD_SPI_DisableIrq_0
    563            {
    564              disable_irq(SPI0_IRQn);
   \   0000000C   0x201A             MOVS     R0,#+26
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
    565            }
    566            else if(spix == SPI1)
    567            {
    568              disable_irq(SPI1_IRQn);
    569            }
    570            else if(spix == SPI2)
    571            {
    572              disable_irq(SPI2_IRQn);
    573            }
    574            else
    575              return 0;
    576            return 1;
   \                     ??LPLD_SPI_DisableIrq_1: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_DisableIrq_2: (+1)
   \   00000014   0xBC02             POP      {R1}
   \   00000016   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_SPI_DisableIrq_0: (+1)
   \   0000001A   0x....             LDR.N    R1,??DataTable8_21  ;; 0x4002d000
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_3
   \   00000020   0x201B             MOVS     R0,#+27
   \   00000022   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000026   0xE7F4             B.N      ??LPLD_SPI_DisableIrq_1
   \                     ??LPLD_SPI_DisableIrq_3: (+1)
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x400ac000
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_4
   \   00000030   0x201C             MOVS     R0,#+28
   \   00000032   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000036   0xE7EC             B.N      ??LPLD_SPI_DisableIrq_1
   \                     ??LPLD_SPI_DisableIrq_4: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE7EB             B.N      ??LPLD_SPI_DisableIrq_2
    577          }
    578          
    579          /*
    580           * LPLD_SPI_Master_WriteRead
    581           * K60主机SPI向从机写数据，并读取从机数据
    582           * 
    583           * 参数:
    584           *    spix--SPI选择
    585           *      |__SPI0 -选择SPI0模块
    586           *      |__SPI1 -选择SPI1模块
    587           *      |__SPI2 -选择SPI2模块
    588           *    data--要发送数据
    589           *      |__单位为一个字节，8位
    590           *    pcsx--CS片选端口号
    591           *      |__SPI_PCS0 -0号片选(SPI0、SPI1、SPI2含有)
    592           *      |__SPI_PCS1 -1号片选(SPI0、SPI1、SPI2含有)
    593           *      |__SPI_PCS2 -2号片选(SPI0、SPI1含有)
    594           *      |__SPI_PCS3 -3号片选(SPI0、SPI1含有)
    595           *      |__SPI_PCS4 -4号片选(SPI0含有)
    596           *      |__SPI_PCS5 -5号片选(SPI0含有)
    597           *    pcs_state--一帧数据传输完成后CS的状态
    598           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    599           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    600           * 输出:
    601           *    读取从机8位的数据
    602           */

   \                                 In section .text, align 2, keep-with-next
    603          uint8 LPLD_SPI_Master_WriteRead(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    604          {
    605            uint8 temp;
    606            
    607            spix->PUSHR  = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT))&SPI_PUSHR_CONT_MASK)
    608                         |SPI_PUSHR_CTAS(0)
    609                         |SPI_PUSHR_PCS(pcsx)
    610                         |data;                 
   \                     LPLD_SPI_Master_WriteRead: (+1)
   \   00000000   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xF412 0x127C      ANDS     R2,R2,#0x3F0000
   \   0000000A   0xEA52 0x72C3      ORRS     R2,R2,R3, LSL #+31
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x4311             ORRS     R1,R1,R2
   \   00000012   0x6341             STR      R1,[R0, #+52]
    611            
    612            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_WriteRead_0: (+1)
   \   00000014   0x6AC1             LDR      R1,[R0, #+44]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_0
    613            spix->SR |= SPI_SR_TCF_MASK ;               
   \   0000001A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000001C   0xF051 0x4100      ORRS     R1,R1,#0x80000000
   \   00000020   0x62C1             STR      R1,[R0, #+44]
    614            
    615            while(!(spix->SR & SPI_SR_RFDF_MASK)); 
   \                     ??LPLD_SPI_Master_WriteRead_1: (+1)
   \   00000022   0x6AC1             LDR      R1,[R0, #+44]
   \   00000024   0x0389             LSLS     R1,R1,#+14
   \   00000026   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_1
    616            temp = (uint8)(spix->POPR & 0xff);           
   \   00000028   0x6B81             LDR      R1,[R0, #+56]
    617            spix->SR |= SPI_SR_RFDF_MASK;                
   \   0000002A   0x6AC2             LDR      R2,[R0, #+44]
   \   0000002C   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   00000030   0x62C2             STR      R2,[R0, #+44]
    618            return temp;
   \   00000032   0x0008             MOVS     R0,R1
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x4770             BX       LR               ;; return
    619            
    620          }
    621          
    622          /*
    623           * LPLD_SPI_Master_Read
    624           * K60主机读取从机数据
    625           * 
    626           * 参数:
    627           *    spix--SPI选择
    628           *      |__SPI0 -选择SPI0模块
    629           *      |__SPI1 -选择SPI1模块
    630           *      |__SPI2 -选择SPI2模块
    631           * 输出:
    632           *    读取从机8位的数据
    633           */

   \                                 In section .text, align 2, keep-with-next
    634          uint8 LPLD_SPI_Master_Read(SPI_Type *spix)
    635          {
    636            uint8 temp;
    637          
    638            while(!(spix->SR & SPI_SR_RFDF_MASK)); //=1 RIFO is not empty
   \                     LPLD_SPI_Master_Read: (+1)
   \                     ??LPLD_SPI_Master_Read_0: (+1)
   \   00000000   0x6AC1             LDR      R1,[R0, #+44]
   \   00000002   0x0389             LSLS     R1,R1,#+14
   \   00000004   0xD5FC             BPL.N    ??LPLD_SPI_Master_Read_0
    639            temp=(uint8)spix->POPR;
   \   00000006   0x6B81             LDR      R1,[R0, #+56]
    640            spix->SR |=SPI_SR_RFDF_MASK;
   \   00000008   0x6AC2             LDR      R2,[R0, #+44]
   \   0000000A   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   0000000E   0x62C2             STR      R2,[R0, #+44]
    641          
    642            return temp;
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x4770             BX       LR               ;; return
    643          }
    644          /*
    645           * LPLD_SPI_Master_Write
    646           * K60主机SPI向从机写数据
    647           * 
    648           * 参数:
    649           *    spix--SPI选择
    650           *      |__SPI0 -选择SPI0模块
    651           *      |__SPI1 -选择SPI1模块
    652           *      |__SPI2 -选择SPI2模块
    653           *    data--要发送数据
    654           *      |__单位为一个字节，8位
    655           *    pcsx--CS片选端口号
    656           *      |__SPI_PCS0  -0号片选(SPI0、SPI1、SPI2含有)
    657           *      |__SPI_PCS1  -1号片选(SPI0、SPI1、SPI2含有)
    658           *      |__SPI_PCS2  -2号片选(SPI0、SPI1含有)
    659           *      |__SPI_PCS3  -3号片选(SPI0、SPI1含有)
    660           *      |__SPI_PCS4  -4号片选(SPI0含有)
    661           *      |__SPI_PCS5  -5号片选(SPI0含有)
    662           *    pcs_state--一帧数据传输完成后CS的状态
    663           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    664           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    665           */

   \                                 In section .text, align 2, keep-with-next
    666          void LPLD_SPI_Master_Write(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    667          {  
    668            
    669            spix->PUSHR = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT)) & SPI_PUSHR_CONT_MASK)
    670                         |SPI_PUSHR_CTAS(0)
    671                         |SPI_PUSHR_PCS(pcsx)
    672                         |data; 
   \                     LPLD_SPI_Master_Write: (+1)
   \   00000000   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xF412 0x127C      ANDS     R2,R2,#0x3F0000
   \   0000000A   0xEA52 0x72C3      ORRS     R2,R2,R3, LSL #+31
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x4311             ORRS     R1,R1,R2
   \   00000012   0x6341             STR      R1,[R0, #+52]
    673          
    674            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_Write_0: (+1)
   \   00000014   0x6AC1             LDR      R1,[R0, #+44]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD5FC             BPL.N    ??LPLD_SPI_Master_Write_0
    675            spix->SR |= SPI_SR_TCF_MASK ;            
   \   0000001A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000001C   0xF051 0x4100      ORRS     R1,R1,#0x80000000
   \   00000020   0x62C1             STR      R1,[R0, #+44]
    676          }
   \   00000022   0x4770             BX       LR               ;; return
    677          
    678          

   \                                 In section .text, align 2, keep-with-next
    679          void SPI0_IRQHandler(void)
    680          {
   \                     SPI0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    681          #if (UCOS_II > 0u)
    682            OS_CPU_SR  cpu_sr = 0u;
    683            OS_ENTER_CRITICAL(); 
    684            OSIntEnter();
    685            OS_EXIT_CRITICAL();
    686          #endif
    687            if( SPI0->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI0_IRQHandler_0
    688            {
    689              SPI0_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_44
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    690              SPI0->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI0_IRQHandler_1
    691            }
    692            else if( SPI0->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI0_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI0_IRQHandler_2
    693            {
    694              SPI0_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_44
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    695              SPI0->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI0_IRQHandler_1
    696            }
    697            else if( SPI0->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI0_IRQHandler_2: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI0_IRQHandler_3
    698            {
    699              SPI0_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_44
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    700              SPI0->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI0_IRQHandler_1
    701            }
    702            else if( SPI0->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI0_IRQHandler_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI0_IRQHandler_4
    703            {  
    704              SPI0_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_44
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    705              SPI0->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI0_IRQHandler_1
    706            }
    707            else if( SPI0->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI0_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI0_IRQHandler_5
    708            {   
    709              SPI0_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_44
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    710              SPI0->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI0_IRQHandler_1
    711            }
    712            else if( SPI0->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI0_IRQHandler_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI0_IRQHandler_1
    713            {
    714              SPI0_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_44
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    715              SPI0->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    716            }
    717          #if (UCOS_II > 0u)
    718            OSIntExit();          
    719          #endif
    720          }
   \                     ??SPI0_IRQHandler_1: (+1)
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    721          
    722          

   \                                 In section .text, align 2, keep-with-next
    723          void SPI1_IRQHandler(void)
    724          {
   \                     SPI1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    725          #if (UCOS_II > 0u)
    726            OS_CPU_SR  cpu_sr = 0u;
    727            OS_ENTER_CRITICAL(); 
    728            OSIntEnter();
    729            OS_EXIT_CRITICAL();
    730          #endif
    731            if( SPI1->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI1_IRQHandler_0
    732            {
    733              SPI1_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_45
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    734              SPI1->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI1_IRQHandler_1
    735            }
    736            else if( SPI1->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI1_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI1_IRQHandler_2
    737            {
    738              SPI1_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_45
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    739              SPI1->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI1_IRQHandler_1
    740            }
    741            else if( SPI1->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI1_IRQHandler_2: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI1_IRQHandler_3
    742            {
    743              SPI1_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_45
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    744              SPI1->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI1_IRQHandler_1
    745            }
    746            else if( SPI1->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI1_IRQHandler_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI1_IRQHandler_4
    747            {  
    748              SPI1_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_45
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    749              SPI1->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI1_IRQHandler_1
    750            }
    751            else if( SPI1->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI1_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI1_IRQHandler_5
    752            {   
    753              SPI1_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_45
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    754              SPI1->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI1_IRQHandler_1
    755            }
    756            else if( SPI1->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI1_IRQHandler_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI1_IRQHandler_1
    757            {
    758              SPI1_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_45
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    759              SPI1->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    760            }
    761          #if (UCOS_II > 0u)
    762            OSIntExit();         
    763          #endif
    764          }
   \                     ??SPI1_IRQHandler_1: (+1)
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    765          
    766          

   \                                 In section .text, align 2, keep-with-next
    767          void SPI2_IRQHandler(void)
    768          {
   \                     SPI2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    769          #if (UCOS_II > 0u)
    770            OS_CPU_SR  cpu_sr = 0u;
    771            OS_ENTER_CRITICAL(); 
    772            OSIntEnter();
    773            OS_EXIT_CRITICAL();
    774          #endif
    775            if( SPI2->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI2_IRQHandler_0
    776            {
    777              SPI2_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_46
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    778              SPI2->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI2_IRQHandler_1
    779            }
    780            else if( SPI2->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI2_IRQHandler_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI2_IRQHandler_2
    781            {
    782              SPI2_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_46
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    783              SPI2->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI2_IRQHandler_1
    784            }
    785            else if( SPI2->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI2_IRQHandler_2: (+1)
   \   0000003A   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI2_IRQHandler_3
    786            {
    787              SPI2_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_46
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    788              SPI2->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI2_IRQHandler_1
    789            }
    790            else if( SPI2->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI2_IRQHandler_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI2_IRQHandler_4
    791            {  
    792              SPI2_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_46
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    793              SPI2->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI2_IRQHandler_1
    794            }
    795            else if( SPI2->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI2_IRQHandler_4: (+1)
   \   00000072   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI2_IRQHandler_5
    796            {   
    797              SPI2_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_46
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    798              SPI2->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI2_IRQHandler_1
    799            }
    800            else if( SPI2->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI2_IRQHandler_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI2_IRQHandler_1
    801            {
    802              SPI2_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_46
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    803              SPI2->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    804            }
    805          #if (UCOS_II > 0u)
    806            OSIntExit();          
    807          #endif
    808          }
   \                     ??SPI2_IRQHandler_1: (+1)
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x4004B018         DC32     0x4004b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x003F0C01         DC32     0x3f0c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x4004A024         DC32     0x4004a024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x4004D018         DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x4004D008         DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x4004D00C         DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   0x400AC000         DC32     0x400ac000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \   00000000   0x4004C03C         DC32     0x4004c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_40:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_41:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_42:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_43:
   \   00000000   0x4004C038         DC32     0x4004c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_44:
   \   00000000   0x........         DC32     SPI0_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_45:
   \   00000000   0x........         DC32     SPI1_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_46:
   \   00000000   0x........         DC32     SPI2_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_47:
   \   00000000   0x9A0A0000         DC32     0x9a0a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_48:
   \   00000000   0x4002C02C         DC32     0x4002c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_49:
   \   00000000   0x4002D02C         DC32     0x4002d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_50:
   \   00000000   0x400AC02C         DC32     0x400ac02c
    809          
    810          
    811          
    812          
    813          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_SPI_Deinit
        24   -> NVIC_DisableIRQ
      24   LPLD_SPI_DisableIrq
        24   -> NVIC_DisableIRQ
      24   LPLD_SPI_EnableIrq
        24   -> NVIC_EnableIRQ
      80   LPLD_SPI_Init
       0   LPLD_SPI_Master_Read
       0   LPLD_SPI_Master_Write
       0   LPLD_SPI_Master_WriteRead
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       8   SPI0_IRQHandler
         8   -- Indirect call
       8   SPI1_IRQHandler
         8   -- Indirect call
       8   SPI2_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_40
       4  ??DataTable8_41
       4  ??DataTable8_42
       4  ??DataTable8_43
       4  ??DataTable8_44
       4  ??DataTable8_45
       4  ??DataTable8_46
       4  ??DataTable8_47
       4  ??DataTable8_48
       4  ??DataTable8_49
       4  ??DataTable8_5
       4  ??DataTable8_50
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     120  LPLD_SPI_Deinit
      60  LPLD_SPI_DisableIrq
      62  LPLD_SPI_EnableIrq
    1776  LPLD_SPI_Init
      22  LPLD_SPI_Master_Read
      36  LPLD_SPI_Master_Write
      56  LPLD_SPI_Master_WriteRead
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
     170  SPI0_IRQHandler
      24  SPI0_ISR
     170  SPI1_IRQHandler
      24  SPI1_ISR
     170  SPI2_IRQHandler
      24  SPI2_ISR

 
    72 bytes in section .bss
 2 890 bytes in section .text
 
 2 890 bytes of CODE memory
    72 bytes of DATA memory

Errors: none
Warnings: none
