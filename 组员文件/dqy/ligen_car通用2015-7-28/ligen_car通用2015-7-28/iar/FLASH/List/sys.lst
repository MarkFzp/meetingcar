###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        27/Jul/2015  23:36:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\app\sys.c
#    Command line =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\app\sys.c
#        -D LPLD_K60 -D USE_K60F12 -lCN
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\List\
#        -lB
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\List\
#        -o
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4F -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\app\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\class\
#        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
#    List file    =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\List\sys.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\Obj\sys.o
#
###############################################################################

C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\app\sys.c
      1          #include "sys.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0xe000e100
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable20_1  ;; 0xe000e180
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x0940             LSRS     R0,R0,#+5
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
      2          

   \                                 In section .bss, align 4
      3          GPIO_InitTypeDef pta_init;
   \                     pta_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      4          GPIO_InitTypeDef ptb_init;
   \                     ptb_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      5          GPIO_InitTypeDef ptc_init;
   \                     ptc_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      6          GPIO_InitTypeDef pte_init;
   \                     pte_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      7          GPIO_InitTypeDef ptd_init;
   \                     ptd_init:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
      8          DMA_InitTypeDef dma_init_struct;
   \                     dma_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
      9          DMA_InitTypeDef dmac_init_struct;
   \                     dmac_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
     10          DMA_InitTypeDef dmad_init_struct;
   \                     dmad_init_struct:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
     11          ADC_InitTypeDef adc_init_struct;
   \                     adc_init_struct:
   \   00000000                      DS8 20
     12          void bm_init(void);
     13          void pit_init(void);
     14          void pit_isr(void);
     15          void dma0_isr(void);
     16          void dma1_isr(void);
     17          void lptmr_isr();
     18          void Boma_init_gpio();
     19          void dma_camera_isr();

   \                                 In section .bss, align 4
     20          int pitcnt=0;
   \                     pitcnt:
   \   00000000                      DS8 4
     21          #define DMA_MAX_NUM (32767)

   \                                 In section .bss, align 4
     22          int ch1_over_cnt = 0; //通道溢出计数
   \                     ch1_over_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          int ch2_over_cnt = 0;
   \                     ch2_over_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          uint32 ch1_pulseacc = 0;//脉冲累加值计数
   \                     ch1_pulseacc:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          uint32 ch2_pulseacc = 0;
   \                     ch2_pulseacc:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int cjh=0;
   \                     cjh:
   \   00000000                      DS8 4
     27          //变量声明
     28          //===以下为上位机相关=====
     29          #define MAX_S  14
     30          #define RX_SU  1
     31          #define RX_ER 0

   \                                 In section .bss, align 1
     32          uint8 flag_rx_succsess=RX_ER;
   \                     flag_rx_succsess:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     33          int8 FloatSave[12];
   \                     FloatSave:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     34          int8 RX[MAX_S];
   \                     RX:
   \   00000000                      DS8 16

   \                                 In section .bss, align 1
     35          int8 RX_FLAG=0;
   \                     RX_FLAG:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     36          uint16 ltpmt_temp=0;
   \                     ltpmt_temp:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     37          int8 sa[8];
   \                     sa:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
     38          uint8 count_RX;
   \                     count_RX:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     39          int str_ln=0;
   \                     str_ln:
   \   00000000                      DS8 4
     40          struct NUM_GET    //
     41          {
     42            float A;
     43            float B;
     44            float C;	
     45          };

   \                                 In section .bss, align 4
     46          struct NUM_GET NUM_A;
   \                     NUM_A:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     47          struct NUM_GET NUM_B;
   \                     NUM_B:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     48          struct NUM_GET NUM_C;
   \                     NUM_C:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     49          struct NUM_GET NUM_D;
   \                     NUM_D:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     50          struct NUM_GET NUM_E;
   \                     NUM_E:
   \   00000000                      DS8 12
     51          void ReceFloat(void);
     52          void NUM_GET(void);
     53          void NUM_Send(void);
     54          void FloatToChar(float floatNum, signed char* byteArry);
     55          void putstr(signed char *s,signed char a);
     56          
     57          //============================

   \                                 In section .bss, align 4
     58          int LED_i=0;
   \                     LED_i:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     59          int aaa=0;
   \                     aaa:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     60          uint8 Pix_Data[V][H];       //采集240行 250列的图像数据 
   \                     Pix_Data:
   \   00000000                      DS8 40800

   \                                 In section .bss, align 4
     61          uint8 ImageData[V_A][H_A]; //处理 80行  50列图像数据 
   \                     ImageData:
   \   00000000                      DS8 9000

   \                                 In section .bss, align 4
     62          uint8 ThresholdData[V_A][H_A];//二值化数据数组 
   \                     ThresholdData:
   \   00000000                      DS8 9000

   \                                 In section .data, align 4
     63          int V_Cnt=-1;                     //行采集计数
   \                     V_Cnt:
   \   00000000   0xFFFFFFFF         DC32 -1

   \                                 In section .bss, align 4
     64          int Is_DispPhoto=0;               //图像发送标志
   \                     Is_DispPhoto:
   \   00000000                      DS8 4
     65          extern FTM_InitTypeDef ftm_init_struct;

   \                                 In section .bss, align 4
     66          PIT_InitTypeDef pit_init_param;
   \                     pit_init_param:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     67          GPIO_InitTypeDef gpio_init_struct;
   \                     gpio_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     68          LPTMR_InitTypeDef lptmr_init_param;
   \                     lptmr_init_param:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     69          FTM_InitTypeDef ftm1_init_struct;
   \                     ftm1_init_struct:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
     70          int32 qd_result=0;
   \                     qd_result:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     71          float fs=-6;
   \                     fs:
   \   00000000   0xC0C00000         DC32 0C0C00000H

   \                                 In section .bss, align 4
     72          int GetFreq;
   \                     GetFreq:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     73          int GetCnt;
   \                     GetCnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     74          char pData1[1];
   \                     pData1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     75          char pData2[1];
   \                     pData2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     76          char pData3[1];
   \                     pData3:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
     77          void public_init(void)
     78          {
   \                     public_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     79            Boma_init_gpio();
   \   00000002   0x.... 0x....      BL       Boma_init_gpio
     80            LED_init_gpio();
   \   00000006   0x.... 0x....      BL       LED_init_gpio
     81            Camera_gpio_init();
   \   0000000A   0x.... 0x....      BL       Camera_gpio_init
     82            Camera_dma_init();
   \   0000000E   0x.... 0x....      BL       Camera_dma_init
     83            uart_init();
   \   00000012   0x.... 0x....      BL       uart_init
     84            
     85          
     86            bm_init();
   \   00000016   0x.... 0x....      BL       bm_init
     87            
     88              //LPTMR_MODE_PLACC脉冲累加模式
     89            //LPTMR_ALT1的输入口为PTA19
     90            //禁用中断
     91           // 无中断函数 
     92          //  GetFreq=0;
     93          //  GetCnt=0;
     94          //  lptmr_init_param.LPTMR_Mode = LPTMR_MODE_PLACC;
     95          //  lptmr_init_param.LPTMR_PluseAccInput = LPTMR_ALT1;
     96          //  lptmr_init_param.LPTMR_Isr = NULL;
     97          //   LPLD_LPTMR_Init(lptmr_init_param); 
     98          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     99          void ADC_init()
    100          {
   \                     ADC_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    101            adc_init_struct.ADC_Adcx = ADC0;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x4003b000
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable18
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    102            adc_init_struct.ADC_DiffMode = ADC_SE;        //单端采集
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000012   0x7108             STRB     R0,[R1, #+4]
    103            adc_init_struct.ADC_BitMode = SE_16BIT;       //单端12位精度
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable18
   \   0000001A   0x7148             STRB     R0,[R1, #+5]
    104            adc_init_struct.ADC_SampleTimeCfg = SAMTIME_SHORT;    //短采样时间
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000022   0x7188             STRB     R0,[R1, #+6]
    105            adc_init_struct.ADC_HwAvgSel = HW_DISAVG;       //4次硬件平均
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable18
   \   0000002A   0x7208             STRB     R0,[R1, #+8]
    106            adc_init_struct.ADC_CalEnable = TRUE; //使能初始化校验
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000032   0x72C8             STRB     R0,[R1, #+11]
    107            //初始化ADC
    108            LPLD_ADC_Init(adc_init_struct);
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable18
   \   00000038   0xB084             SUB      SP,SP,#+16
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x2214             MOVS     R2,#+20
   \   0000003E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000042   0xBC0F             POP      {R0-R3}
   \   00000044   0x.... 0x....      BL       LPLD_ADC_Init
    109            //为了保证复用功能不被占用，最好使能相应ADC通道
    110            //RUSH开发板的电位器使用DAD0通道进行采集
    111            //单端DAD1通道的引脚为(ADC2_DP0)
    112            LPLD_ADC_Chn_Enable(ADC0, AD9);
   \   00000048   0x2109             MOVS     R1,#+9
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable20_2  ;; 0x4003b000
   \   0000004E   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
    113             
    114          
    115          
    116          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void lptmr_isr()
    119          {
   \                     lptmr_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    120            
    121             
    122              if(GetCnt>1) //进行100次累加，累加次数越高，精度越高，但实时性降低
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xDB11             BLT.N    ??lptmr_isr_0
    123              {
    124                 GetFreq=ltpmt_temp/2; //取平均
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable18_3
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    125                 //printf("the PulseAcc:%d hz \r\n",GetFreq*100);
    126                 ltpmt_temp=0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable18_2
   \   00000024   0x8008             STRH     R0,[R1, #+0]
    127                 GetCnt=0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   0000002C   0x6008             STR      R0,[R1, #+0]
   \   0000002E   0xE00F             B.N      ??lptmr_isr_1
    128              }
    129              else
    130              {
    131               ltpmt_temp+=LPLD_LPTMR_GetPulseAcc();
   \                     ??lptmr_isr_0: (+1)
   \   00000030   0x.... 0x....      BL       LPLD_LPTMR_GetPulseAcc
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable18_2
   \   00000038   0x8809             LDRH     R1,[R1, #+0]
   \   0000003A   0x1840             ADDS     R0,R0,R1
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable18_2
   \   00000040   0x8008             STRH     R0,[R1, #+0]
    132                 GetCnt++;
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable18_1
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable18_1
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    133              }
    134              
    135              LPLD_LPTMR_ResetCounter();       //复位LPTMR0 counter 
   \                     ??lptmr_isr_1: (+1)
   \   00000050   0x.... 0x....      BL       LPLD_LPTMR_ResetCounter
    136              lptmr_init_param.LPTMR_Mode = LPTMR_MODE_PLACC;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
    137              lptmr_init_param.LPTMR_PluseAccInput = LPTMR_ALT1;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   00000062   0x7108             STRB     R0,[R1, #+4]
    138              lptmr_init_param.LPTMR_Isr = NULL;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable20_3
   \   0000006A   0x6088             STR      R0,[R1, #+8]
    139              LPLD_LPTMR_Init(lptmr_init_param);
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   00000070   0xC807             LDM      R0,{R0-R2}
   \   00000072   0x.... 0x....      BL       LPLD_LPTMR_Init
    140          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void Boma_init_gpio()
    143          {
   \                     Boma_init_gpio: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    144            
    145              // 配置 PTA28、PTA29 为GPIO功能,输入,内部下拉，不产生中断
    146              gpio_init_struct.GPIO_PTx = PTA;      
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x400ff000
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    147              gpio_init_struct.GPIO_Pins = GPIO_Pin28|GPIO_Pin29;     //引脚
   \   0000000C   0xF05F 0x5040      MOVS     R0,#+805306368
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000014   0x6048             STR      R0,[R1, #+4]
    148              gpio_init_struct.GPIO_Dir = DIR_INPUT;        //输入
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000001C   0x7308             STRB     R0,[R1, #+12]
    149              gpio_init_struct.GPIO_PinControl = INPUT_PULL_DOWN|IRQC_DIS;     //内部上拉|不产生中断
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000024   0x6088             STR      R0,[R1, #+8]
    150              LPLD_GPIO_Init(gpio_init_struct);
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000002A   0xB084             SUB      SP,SP,#+16
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x2214             MOVS     R2,#+20
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000034   0xBC0F             POP      {R0-R3}
   \   00000036   0x.... 0x....      BL       LPLD_GPIO_Init
    151              
    152              
    153              // 配置 PTB 为GPIO功能,输入,内部下拉，不产生中断
    154              gpio_init_struct.GPIO_PTx = PTB;      
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x400ff040
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000042   0x6008             STR      R0,[R1, #+0]
    155              gpio_init_struct.GPIO_Pins = GPIO_Pin4|GPIO_Pin5|GPIO_Pin9|GPIO_Pin11|GPIO_Pin17|GPIO_Pin19|GPIO_Pin21
    156                                          |GPIO_Pin20|GPIO_Pin23|GPIO_Pin22;     //引脚
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable18_6  ;; 0xfa0a30
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000004C   0x6048             STR      R0,[R1, #+4]
    157              gpio_init_struct.GPIO_Dir = DIR_INPUT;        //输入
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000054   0x7308             STRB     R0,[R1, #+12]
    158              gpio_init_struct.GPIO_PinControl = INPUT_PULL_DOWN|IRQC_DIS;     //内部上拉|不产生中断
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000005C   0x6088             STR      R0,[R1, #+8]
    159              LPLD_GPIO_Init(gpio_init_struct);
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000062   0xB084             SUB      SP,SP,#+16
   \   00000064   0x4668             MOV      R0,SP
   \   00000066   0x2214             MOVS     R2,#+20
   \   00000068   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000006C   0xBC0F             POP      {R0-R3}
   \   0000006E   0x.... 0x....      BL       LPLD_GPIO_Init
    160          
    161            // 配置 E4，低电平高驱动输出
    162            gpio_init_struct.GPIO_PTx = PTE;
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400ff100
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    163            gpio_init_struct.GPIO_Pins = GPIO_Pin4;
   \   0000007C   0x2010             MOVS     R0,#+16
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000082   0x6048             STR      R0,[R1, #+4]
    164            gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000008A   0x7308             STRB     R0,[R1, #+12]
    165            gpio_init_struct.GPIO_Output = OUTPUT_L;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000092   0x7348             STRB     R0,[R1, #+13]
    166            gpio_init_struct.GPIO_PinControl = OUTPUT_DSH;
   \   00000094   0x2040             MOVS     R0,#+64
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000009A   0x6088             STR      R0,[R1, #+8]
    167            LPLD_GPIO_Init(gpio_init_struct);
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   000000A0   0xB084             SUB      SP,SP,#+16
   \   000000A2   0x4668             MOV      R0,SP
   \   000000A4   0x2214             MOVS     R2,#+20
   \   000000A6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000AA   0xBC0F             POP      {R0-R3}
   \   000000AC   0x.... 0x....      BL       LPLD_GPIO_Init
    168            
    169            
    170          //      // 配置 PTA28、PTA29 为GPIO功能,输入,内部下拉，不产生中断
    171          //    gpio_init_struct.GPIO_PTx = PTA;      
    172          //    gpio_init_struct.GPIO_Pins = GPIO_Pin19;     //引脚
    173          //    gpio_init_struct.GPIO_Dir = DIR_INPUT;        //输入
    174          //    gpio_init_struct.GPIO_PinControl = INPUT_PULL_DOWN|IRQC_DIS;     //内部上拉|不产生中断
    175          //    LPLD_GPIO_Init(gpio_init_struct);
    176            
    177            
    178          }
   \   000000B0   0xBD01             POP      {R0,PC}          ;; return
    179          
    180          /*
    181          * 初始化FTM1的正交解码功能
    182          *
    183          */
    184          

   \                                 In section .text, align 2, keep-with-next
    185          void bm_init(void)
    186          {
   \                     bm_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    187            
    188            // 选择PTC0作为脉冲输入端
    189            // 配置成输入下拉电阻的模式
    190            // DMA上升沿触发
    191            // LPLD_GPIO_Init(PTC, 0, DIR_INPUT, INPUT_PDOWN, IRQC_DMARI); 
    192            ptc_init.GPIO_PTx = PTC;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable20_5  ;; 0x400ff080
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    193            ptc_init.GPIO_Dir = DIR_INPUT;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000014   0x7308             STRB     R0,[R1, #+12]
    194            ptc_init.GPIO_Pins = GPIO_Pin0;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000001C   0x6048             STR      R0,[R1, #+4]
    195            ptc_init.GPIO_PinControl =IRQC_DMARI | INPUT_PULL_DIS;
   \   0000001E   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   00000026   0x6088             STR      R0,[R1, #+8]
    196            LPLD_GPIO_Init(ptc_init); 
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable20_6
   \   0000002C   0xB084             SUB      SP,SP,#+16
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x2214             MOVS     R2,#+20
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000036   0xBC0F             POP      {R0-R3}
   \   00000038   0x.... 0x....      BL       LPLD_GPIO_Init
    197            
    198            // 选择PTB0作为脉冲输入端
    199            // 配置成输入下拉电阻的模式
    200            // DMA上升沿触发
    201            //LPLD_GPIO_Init(PTB, 0, DIR_INPUT, INPUT_PULL_DOWN, IRQC_DMARI); 
    202            ptb_init.GPIO_PTx = PTD;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x400ff0c0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000044   0x6008             STR      R0,[R1, #+0]
    203            ptb_init.GPIO_Dir = DIR_INPUT;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   0000004C   0x7308             STRB     R0,[R1, #+12]
    204            ptb_init.GPIO_Pins = GPIO_Pin8;
   \   0000004E   0xF44F 0x7080      MOV      R0,#+256
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000056   0x6048             STR      R0,[R1, #+4]
    205            ptb_init.GPIO_PinControl = IRQC_DMARI|INPUT_PULL_DIS;
   \   00000058   0xF45F 0x3080      MOVS     R0,#+65536
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000060   0x6088             STR      R0,[R1, #+8]
    206            LPLD_GPIO_Init(ptb_init); 
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000066   0xB084             SUB      SP,SP,#+16
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x2214             MOVS     R2,#+20
   \   0000006C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000070   0xBC0F             POP      {R0-R3}
   \   00000072   0x.... 0x....      BL       LPLD_GPIO_Init
    207            
    208          //    ptb_init.GPIO_PTx = PTA;
    209          //  ptb_init.GPIO_Dir = DIR_INPUT;
    210          //  ptb_init.GPIO_Pins = GPIO_Pin19;
    211          //  ptb_init.GPIO_PinControl = IRQC_DMARI|INPUT_PULL_DIS;
    212          //  LPLD_GPIO_Init(ptb_init); 
    213            
    214            
    215            //DMA初始化结构体赋值
    216            
    217            //DMA参数配置
    218            dmac_init_struct.DMA_CHx = DMA_CH1;    //CH0通道
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   0000007C   0x7008             STRB     R0,[R1, #+0]
    219            dmac_init_struct.DMA_Req = PORTC_DMAREQ;//PORTE为请求源
   \   0000007E   0x2033             MOVS     R0,#+51
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   00000084   0x7048             STRB     R0,[R1, #+1]
    220            dmac_init_struct.DMA_MajorLoopCnt = DMA_MAX_NUM; //主循环计数值：行采集点数，宽度
   \   00000086   0xF647 0x70FF      MOVW     R0,#+32767
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   0000008E   0x8088             STRH     R0,[R1, #+4]
    221            dmac_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   00000096   0x6088             STR      R0,[R1, #+8]
    222            dmac_init_struct.DMA_SourceAddr = (uint32)&pData1;//源地址：PTD0~7
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000A0   0x60C8             STR      R0,[R1, #+12]
    223            dmac_init_struct.DMA_DestAddr = (uint32)pData1;//目的地址：存放图像的数组
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000AA   0x6188             STR      R0,[R1, #+24]
    224            dmac_init_struct.DMA_MajorCompleteIntEnable=TRUE;
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000B2   0xF881 0x0025      STRB     R0,[R1, #+37]
    225            dmac_init_struct.DMA_Isr=dma0_isr;
   \   000000B6   0x.... 0x....      ADR.W    R0,dma0_isr
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000BE   0x6288             STR      R0,[R1, #+40]
    226            //初始化DMA
    227            LPLD_DMA_Init(dmac_init_struct);
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000C4   0xB084             SUB      SP,SP,#+16
   \   000000C6   0x4668             MOV      R0,SP
   \   000000C8   0x222C             MOVS     R2,#+44
   \   000000CA   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000CE   0xBC0F             POP      {R0-R3}
   \   000000D0   0x.... 0x....      BL       LPLD_DMA_Init
    228            
    229            
    230            
    231            
    232            //DMA参数配置
    233            dmad_init_struct.DMA_CHx = DMA_CH2;    //CH0通道
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
    234            dmad_init_struct.DMA_Req = PORTD_DMAREQ;//PORTE为请求源
   \   000000DC   0x2034             MOVS     R0,#+52
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000000E2   0x7048             STRB     R0,[R1, #+1]
    235            dmad_init_struct.DMA_MajorLoopCnt = DMA_MAX_NUM; //主循环计数值：行采集点数，宽度
   \   000000E4   0xF647 0x70FF      MOVW     R0,#+32767
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000000EC   0x8088             STRH     R0,[R1, #+4]
    236            dmad_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000000F4   0x6088             STR      R0,[R1, #+8]
    237            dmad_init_struct.DMA_SourceAddr = (uint32)&pData2;//源地址：PTD0~7
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable20_12
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000000FE   0x60C8             STR      R0,[R1, #+12]
    238            dmad_init_struct.DMA_DestAddr = (uint32)pData2;//目的地址：存放图像的数组
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable20_12
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000108   0x6188             STR      R0,[R1, #+24]
    239            dmad_init_struct.DMA_MajorCompleteIntEnable=TRUE;
   \   0000010A   0x2001             MOVS     R0,#+1
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000110   0xF881 0x0025      STRB     R0,[R1, #+37]
    240            dmad_init_struct.DMA_Isr=dma1_isr;
   \   00000114   0x.... 0x....      ADR.W    R0,dma1_isr
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000011C   0x6288             STR      R0,[R1, #+40]
    241            //初始化DMA
    242            LPLD_DMA_Init(dmad_init_struct);
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000122   0xB084             SUB      SP,SP,#+16
   \   00000124   0x4668             MOV      R0,SP
   \   00000126   0x222C             MOVS     R2,#+44
   \   00000128   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000012C   0xBC0F             POP      {R0-R3}
   \   0000012E   0x.... 0x....      BL       LPLD_DMA_Init
    243            
    244              //DMA参数配置
    245            dmad_init_struct.DMA_CHx = DMA_CH3;    //CH0通道
   \   00000132   0x2003             MOVS     R0,#+3
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000138   0x7008             STRB     R0,[R1, #+0]
    246            dmad_init_struct.DMA_Req = PORTA_DMAREQ;//PORTE为请求源
   \   0000013A   0x2031             MOVS     R0,#+49
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000140   0x7048             STRB     R0,[R1, #+1]
    247            dmad_init_struct.DMA_MajorLoopCnt = DMA_MAX_NUM; //主循环计数值：行采集点数，宽度
   \   00000142   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000146   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000014A   0x8088             STRH     R0,[R1, #+4]
    248            dmad_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   0000014C   0x2001             MOVS     R0,#+1
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000152   0x6088             STR      R0,[R1, #+8]
    249            dmad_init_struct.DMA_SourceAddr = (uint32)&pData3;//源地址：PTD0~7
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable20_13
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000015C   0x60C8             STR      R0,[R1, #+12]
    250            dmad_init_struct.DMA_DestAddr = (uint32)pData3;//目的地址：存放图像的数组
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable20_13
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000166   0x6188             STR      R0,[R1, #+24]
    251           // dmad_init_struct.DMA_MajorCompleteIntEnable=TRUE;
    252           // dmad_init_struct.DMA_Isr=dma1_isr;
    253            //初始化DMA
    254            LPLD_DMA_Init(dmad_init_struct);
   \   00000168   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000016C   0xB084             SUB      SP,SP,#+16
   \   0000016E   0x4668             MOV      R0,SP
   \   00000170   0x222C             MOVS     R2,#+44
   \   00000172   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000176   0xBC0F             POP      {R0-R3}
   \   00000178   0x.... 0x....      BL       LPLD_DMA_Init
    255            //....如果需要自行添加更多通道
    256            
    257            
    258            //    //初始化PIT
    259            //  pit_init_param.PIT_Pitx = PIT0;
    260            //  pit_init_param.PIT_PeriodMs = 10;//100ms 0.1khz
    261            //  pit_init_param.PIT_Isr = pit_isr; 
    262            //
    263            //  LPLD_PIT_Init(pit_init_param);
    264            
    265          }
   \   0000017C   0xB007             ADD      SP,SP,#+28
   \   0000017E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
    266          void dma0_isr(void)
    267          {
   \                     dma0_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    268            ch1_over_cnt++; //通道0溢出累加
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable20_14
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable20_14
   \   00000010   0x6008             STR      R0,[R1, #+0]
    269            //初始化DMA模块
    270            LPLD_DMA_Init(dmac_init_struct); 
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   00000016   0xB084             SUB      SP,SP,#+16
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x222C             MOVS     R2,#+44
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000020   0xBC0F             POP      {R0-R3}
   \   00000022   0x.... 0x....      BL       LPLD_DMA_Init
    271          }
   \   00000026   0xB007             ADD      SP,SP,#+28
   \   00000028   0xBD00             POP      {PC}             ;; return
    272          

   \                                 In section .text, align 4, keep-with-next
    273          void dma1_isr(void)
    274          {
   \                     dma1_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    275            ch2_over_cnt++;//通道1溢出累加
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable20_15
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable20_15
   \   00000010   0x6008             STR      R0,[R1, #+0]
    276            //初始化DMA模块
    277            LPLD_DMA_Init(dmad_init_struct); 
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000016   0xB084             SUB      SP,SP,#+16
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x222C             MOVS     R2,#+44
   \   0000001C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000020   0xBC0F             POP      {R0-R3}
   \   00000022   0x.... 0x....      BL       LPLD_DMA_Init
    278          }
   \   00000026   0xB007             ADD      SP,SP,#+28
   \   00000028   0xBD00             POP      {PC}             ;; return
    279          
    280          /*
    281          * PIT中断函数
    282          */

   \                                 In section .bss, align 4
    283          int lastspeed[3];
   \                     lastspeed:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
    284          int lastspeed_i=0;
   \                     lastspeed_i:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    285          int bm_err=0,bm_err_z=0,bm_err_y=0;
   \                     bm_err:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     bm_err_z:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     bm_err_y:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    286          int bm_z_last=0,bm_y_last=0;
   \                     bm_z_last:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     bm_y_last:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    287          int err_cs=0;
   \                     err_cs:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    288          void pit_isr(void)
    289          {
   \                     pit_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    290            bm_z = (DMA_MAX_NUM - DMA0->TCD[DMA_CH1].CITER_ELINKNO); //获得最终的脉冲累加值
   \   00000004   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable20_16  ;; 0x40009036
   \   0000000C   0x8809             LDRH     R1,[R1, #+0]
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x1A40             SUBS     R0,R0,R1
   \   00000012   0x.... 0x....      BL       __aeabi_i2f
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable20_17
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    291            bm_y = (DMA_MAX_NUM - DMA0->TCD[DMA_CH2].CITER_ELINKNO);
   \   0000001C   0xF647 0x70FF      MOVW     R0,#+32767
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable20_18  ;; 0x40009056
   \   00000024   0x8809             LDRH     R1,[R1, #+0]
   \   00000026   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0x.... 0x....      BL       __aeabi_i2f
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable20_19
   \   00000032   0x6008             STR      R0,[R1, #+0]
    292            if(fabss(bm_z-bm_y)>=30)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable20_19
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x.... 0x....      BL       __aeabi_fsub
   \   00000044   0x.... 0x....      BL       __aeabi_f2iz
   \   00000048   0x.... 0x....      BL       `fabss`
   \   0000004C   0x281E             CMP      R0,#+30
   \   0000004E   0xDB1B             BLT.N    ??pit_isr_0
    293            {
    294            bm_z=MIN(bm_z,bm_y);
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable20_19
   \   0000005A   0x6809             LDR      R1,[R1, #+0]
   \   0000005C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000060   0xD206             BCS.N    ??pit_isr_1
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable20_17
   \   0000006C   0x6008             STR      R0,[R1, #+0]
   \   0000006E   0xE005             B.N      ??pit_isr_2
   \                     ??pit_isr_1: (+1)
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable20_19
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable20_17
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    295           bm_y=bm_z;
   \                     ??pit_isr_2: (+1)
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable20_19
   \   00000086   0x6008             STR      R0,[R1, #+0]
    296            }
    297          GetFreq = (DMA_MAX_NUM - DMA0->TCD[DMA_CH3].CITER_ELINKNO);
   \                     ??pit_isr_0: (+1)
   \   00000088   0xF647 0x70FF      MOVW     R0,#+32767
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable20_20  ;; 0x40009076
   \   00000090   0x8809             LDRH     R1,[R1, #+0]
   \   00000092   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   0x1A40             SUBS     R0,R0,R1
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable18_3
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    298          //  if((bm_z-bm_z_last)>50&&(bm_y-bm_y_last)>50&&err_cs<3) 
    299          //  {err_cs++;
    300          //  bm_z=bm_z_last;
    301          //  bm_y=bm_y_last;
    302          //  }
    303          //  else
    304          //  {
    305          //    err_cs=0;
    306          //  }
    307          //  
    308          //  if(fabss(bm_z_last-bm_z)>30&&fabss(bm_y_last-bm_y)<20&&bm_err_z<3) bm_err_z++; else bm_err_z=0;
    309          //  if(fabss(bm_y_last-bm_y)>30&&fabss(bm_z_last-bm_z)<20&&bm_err_y<3) bm_err_y++; else bm_err_y=0;
    310          //  if(bm_err_z>0) bm_z=bm_z_last; else bm_z_last=bm_z;
    311          //  if(bm_err_y>0) bm_y=bm_y_last; else bm_y_last=bm_y;
    312            
    313            
    314            
    315          
    316            bm_pz=(bm_z+bm_y)/2;
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable20_17
   \   000000A0   0x6801             LDR      R1,[R0, #+0]
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable20_19
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x.... 0x....      BL       __aeabi_fadd
   \   000000AC   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   000000B0   0x.... 0x....      BL       __aeabi_fdiv
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable20_21
   \   000000B8   0x6008             STR      R0,[R1, #+0]
    317            
    318            //  if(ch1_over_cnt !=0)
    319            //  {
    320            //    bm_z = bm_z + DMA_MAX_NUM*ch1_over_cnt;
    321            //    ch1_over_cnt = 0;  //清零溢出计数
    322            //  }
    323            //  
    324            //  if(ch2_over_cnt !=0)
    325            //  {
    326            //    bm_y = bm_y + DMA_MAX_NUM*ch2_over_cnt;
    327            //    ch2_over_cnt = 0;
    328            //  }
    329            //DMA参数配置
    330            dmac_init_struct.DMA_CHx = DMA_CH1;    //CH0通道
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
    331            dmac_init_struct.DMA_Req = PORTC_DMAREQ;//PORTE为请求源
   \   000000C2   0x2033             MOVS     R0,#+51
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000C8   0x7048             STRB     R0,[R1, #+1]
    332            dmac_init_struct.DMA_MajorLoopCnt = DMA_MAX_NUM; //主循环计数值：行采集点数，宽度
   \   000000CA   0xF647 0x70FF      MOVW     R0,#+32767
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000D2   0x8088             STRH     R0,[R1, #+4]
    333            dmac_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000DA   0x6088             STR      R0,[R1, #+8]
    334            dmac_init_struct.DMA_SourceAddr = (uint32)&pData1;//源地址：PTD0~7
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000E4   0x60C8             STR      R0,[R1, #+12]
    335            dmac_init_struct.DMA_DestAddr = (uint32)pData1;//目的地址：存放图像的数组
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000EE   0x6188             STR      R0,[R1, #+24]
    336            dmac_init_struct.DMA_MajorCompleteIntEnable=TRUE;
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   000000F6   0xF881 0x0025      STRB     R0,[R1, #+37]
    337            dmac_init_struct.DMA_Isr=dma0_isr;
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable20_22
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   00000102   0x6288             STR      R0,[R1, #+40]
    338            //初始化DMA
    339            LPLD_DMA_Init(dmac_init_struct);
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable20_9
   \   00000108   0xB084             SUB      SP,SP,#+16
   \   0000010A   0x4668             MOV      R0,SP
   \   0000010C   0x222C             MOVS     R2,#+44
   \   0000010E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000112   0xBC0F             POP      {R0-R3}
   \   00000114   0x.... 0x....      BL       LPLD_DMA_Init
    340            
    341            
    342            
    343            
    344            //DMA参数配置
    345            dmad_init_struct.DMA_CHx = DMA_CH2;    //CH0通道
   \   00000118   0x2002             MOVS     R0,#+2
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000011E   0x7008             STRB     R0,[R1, #+0]
    346            dmad_init_struct.DMA_Req = PORTD_DMAREQ;//PORTE为请求源
   \   00000120   0x2034             MOVS     R0,#+52
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000126   0x7048             STRB     R0,[R1, #+1]
    347            dmad_init_struct.DMA_MajorLoopCnt = DMA_MAX_NUM; //主循环计数值：行采集点数，宽度
   \   00000128   0xF647 0x70FF      MOVW     R0,#+32767
   \   0000012C   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000130   0x8088             STRH     R0,[R1, #+4]
    348            dmad_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   00000132   0x2001             MOVS     R0,#+1
   \   00000134   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000138   0x6088             STR      R0,[R1, #+8]
    349            dmad_init_struct.DMA_SourceAddr = (uint32)&pData2;//源地址：PTD0~7
   \   0000013A   0x.... 0x....      LDR.W    R0,??DataTable20_12
   \   0000013E   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000142   0x60C8             STR      R0,[R1, #+12]
    350            dmad_init_struct.DMA_DestAddr = (uint32)pData2;//目的地址：存放图像的数组
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable20_12
   \   00000148   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000014C   0x6188             STR      R0,[R1, #+24]
    351            dmad_init_struct.DMA_MajorCompleteIntEnable=TRUE;
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000154   0xF881 0x0025      STRB     R0,[R1, #+37]
    352            dmad_init_struct.DMA_Isr=dma1_isr;
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable20_23
   \   0000015C   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000160   0x6288             STR      R0,[R1, #+40]
    353            //初始化DMA
    354            LPLD_DMA_Init(dmad_init_struct);
   \   00000162   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000166   0xB084             SUB      SP,SP,#+16
   \   00000168   0x4668             MOV      R0,SP
   \   0000016A   0x222C             MOVS     R2,#+44
   \   0000016C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000170   0xBC0F             POP      {R0-R3}
   \   00000172   0x.... 0x....      BL       LPLD_DMA_Init
    355          //  
    356                //DMA参数配置
    357            dmad_init_struct.DMA_CHx = DMA_CH3;    //CH0通道
   \   00000176   0x2003             MOVS     R0,#+3
   \   00000178   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000017C   0x7008             STRB     R0,[R1, #+0]
    358            dmad_init_struct.DMA_Req = PORTA_DMAREQ;//PORTE为请求源
   \   0000017E   0x2031             MOVS     R0,#+49
   \   00000180   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000184   0x7048             STRB     R0,[R1, #+1]
    359            dmad_init_struct.DMA_MajorLoopCnt = DMA_MAX_NUM; //主循环计数值：行采集点数，宽度
   \   00000186   0xF647 0x70FF      MOVW     R0,#+32767
   \   0000018A   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   0000018E   0x8088             STRH     R0,[R1, #+4]
    360            dmad_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   00000190   0x2001             MOVS     R0,#+1
   \   00000192   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   00000196   0x6088             STR      R0,[R1, #+8]
    361            dmad_init_struct.DMA_SourceAddr = (uint32)&pData3;//源地址：PTD0~7
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable20_13
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000001A0   0x60C8             STR      R0,[R1, #+12]
    362            dmad_init_struct.DMA_DestAddr = (uint32)pData3;//目的地址：存放图像的数组
   \   000001A2   0x.... 0x....      LDR.W    R0,??DataTable20_13
   \   000001A6   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000001AA   0x6188             STR      R0,[R1, #+24]
    363          //  dmad_init_struct.DMA_MajorCompleteIntEnable=TRUE;
    364          //  dmad_init_struct.DMA_Isr=dma1_isr;
    365            //初始化DMA
    366            LPLD_DMA_Init(dmad_init_struct);
   \   000001AC   0x.... 0x....      LDR.W    R1,??DataTable20_11
   \   000001B0   0xB084             SUB      SP,SP,#+16
   \   000001B2   0x4668             MOV      R0,SP
   \   000001B4   0x222C             MOVS     R2,#+44
   \   000001B6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001BA   0xBC0F             POP      {R0-R3}
   \   000001BC   0x.... 0x....      BL       LPLD_DMA_Init
    367            //....如果需要自行添加更多通道
    368            //  LPLD_DMA_EnableReq(DMA_CH1); //开启通道请求
    369            //  LPLD_DMA_EnableReq(DMA_CH2);
    370            
    371            
    372          }
   \   000001C0   0xB007             ADD      SP,SP,#+28
   \   000001C2   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
    373          void Camera_dma_init()
    374          {  V_Cnt=0;          //行计数
   \                     Camera_dma_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_24
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    375          Is_DispPhoto=0;   //显示图像
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable20_25
   \   00000012   0x6008             STR      R0,[R1, #+0]
    376          //DMA参数配置
    377          dma_init_struct.DMA_CHx = DMA_CH0;    //CH0通道
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    378          dma_init_struct.DMA_Req = PORTE_DMAREQ;//PORTE为请求源
   \   0000001C   0x2035             MOVS     R0,#+53
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   00000022   0x7048             STRB     R0,[R1, #+1]
    379          dma_init_struct.DMA_MajorLoopCnt = H; //主循环计数值：行采集点数，宽度
   \   00000024   0xF44F 0x70CC      MOV      R0,#+408
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   0000002C   0x8088             STRH     R0,[R1, #+4]
    380          dma_init_struct.DMA_MinorByteCnt = 1; //次循环字节计数：每次读入1字节
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   00000034   0x6088             STR      R0,[R1, #+8]
    381          dma_init_struct.DMA_SourceAddr = (uint32)&PTD->PDIR;//源地址：PTD0~7
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable20_27  ;; 0x400ff0d0
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   0000003E   0x60C8             STR      R0,[R1, #+12]
    382          dma_init_struct.DMA_DestAddr = (uint32)Pix_Data;//目的地址：存放图像的数组
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable20_28
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   00000048   0x6188             STR      R0,[R1, #+24]
    383          dma_init_struct.DMA_DestAddrOffset = 1;    //目的地址偏移：每次读入增加1
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   00000050   0x83C8             STRH     R0,[R1, #+30]
    384          dma_init_struct.DMA_AutoDisableReq = TRUE; //自动禁用请求
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   00000058   0xF881 0x0024      STRB     R0,[R1, #+36]
    385          
    386          //初始化DMA
    387          LPLD_DMA_Init(dma_init_struct);
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable20_26
   \   00000060   0xB084             SUB      SP,SP,#+16
   \   00000062   0x4668             MOV      R0,SP
   \   00000064   0x222C             MOVS     R2,#+44
   \   00000066   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000006A   0xBC0F             POP      {R0-R3}
   \   0000006C   0x.... 0x....      BL       LPLD_DMA_Init
    388          
    389          }
   \   00000070   0xB007             ADD      SP,SP,#+28
   \   00000072   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
    390          void dma_camera_isr()
    391          {LED_D_T;
   \                     dma_camera_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x211A             MOVS     R1,#+26
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400ff100
   \   00000008   0x.... 0x....      BL       LPLD_GPIO_Toggle_b
    392          LPLD_UART_PutCharArr(UART4,"接收结束",8);
   \   0000000C   0x2208             MOVS     R2,#+8
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable20_29
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable20_30  ;; 0x400ea000
   \   00000016   0x.... 0x....      BL       LPLD_UART_PutCharArr
    393          //清行中断标志，防止进入无效行中断
    394          LPLD_GPIO_ClearIntFlag(PORTB);
   \   0000001A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable20_31  ;; 0x4004a0a0
   \   00000022   0x6008             STR      R0,[R1, #+0]
    395          enable_irq(PORTB_IRQn);
   \   00000024   0x2058             MOVS     R0,#+88
   \   00000026   0x.... 0x....      BL       NVIC_EnableIRQ
    396          
    397          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    398          

   \                                 In section .text, align 2, keep-with-next
    399          void Camera_gpio_init(void)
    400          {
   \                     Camera_gpio_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    401            //OV数据口初始化：PTD0~PTD7
    402            ptd_init.GPIO_PTx = PTD;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x400ff0c0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable20_32
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    403            ptd_init.GPIO_Dir = DIR_INPUT;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable20_32
   \   00000012   0x7308             STRB     R0,[R1, #+12]
    404            ptd_init.GPIO_Pins = GPIO_Pin0_7;
   \   00000014   0x20FF             MOVS     R0,#+255
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable20_32
   \   0000001A   0x6048             STR      R0,[R1, #+4]
    405            ptd_init.GPIO_PinControl = IRQC_DIS | INPUT_PULL_UP;
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable20_32
   \   00000022   0x6088             STR      R0,[R1, #+8]
    406            LPLD_GPIO_Init(ptd_init);
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable20_32
   \   00000028   0xB084             SUB      SP,SP,#+16
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x2214             MOVS     R2,#+20
   \   0000002E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000032   0xBC0F             POP      {R0-R3}
   \   00000034   0x.... 0x....      BL       LPLD_GPIO_Init
    407            
    408            //OV行信号接口初始化：PTB3-H
    409            ptb_init.GPIO_PTx = PTB;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable18_5  ;; 0x400ff040
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000040   0x6008             STR      R0,[R1, #+0]
    410            ptb_init.GPIO_Dir = DIR_INPUT;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000048   0x7308             STRB     R0,[R1, #+12]
    411            ptb_init.GPIO_Pins = GPIO_Pin3;
   \   0000004A   0x2008             MOVS     R0,#+8
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000050   0x6048             STR      R0,[R1, #+4]
    412            ptb_init.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN;
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable20_33  ;; 0x90002
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   0000005A   0x6088             STR      R0,[R1, #+8]
    413            ptb_init.GPIO_Isr = portb_isr;
   \   0000005C   0x.... 0x....      ADR.W    R0,portb_isr
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   00000064   0x6108             STR      R0,[R1, #+16]
    414            LPLD_GPIO_Init(ptb_init); 
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable20_8
   \   0000006A   0xB084             SUB      SP,SP,#+16
   \   0000006C   0x4668             MOV      R0,SP
   \   0000006E   0x2214             MOVS     R2,#+20
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000074   0xBC0F             POP      {R0-R3}
   \   00000076   0x.... 0x....      BL       LPLD_GPIO_Init
    415            
    416            //OV场信号接口初始化：PTA17-V
    417            pta_init.GPIO_PTx = PTA;
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x400ff000
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable20_34
   \   00000082   0x6008             STR      R0,[R1, #+0]
    418            pta_init.GPIO_Dir = DIR_INPUT;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable20_34
   \   0000008A   0x7308             STRB     R0,[R1, #+12]
    419            pta_init.GPIO_Pins = GPIO_Pin17;
   \   0000008C   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable20_34
   \   00000094   0x6048             STR      R0,[R1, #+4]
    420            pta_init.GPIO_PinControl = IRQC_RI|INPUT_PULL_DOWN;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable20_33  ;; 0x90002
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable20_34
   \   0000009E   0x6088             STR      R0,[R1, #+8]
    421            pta_init.GPIO_Isr = porta_isr;
   \   000000A0   0x.... 0x....      ADR.W    R0,porta_isr
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable20_34
   \   000000A8   0x6108             STR      R0,[R1, #+16]
    422            LPLD_GPIO_Init(pta_init); 
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable20_34
   \   000000AE   0xB084             SUB      SP,SP,#+16
   \   000000B0   0x4668             MOV      R0,SP
   \   000000B2   0x2214             MOVS     R2,#+20
   \   000000B4   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000B8   0xBC0F             POP      {R0-R3}
   \   000000BA   0x.... 0x....      BL       LPLD_GPIO_Init
    423            
    424            //OV PCLK信号接口初始化：PTE6-PCLK
    425            pte_init.GPIO_PTx = PTE;
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400ff100
   \   000000C2   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000C6   0x6008             STR      R0,[R1, #+0]
    426            pte_init.GPIO_Pins = GPIO_Pin6;
   \   000000C8   0x2040             MOVS     R0,#+64
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000CE   0x6048             STR      R0,[R1, #+4]
    427            pte_init.GPIO_Dir = DIR_INPUT;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000D6   0x7308             STRB     R0,[R1, #+12]
    428            pte_init.GPIO_PinControl = IRQC_DMARI | INPUT_PULL_DOWN;
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable20_35  ;; 0x10002
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000E0   0x6088             STR      R0,[R1, #+8]
    429            LPLD_GPIO_Init(pte_init); 
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000E6   0xB084             SUB      SP,SP,#+16
   \   000000E8   0x4668             MOV      R0,SP
   \   000000EA   0x2214             MOVS     R2,#+20
   \   000000EC   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000F0   0xBC0F             POP      {R0-R3}
   \   000000F2   0x.... 0x....      BL       LPLD_GPIO_Init
    430          //  
    431          //    //OV PCLK信号接口初始化：PTE6-PCLK
    432            pte_init.GPIO_PTx = PTA;
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable18_4  ;; 0x400ff000
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable21
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    433            pte_init.GPIO_Pins = GPIO_Pin19;
   \   00000100   0xF45F 0x2000      MOVS     R0,#+524288
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000108   0x6048             STR      R0,[R1, #+4]
    434            pte_init.GPIO_Dir = DIR_INPUT;
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000110   0x7308             STRB     R0,[R1, #+12]
    435            pte_init.GPIO_PinControl = IRQC_DMARI | INPUT_PULL_DOWN;
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable20_35  ;; 0x10002
   \   00000116   0x.... 0x....      LDR.W    R1,??DataTable21
   \   0000011A   0x6088             STR      R0,[R1, #+8]
    436            LPLD_GPIO_Init(pte_init); 
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable21
   \   00000120   0xB084             SUB      SP,SP,#+16
   \   00000122   0x4668             MOV      R0,SP
   \   00000124   0x2214             MOVS     R2,#+20
   \   00000126   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000012A   0xBC0F             POP      {R0-R3}
   \   0000012C   0x.... 0x....      BL       LPLD_GPIO_Init
    437            
    438            
    439          }
   \   00000130   0xBD01             POP      {R0,PC}          ;; return
    440          
    441          
    442          

   \                                 In section .bss, align 4
    443          int joc=0;
   \                     joc:
   \   00000000                      DS8 4
    444          

   \                                 In section .bss, align 4
    445          int V_count=0;
   \                     V_count:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
    446          void porta_isr()//V-场信号
    447          { 
   \                     porta_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    448            pit_isr();
   \   00000002   0x.... 0x....      BL       pit_isr
    449          //  lptmr_isr();
    450            LPLD_DMA_EnableReq(DMA_CH1); //开启通道请求
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable20_36  ;; 0x4000800c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable20_36  ;; 0x4000800c
   \   00000014   0x6008             STR      R0,[R1, #+0]
    451            LPLD_DMA_EnableReq(DMA_CH2);
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable20_36  ;; 0x4000800c
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable20_36  ;; 0x4000800c
   \   00000024   0x6008             STR      R0,[R1, #+0]
    452           LPLD_DMA_EnableReq(DMA_CH3);
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable20_36  ;; 0x4000800c
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable20_36  ;; 0x4000800c
   \   00000034   0x6008             STR      R0,[R1, #+0]
    453            if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin17)){joc++;}
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable21_1  ;; 0x400490a0
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x0380             LSLS     R0,R0,#+14
   \   0000003E   0xD506             BPL.N    ??porta_isr_0
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable20_37
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable20_37
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    454            if(LPLD_GPIO_IsPinxExt(PORTA, GPIO_Pin17) &&Is_DispPhoto==0)
   \                     ??porta_isr_0: (+1)
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable21_1  ;; 0x400490a0
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x0380             LSLS     R0,R0,#+14
   \   00000056   0xD51F             BPL.N    ??porta_isr_1
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable20_25
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD11A             BNE.N    ??porta_isr_1
    455            {if(V_count<10000)V_count++;
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable20_38
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF242 0x7110      MOVW     R1,#+10000
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xDA06             BGE.N    ??porta_isr_2
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable20_38
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable20_38
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    456            //检测到场开始信号，加载目的地址
    457            LPLD_DMA_LoadDstAddr(DMA_CH0, Pix_Data);
   \                     ??porta_isr_2: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable20_28
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable20_39  ;; 0x40009010
   \   00000086   0x6008             STR      R0,[R1, #+0]
    458            //清行中断标志，防止进入无效行中断
    459            LPLD_GPIO_ClearIntFlag(PORTB);
   \   00000088   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable20_31  ;; 0x4004a0a0
   \   00000090   0x6008             STR      R0,[R1, #+0]
    460            enable_irq(PORTB_IRQn);
   \   00000092   0x2058             MOVS     R0,#+88
   \   00000094   0x.... 0x....      BL       NVIC_EnableIRQ
    461            }
    462            
    463            if(joc>1)
   \                     ??porta_isr_1: (+1)
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable20_37
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0x2802             CMP      R0,#+2
   \   000000A0   0xDB03             BLT.N    ??porta_isr_3
    464            {
    465              joc=0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable20_37
   \   000000A8   0x6008             STR      R0,[R1, #+0]
    466              
    467            }
    468            
    469            LPLD_GPIO_ClearIntFlag(PORTA);
   \                     ??porta_isr_3: (+1)
   \   000000AA   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable21_1  ;; 0x400490a0
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    470            
    471          }
   \   000000B4   0xBD01             POP      {R0,PC}          ;; return
    472          //int cjhs_a[V]={  
    473          //1,2,3,4,5,6,7,8,9,10,
    474          //11,12,13,14,15,16,17,18,19,20,
    475          //21,22,23,24,25,26,27,28,29,30,
    476          //31,32,33,34,35,36,37,38,39,40,
    477          //41,42,43,44,45,46,47,48,49,50,
    478          //52,54,56,58,60,62,64,66,68,70,
    479          //72,74,76,78,80,82,84,86,88,90,
    480          //93,96,99,102,105,108,111,114,117,120,
    481          //123,126,129,132,135,138,141,144,147,150,
    482          //155,160,165,170,175,180,185,190,200,210
    483          //};

   \                                 In section .data, align 4
    484          int cjhs_a[V]={  
   \                     cjhs_a:
   \   00000000   0x00000001         DC32 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
   \              0x00000002   
   \              0x00000003   
   \              0x00000004   
   \              0x00000005   
   \              0x00000006   
   \              0x00000007   
   \              0x00000008   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000B   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000E   
   \              0x0000000F   
   \              0x00000010   
   \              0x00000011   
   \              0x00000012   
   \              0x00000013   
   \   0000004C   0x00000014         DC32 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
   \              0x00000015   
   \              0x00000016   
   \              0x00000017   
   \              0x00000018   
   \              0x00000019   
   \              0x0000001A   
   \              0x0000001B   
   \              0x0000001C   
   \              0x0000001D   
   \              0x0000001E   
   \              0x0000001F   
   \              0x00000020   
   \              0x00000021   
   \              0x00000022   
   \              0x00000023   
   \              0x00000024   
   \   00000090   0x00000025         DC32 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 56
   \              0x00000026   
   \              0x00000027   
   \              0x00000028   
   \              0x00000029   
   \              0x0000002A   
   \              0x0000002B   
   \              0x0000002C   
   \              0x0000002D   
   \              0x0000002E   
   \              0x0000002F   
   \              0x00000030   
   \              0x00000031   
   \              0x00000032   
   \              0x00000034   
   \              0x00000036   
   \              0x00000038   
   \   000000D4   0x0000003A         DC32 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90
   \              0x0000003C   
   \              0x0000003E   
   \              0x00000040   
   \              0x00000042   
   \              0x00000044   
   \              0x00000046   
   \              0x00000048   
   \              0x0000004A   
   \              0x0000004C   
   \              0x0000004E   
   \              0x00000050   
   \              0x00000052   
   \              0x00000054   
   \              0x00000056   
   \              0x00000058   
   \              0x0000005A   
   \   00000118   0x0000005D         DC32 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132
   \              0x00000060   
   \              0x00000063   
   \              0x00000066   
   \              0x00000069   
   \              0x0000006C   
   \              0x0000006F   
   \              0x00000072   
   \              0x00000075   
   \              0x00000078   
   \              0x0000007B   
   \              0x0000007E   
   \              0x00000081   
   \              0x00000084   
   \   00000150   0x00000087         DC32 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195
   \              0x0000008C   
   \              0x00000091   
   \              0x00000096   
   \              0x0000009B   
   \              0x000000A0   
   \              0x000000A5   
   \              0x000000AA   
   \              0x000000AF   
   \              0x000000B4   
   \              0x000000B9   
   \              0x000000BE   
   \              0x000000C3   
   \   00000184   0x000000CD         DC32 205, 210, 215
   \              0x000000D2   
   \              0x000000D7   
    485          1,2,3,4,5,6,7,8,9,10,
    486          11,12,13,14,15,16,17,18,19,20,
    487          21,22,23,24,25,26,27,28,29,30,
    488          31,32,33,34,35,36,37,38,39,40,
    489          41,42,43,44,45,46,47,48,49,50,
    490          52,54,56,58,60,62,64,66,68,70,
    491          72,74,76,78,80,82,84,86,88,90,
    492          93,96,99,102,105,108,111,114,117,120,
    493          123,126,129,132,135,140,145,150,155,160,
    494          165,170,175,180,185,190,195,205,210,215
    495          };
    496          
    497          
    498          //int cjhs[V]={  
    499          //1,2,3,4,5,6,7,8,9,10,
    500          //11,12,13,14,15,16,17,18,19,20,
    501          //21,22,23,24,25,26,27,28,29,30,
    502          //31,32,33,34,35,36,37,38,39,40,
    503          //41,42,43,44,45,46,47,48,49,50,
    504          //51,52,53,54,55,56,57,58,59,60,
    505          //61,62,63,64,65,66,67,68,69,70,
    506          //72,74,76,78,80,82,84,86,88,90,
    507          //93,96,99,102,105,108,111,114,117,120,
    508          //123,126,129,132,135,138,141,144,147,150,
    509          //};
    510          
    511          

   \                                 In section .data, align 4
    512          int cjhs[V]={  
   \                     cjhs:
   \   00000000   0x00000001         DC32 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
   \              0x00000002   
   \              0x00000003   
   \              0x00000004   
   \              0x00000005   
   \              0x00000006   
   \              0x00000007   
   \              0x00000008   
   \              0x00000009   
   \              0x0000000A   
   \              0x0000000B   
   \              0x0000000C   
   \              0x0000000D   
   \              0x0000000E   
   \              0x0000000F   
   \              0x00000010   
   \              0x00000011   
   \              0x00000012   
   \              0x00000013   
   \   0000004C   0x00000014         DC32 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
   \              0x00000015   
   \              0x00000016   
   \              0x00000017   
   \              0x00000018   
   \              0x00000019   
   \              0x0000001A   
   \              0x0000001B   
   \              0x0000001C   
   \              0x0000001D   
   \              0x0000001E   
   \              0x0000001F   
   \              0x00000020   
   \              0x00000021   
   \              0x00000022   
   \              0x00000023   
   \              0x00000024   
   \   00000090   0x00000025         DC32 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
   \              0x00000026   
   \              0x00000027   
   \              0x00000028   
   \              0x00000029   
   \              0x0000002A   
   \              0x0000002B   
   \              0x0000002C   
   \              0x0000002D   
   \              0x0000002E   
   \              0x0000002F   
   \              0x00000030   
   \              0x00000031   
   \              0x00000032   
   \              0x00000033   
   \              0x00000034   
   \              0x00000035   
   \   000000D4   0x00000036         DC32 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70
   \              0x00000037   
   \              0x00000038   
   \              0x00000039   
   \              0x0000003A   
   \              0x0000003B   
   \              0x0000003C   
   \              0x0000003D   
   \              0x0000003E   
   \              0x0000003F   
   \              0x00000040   
   \              0x00000041   
   \              0x00000042   
   \              0x00000043   
   \              0x00000044   
   \              0x00000045   
   \              0x00000046   
   \   00000118   0x00000048         DC32 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 93, 96, 99, 102, 105, 108
   \              0x0000004A   
   \              0x0000004C   
   \              0x0000004E   
   \              0x00000050   
   \              0x00000052   
   \              0x00000054   
   \              0x00000056   
   \              0x00000058   
   \              0x0000005A   
   \              0x0000005D   
   \              0x00000060   
   \              0x00000063   
   \              0x00000066   
   \              0x00000069   
   \              0x0000006C   
   \   00000158   0x0000006F         DC32 111, 114, 117, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165
   \              0x00000072   
   \              0x00000075   
   \              0x00000078   
   \              0x0000007D   
   \              0x00000082   
   \              0x00000087   
   \              0x0000008C   
   \              0x00000091   
   \              0x00000096   
   \              0x0000009B   
   \              0x000000A0   
   \              0x000000A5   
   \   0000018C   0x000000AA         DC32 170
    513          1,2,3,4,5,6,7,8,9,10,
    514          11,12,13,14,15,16,17,18,19,20,
    515          21,22,23,24,25,26,27,28,29,30,
    516          31,32,33,34,35,36,37,38,39,40,
    517          41,42,43,44,45,46,47,48,49,50,
    518          51,52,53,54,55,56,57,58,59,60,
    519          61,62,63,64,65,66,67,68,69,70,
    520          72,74,76,78,80,82,84,86,88,90,
    521          93,96,99,102,105,108,111,114,117,120,
    522          125,130,135,140,145,150,155,160,165,170,
    523          };
    524          
    525          //int cjhs[V]={  
    526          //1,2,3,4,5,6,7,8,9,10,
    527          //11,12,13,14,15,16,17,18,19,20,
    528          //21,22,23,24,25,26,27,28,29,30,
    529          //31,32,33,34,35,36,37,38,39,40,
    530          //41,42,43,44,45,46,47,48,49,50,
    531          //51,52,53,54,55,56,57,58,59,60,
    532          //61,62,63,64,65,66,67,68,69,70,
    533          //72,74,76,78,80,82,84,86,88,90,
    534          //93,96,99,102,105,108,111,114,117,120,
    535          //125,130,135,140,145,150,155,160,165,170,
    536          //};

   \                                 In section .data, align 4
    537          float sst_h=H;
   \                     sst_h:
   \   00000000   0x43CC0000         DC32 43CC0000H

   \                                 In section .text, align 4, keep-with-next
    538          void portb_isr()//H-行信号
    539          {  
   \                     portb_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    540            int cjh_cj;
    541            if(LPLD_GPIO_IsPinxExt(PORTB, GPIO_Pin3))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable20_31  ;; 0x4004a0a0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0700             LSLS     R0,R0,#+28
   \   0000000A   0xD540             BPL.N    ??portb_isr_0
    542            { int ii;
    543            // for(ii=100;ii>0;ii--){;}  
    544            //检测到行开始信号，使能DMA请求
    545            
    546            V_Cnt++; 
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable20_24
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable20_24
   \   00000018   0x6008             STR      R0,[R1, #+0]
    547            if(V_Cnt==0){pitcnt=0;
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable20_24
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD103             BNE.N    ??portb_isr_1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable20_40
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    548            
    549            ////      pit_isr();
    550            ////      LPLD_DMA_DisableReq(DMA_CH1); //开启通道请求
    551            ////      LPLD_DMA_DisableReq(DMA_CH2);
    552            //  LPLD_PIT_DisableIrq(pit_init_param); //使能PIT中断
    553            }
    554            if(sfminline&&0)cjh_cj=cjhs_a[cjh]; else cjh_cj=cjhs[cjh];
   \                     ??portb_isr_1: (+1)
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable20_41
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable20_42
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
    555            if(V_Cnt==cjh_cj){
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable20_24
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x4281             CMP      R1,R0
   \   00000042   0xD10F             BNE.N    ??portb_isr_2
    556              cjh++; 
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable20_42
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable20_42
   \   00000050   0x6008             STR      R0,[R1, #+0]
    557              
    558          
    559              LPLD_DMA_EnableReq(DMA_CH0);
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable20_36  ;; 0x4000800c
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable20_36  ;; 0x4000800c
   \   00000060   0x6008             STR      R0,[R1, #+0]
   \   00000062   0xE014             B.N      ??portb_isr_0
    560              //      sst_h = DMA0->TCD[DMA_CH0].CITER_ELINKNO; 
    561              //      while (sst_h>0)
    562              //      { sst_h = DMA0->TCD[DMA_CH0].CITER_ELINKNO; 
    563              //      NUM_Send();
    564              //      }
    565              
    566              //  if(cjh>V*0.8)  Is_DispPhoto = 1;//可以显示图像
    567            }
    568            
    569            //行数采集已满，关闭中断
    570            else if (cjh==(V))
   \                     ??portb_isr_2: (+1)
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable20_42
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x2864             CMP      R0,#+100
   \   0000006C   0xD10F             BNE.N    ??portb_isr_0
    571            { //LPLD_GPIO_Toggle_b(LED_C, LED_C_PIN);
    572              //关GPIO中断 
    573              
    574              Is_DispPhoto = 1;//可以显示图像
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable20_25
   \   00000074   0x6008             STR      R0,[R1, #+0]
    575              
    576              disable_irq(PORTB_IRQn);
   \   00000076   0x2058             MOVS     R0,#+88
   \   00000078   0x.... 0x....      BL       NVIC_DisableIRQ
    577              
    578            
    579              
    580              ////      LPLD_DMA_EnableReq(DMA_CH1); //开启通道请求
    581              ////      LPLD_DMA_EnableReq(DMA_CH2);
    582              //   LPLD_PIT_EnableIrq(pit_init_param); //使能PIT中断
    583              V_Cnt=-1;  
   \   0000007C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable20_24
   \   00000084   0x6008             STR      R0,[R1, #+0]
    584              cjh=0;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable20_42
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    585            }
    586            
    587            
    588            }
    589            LPLD_GPIO_ClearIntFlag(PORTB);
   \                     ??portb_isr_0: (+1)
   \   0000008E   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable20_31  ;; 0x4004a0a0
   \   00000096   0x6008             STR      R0,[R1, #+0]
    590          }
   \   00000098   0xBD01             POP      {R0,PC}          ;; return
    591          //
    592          //void portb_isr()//H-行信号
    593          //{  
    594          //
    595          //  if(LPLD_GPIO_IsPinxExt(PORTB, GPIO_Pin3))
    596          //  { int ii;
    597          // // for(ii=100;ii>0;ii--){;}  
    598          //    //检测到行开始信号，使能DMA请求
    599          //  
    600          //  
    601          //   if(V_Cnt==0){pitcnt=0;
    602          //      LPLD_DMA_DisableReq(DMA_CH1); //开启通道请求
    603          //      LPLD_DMA_DisableReq(DMA_CH2);
    604          //      LPLD_PIT_DisableIrq(pit_init_param); //使能PIT中断
    605          //       }
    606          //    if(V_Cnt<V){
    607          //      LPLD_DMA_EnableReq(DMA_CH0);  
    608          //      V_Cnt++; 
    609          //    }
    610          //    //行数采集已满，关闭中断
    611          //    else
    612          //    { //LPLD_GPIO_Toggle_b(LED_C, LED_C_PIN);
    613          //      //关GPIO中断 
    614          //      
    615          //      disable_irq(PORTE_IRQn);
    616          //      disable_irq(PORTA_IRQn);
    617          //      disable_irq(PORTB_IRQn);
    618          //     
    619          //      Is_DispPhoto = 1;//可以显示图像
    620          //
    621          //      LPLD_DMA_EnableReq(DMA_CH1); //开启通道请求
    622          //      LPLD_DMA_EnableReq(DMA_CH2);
    623          //      LPLD_PIT_EnableIrq(pit_init_param); //使能PIT中断
    624          //      V_Cnt=0;  
    625          //   
    626          //    }
    627          //  }
    628          //}
    629          //
    630          
    631          
    632          
    633          
    634          
    635          

   \                                 In section .text, align 2, keep-with-next
    636          void LED_init_gpio()
    637          {
   \                     LED_init_gpio: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    638            
    639          #if(CARD)
    640            // 配置 PTA 为GPIO功能,输出,高电平，禁用中断
    641            
    642            gpio_init_struct.GPIO_PTx = PTE;
    643            gpio_init_struct.GPIO_Pins = GPIO_Pin26;
    644            gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
    645            gpio_init_struct.GPIO_Output = OUTPUT_H;
    646            gpio_init_struct.GPIO_PinControl = IRQC_DIS;
    647            LPLD_GPIO_Init(gpio_init_struct);
    648            
    649            gpio_init_struct.GPIO_PTx = PTD;
    650            gpio_init_struct.GPIO_Pins = GPIO_Pin15;
    651            gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
    652            gpio_init_struct.GPIO_Output = OUTPUT_H;
    653            gpio_init_struct.GPIO_PinControl = IRQC_DIS;
    654            LPLD_GPIO_Init(gpio_init_struct);
    655            
    656          #else
    657            
    658            gpio_init_struct.GPIO_PTx = PTA;
   \   00000002   0x....             LDR.N    R0,??DataTable18_4  ;; 0x400ff000
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000008   0x6008             STR      R0,[R1, #+0]
    659            gpio_init_struct.GPIO_Pins = GPIO_Pin17;
   \   0000000A   0xF45F 0x3000      MOVS     R0,#+131072
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000012   0x6048             STR      R0,[R1, #+4]
    660            gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000001A   0x7308             STRB     R0,[R1, #+12]
    661            gpio_init_struct.GPIO_Output = OUTPUT_H;  
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000022   0x7348             STRB     R0,[R1, #+13]
    662            gpio_init_struct.GPIO_PinControl = IRQC_DIS;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000002A   0x6088             STR      R0,[R1, #+8]
    663            LPLD_GPIO_Init(gpio_init_struct);
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000030   0xB084             SUB      SP,SP,#+16
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0xBC0F             POP      {R0-R3}
   \   0000003C   0x.... 0x....      BL       LPLD_GPIO_Init
    664            
    665          //  
    666          //  gpio_init_struct.GPIO_PTx = PTC;
    667          //  gpio_init_struct.GPIO_Pins = GPIO_Pin0;
    668          //  gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
    669          //  gpio_init_struct.GPIO_Output = OUTPUT_H;  
    670          //  gpio_init_struct.GPIO_PinControl = IRQC_DIS;
    671          //  LPLD_GPIO_Init(gpio_init_struct);
    672            
    673            
    674            gpio_init_struct.GPIO_PTx = PTD;
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x400ff0c0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000048   0x6008             STR      R0,[R1, #+0]
    675            gpio_init_struct.GPIO_Pins = GPIO_Pin15;
   \   0000004A   0xF44F 0x4000      MOV      R0,#+32768
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000052   0x6048             STR      R0,[R1, #+4]
    676            gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000005A   0x7308             STRB     R0,[R1, #+12]
    677            gpio_init_struct.GPIO_Output = OUTPUT_H;  
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000062   0x7348             STRB     R0,[R1, #+13]
    678            gpio_init_struct.GPIO_PinControl = IRQC_DIS;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000006A   0x6088             STR      R0,[R1, #+8]
    679            LPLD_GPIO_Init(gpio_init_struct);
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000070   0xB084             SUB      SP,SP,#+16
   \   00000072   0x4668             MOV      R0,SP
   \   00000074   0x2214             MOVS     R2,#+20
   \   00000076   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000007A   0xBC0F             POP      {R0-R3}
   \   0000007C   0x.... 0x....      BL       LPLD_GPIO_Init
    680            
    681            gpio_init_struct.GPIO_PTx = PTE;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable19  ;; 0x400ff100
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000088   0x6008             STR      R0,[R1, #+0]
    682            gpio_init_struct.GPIO_Pins = GPIO_Pin26;
   \   0000008A   0xF05F 0x6080      MOVS     R0,#+67108864
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000092   0x6048             STR      R0,[R1, #+4]
    683            gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   0000009A   0x7308             STRB     R0,[R1, #+12]
    684            gpio_init_struct.GPIO_Output = OUTPUT_H;  
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   000000A2   0x7348             STRB     R0,[R1, #+13]
    685            gpio_init_struct.GPIO_PinControl = IRQC_DIS;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   000000AA   0x6088             STR      R0,[R1, #+8]
    686            LPLD_GPIO_Init(gpio_init_struct);
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   000000B0   0xB084             SUB      SP,SP,#+16
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0x2214             MOVS     R2,#+20
   \   000000B6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000BA   0xBC0F             POP      {R0-R3}
   \   000000BC   0x.... 0x....      BL       LPLD_GPIO_Init
    687          #endif
    688            
    689          }
   \   000000C0   0xBD01             POP      {R0,PC}          ;; return
    690          
    691          /*
    692          * 延时一段时间
    693          */

   \                                 In section .text, align 4, keep-with-next
    694          void delay()
    695          {
    696            uint16 i, n;
    697            for(i=0;i<30000;i++)
   \                     delay: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xE005             B.N      ??delay_0
    698            {
    699              for(n=0;n<200;n++)
    700              {
    701                asm("nop");
   \                     ??delay_1: (+1)
   \   00000004   0xBF00             nop
    702              }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??delay_2: (+1)
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x29C8             CMP      R1,#+200
   \   0000000C   0xDBFA             BLT.N    ??delay_1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??delay_0: (+1)
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0xF247 0x5130      MOVW     R1,#+30000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xDA01             BGE.N    ??delay_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xE7F4             B.N      ??delay_2
    703            }
    704          }
   \                     ??delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    705          void LED()
    706          {
   \                     LED: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    707            //D1至D4依次触发点亮、熄灭
    708            LED_i++;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    709            if (LED_i==5) LED_i=1;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2805             CMP      R0,#+5
   \   00000018   0xD103             BNE.N    ??LED_0
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable21_2
   \   00000020   0x6008             STR      R0,[R1, #+0]
    710            if (LED_i==1) LPLD_GPIO_Toggle_b(LED_A, LED_A_PIN);
   \                     ??LED_0: (+1)
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD103             BNE.N    ??LED_1
   \   0000002C   0x2111             MOVS     R1,#+17
   \   0000002E   0x....             LDR.N    R0,??DataTable18_4  ;; 0x400ff000
   \   00000030   0x.... 0x....      BL       LPLD_GPIO_Toggle_b
    711            
    712           // if (LED_i==2) LPLD_GPIO_Toggle_b(LED_B, LED_B_PIN);
    713            
    714            if (LED_i==3) LPLD_GPIO_Toggle_b(LED_C, LED_C_PIN);
   \                     ??LED_1: (+1)
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2803             CMP      R0,#+3
   \   0000003C   0xD104             BNE.N    ??LED_2
   \   0000003E   0x210F             MOVS     R1,#+15
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable20_7  ;; 0x400ff0c0
   \   00000044   0x.... 0x....      BL       LPLD_GPIO_Toggle_b
    715            
    716            if (LED_i==4) LPLD_GPIO_Toggle_b(LED_D, LED_D_PIN);
   \                     ??LED_2: (+1)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable21_2
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x2804             CMP      R0,#+4
   \   00000050   0xD103             BNE.N    ??LED_3
   \   00000052   0x211A             MOVS     R1,#+26
   \   00000054   0x....             LDR.N    R0,??DataTable19  ;; 0x400ff100
   \   00000056   0x.... 0x....      BL       LPLD_GPIO_Toggle_b
    717            
    718            
    719            
    720          }
   \                     ??LED_3: (+1)
   \   0000005A   0xBD01             POP      {R0,PC}          ;; return
    721          //========此处向下为上位机相关部分============

   \                                 In section .text, align 2, keep-with-next
    722          void uart_init(void)
    723          {
   \                     uart_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    724            
    725            UART_InitTypeDef uart4_init_struct;
    726            uart4_init_struct.UART_Uartx = UART4; //使用UART4
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000008   0x9003             STR      R0,[SP, #+12]
    727            uart4_init_struct.UART_BaudRate = 115200; //设置波特率9600
   \   0000000A   0xF45F 0x30E1      MOVS     R0,#+115200
   \   0000000E   0x9004             STR      R0,[SP, #+16]
    728            if(0){
    729              uart4_init_struct.UART_RxPin = PTC14;  //接收引脚为PTC14
    730              uart4_init_struct.UART_TxPin = PTC15; } //发送引脚为PTC25
    731            else
    732            {
    733              uart4_init_struct.UART_RxPin = PTE25;  //接收引脚为PTE25
   \   00000010   0x2095             MOVS     R0,#+149
   \   00000012   0xF88D 0x0015      STRB     R0,[SP, #+21]
    734              uart4_init_struct.UART_TxPin = PTE24;  //发送引脚为PTE24
   \   00000016   0x2094             MOVS     R0,#+148
   \   00000018   0xF88D 0x0014      STRB     R0,[SP, #+20]
    735            }
    736            uart4_init_struct.UART_RxIntEnable = TRUE;    //使能接收中断
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF88D 0x0016      STRB     R0,[SP, #+22]
    737            uart4_init_struct.UART_RxIsr = uart_isr;      //设置接收中断函数
   \   00000022   0x.... 0x....      ADR.W    R0,uart_isr
   \   00000026   0x9008             STR      R0,[SP, #+32]
    738            //初始化UART
    739            LPLD_UART_Init(uart4_init_struct);
   \   00000028   0xA903             ADD      R1,SP,#+12
   \   0000002A   0xB084             SUB      SP,SP,#+16
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x221C             MOVS     R2,#+28
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000034   0xBC0F             POP      {R0-R3}
   \   00000036   0x.... 0x....      BL       LPLD_UART_Init
    740            //使能UART中断
    741            LPLD_UART_EnableIrq(uart4_init_struct);
   \   0000003A   0xA903             ADD      R1,SP,#+12
   \   0000003C   0xB084             SUB      SP,SP,#+16
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x221C             MOVS     R2,#+28
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000046   0xBC0F             POP      {R0-R3}
   \   00000048   0x.... 0x....      BL       LPLD_UART_EnableIrq
    742            LPLD_UART_PutCharArr(UART4, "uart4_init",10);
   \   0000004C   0x220A             MOVS     R2,#+10
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000056   0x.... 0x....      BL       LPLD_UART_PutCharArr
    743            
    744            
    745          }
   \   0000005A   0xB00B             ADD      SP,SP,#+44
   \   0000005C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
    746          void uart_isr(void)
    747          {
   \                     uart_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    748            
    749            // LPLD_UART_PutChar(UART4, recv);
    750            
    751            
    752            RX[count_RX] = LPLD_UART_GetChar(UART4);
   \   00000002   0x....             LDR.N    R0,??DataTable20_30  ;; 0x400ea000
   \   00000004   0x.... 0x....      BL       LPLD_UART_GetChar
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable22_2
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable22_3
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0x5450             STRB     R0,[R2, R1]
    753            if( RX[0] == '#' )
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000018   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000001C   0x2823             CMP      R0,#+35
   \   0000001E   0xD107             BNE.N    ??uart_isr_0
    754              count_RX++;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
   \   0000002E   0xE003             B.N      ??uart_isr_1
    755            else count_RX=0;		 	
   \                     ??uart_isr_0: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   00000036   0x7008             STRB     R0,[R1, #+0]
    756            if(count_RX==MAX_S)//收到结尾
   \                     ??uart_isr_1: (+1)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable22_3
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x280E             CMP      R0,#+14
   \   00000040   0xD10D             BNE.N    ??uart_isr_2
    757            {
    758              count_RX=0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    759              flag_rx_succsess =RX_SU;
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable22_4
   \   00000050   0x7008             STRB     R0,[R1, #+0]
    760              
    761              NUM_GET();
   \   00000052   0x.... 0x....      BL       NUM_GET
    762              
    763              count_RX=0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable22_3
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    764            } 
    765            
    766            
    767          }
   \                     ??uart_isr_2: (+1)
   \   0000005E   0xBD01             POP      {R0,PC}          ;; return
    768          

   \                                 In section .text, align 2, keep-with-next
    769          void ReceFloat(void)
    770          {
    771            
    772            {
    773              RX_FLAG=RX[1];
   \                     ReceFloat: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000004   0x7840             LDRB     R0,[R0, #+1]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable22_5
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    774              FloatSave[0]=RX[2];
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000010   0x7880             LDRB     R0,[R0, #+2]
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    775              FloatSave[1]=RX[3];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000022   0x7048             STRB     R0,[R1, #+1]
    776              FloatSave[2]=RX[4];
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000028   0x7900             LDRB     R0,[R0, #+4]
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000002E   0x7088             STRB     R0,[R1, #+2]
    777              FloatSave[3]=RX[5];
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000034   0x7940             LDRB     R0,[R0, #+5]
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000003A   0x70C8             STRB     R0,[R1, #+3]
    778              
    779              FloatSave[4]=RX[6];
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000040   0x7980             LDRB     R0,[R0, #+6]
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000046   0x7108             STRB     R0,[R1, #+4]
    780              FloatSave[5]=RX[7];
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   0000004C   0x79C0             LDRB     R0,[R0, #+7]
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000052   0x7148             STRB     R0,[R1, #+5]
    781              FloatSave[6]=RX[8];
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000058   0x7A00             LDRB     R0,[R0, #+8]
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000005E   0x7188             STRB     R0,[R1, #+6]
    782              FloatSave[7]=RX[9];
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000064   0x7A40             LDRB     R0,[R0, #+9]
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000006A   0x71C8             STRB     R0,[R1, #+7]
    783              
    784              FloatSave[8]=RX[10];
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000070   0x7A80             LDRB     R0,[R0, #+10]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000076   0x7208             STRB     R0,[R1, #+8]
    785              FloatSave[9]=RX[11];
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   0000007C   0x7AC0             LDRB     R0,[R0, #+11]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000082   0x7248             STRB     R0,[R1, #+9]
    786              FloatSave[10]=RX[12];
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000088   0x7B00             LDRB     R0,[R0, #+12]
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000008E   0x7288             STRB     R0,[R1, #+10]
    787              FloatSave[11]=RX[13];
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable22_2
   \   00000094   0x7B40             LDRB     R0,[R0, #+13]
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000009A   0x72C8             STRB     R0,[R1, #+11]
    788              
    789            }
    790          }
   \   0000009C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    791          void NUM_GET(void)
    792          {
   \                     NUM_GET: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    793            if(flag_rx_succsess==RX_SU)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable22_4
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xF040 0x80E2      BNE.W    ??NUM_GET_0
    794            {
    795              
    796              ReceFloat();
   \   0000000E   0x.... 0x....      BL       ReceFloat
    797              if(RX_FLAG=='A')
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000016   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000001A   0x2841             CMP      R0,#+65
   \   0000001C   0xD115             BNE.N    ??NUM_GET_1
    798              {	
    799                memcpy((char*)(&duojizkb0),&FloatSave[0],4);            //void *memcpy(void *dest, const void *src, size_t n);  ′ó?′src?ù??μ??ú′?μ??・μ??eê??????aê???±′N??×??úμ???±êdest?ù??μ??ú′?μ??・?eê??????D  
   \   0000001E   0x2204             MOVS     R2,#+4
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable22_7
   \   00000028   0x.... 0x....      BL       memcpy
    800                memcpy((char*)(&duojizkb),&FloatSave[4],4);
   \   0000002C   0x2204             MOVS     R2,#+4
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable22_8
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable22_9
   \   00000036   0x.... 0x....      BL       memcpy
    801                memcpy((char*)(&duojipianyi),&FloatSave[8],4);
   \   0000003A   0x2204             MOVS     R2,#+4
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable22_10
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable22_11
   \   00000044   0x.... 0x....      BL       memcpy
   \   00000048   0xE0BF             B.N      ??NUM_GET_2
    802                
    803              }
    804              else if(RX_FLAG=='B')
   \                     ??NUM_GET_1: (+1)
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   0000004E   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000052   0x2842             CMP      R0,#+66
   \   00000054   0xD115             BNE.N    ??NUM_GET_3
    805              {
    806                memcpy((char*)(&zkb),&FloatSave[0],4);
   \   00000056   0x2204             MOVS     R2,#+4
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   00000060   0x.... 0x....      BL       memcpy
    807                memcpy((char*)(&NUM_B.B),&FloatSave[4],4);
   \   00000064   0x2204             MOVS     R2,#+4
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable22_8
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable22_13
   \   0000006E   0x.... 0x....      BL       memcpy
    808                memcpy((char*)(&NUM_B.C),&FloatSave[8],4);
   \   00000072   0x2204             MOVS     R2,#+4
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable22_10
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable22_14
   \   0000007C   0x.... 0x....      BL       memcpy
   \   00000080   0xE0A3             B.N      ??NUM_GET_2
    809              }
    810              else if(RX_FLAG=='C')
   \                     ??NUM_GET_3: (+1)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   00000086   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000008A   0x2843             CMP      R0,#+67
   \   0000008C   0xD115             BNE.N    ??NUM_GET_4
    811              {
    812                memcpy((char*)(&SteerPID.Kp),&FloatSave[0],4);
   \   0000008E   0x2204             MOVS     R2,#+4
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable22_15
   \   00000098   0x.... 0x....      BL       memcpy
    813                memcpy((char*)(&NUM_C.B),&FloatSave[4],4);
   \   0000009C   0x2204             MOVS     R2,#+4
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable22_8
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable22_16
   \   000000A6   0x.... 0x....      BL       memcpy
    814                memcpy((char*)(&SteerPID.Kd),&FloatSave[8],4);
   \   000000AA   0x2204             MOVS     R2,#+4
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable22_10
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable22_17
   \   000000B4   0x.... 0x....      BL       memcpy
   \   000000B8   0xE087             B.N      ??NUM_GET_2
    815              }
    816              else if(RX_FLAG=='D')
   \                     ??NUM_GET_4: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000BE   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   000000C2   0x2844             CMP      R0,#+68
   \   000000C4   0xD115             BNE.N    ??NUM_GET_5
    817              {
    818                memcpy((char*)(&MidPos_h),&FloatSave[0],4);
   \   000000C6   0x2204             MOVS     R2,#+4
   \   000000C8   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable22_18
   \   000000D0   0x.... 0x....      BL       memcpy
    819                memcpy((char*)(&NUM_D.B),&FloatSave[4],4);
   \   000000D4   0x2204             MOVS     R2,#+4
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable22_8
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable22_19
   \   000000DE   0x.... 0x....      BL       memcpy
    820                memcpy((char*)(&NUM_D.C),&FloatSave[8],4);
   \   000000E2   0x2204             MOVS     R2,#+4
   \   000000E4   0x.... 0x....      LDR.W    R1,??DataTable22_10
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable22_20
   \   000000EC   0x.... 0x....      BL       memcpy
   \   000000F0   0xE06B             B.N      ??NUM_GET_2
    821              }
    822              else if(RX_FLAG=='E')
   \                     ??NUM_GET_5: (+1)
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable22_5
   \   000000F6   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   000000FA   0x2845             CMP      R0,#+69
   \   000000FC   0xD165             BNE.N    ??NUM_GET_2
    823              {
    824                memcpy(((char*)&fs),&FloatSave[0],4);
   \   000000FE   0x2204             MOVS     R2,#+4
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable22_6
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   00000108   0x.... 0x....      BL       memcpy
    825                memcpy((char*)(&NUM_E.B),&FloatSave[4],4);
   \   0000010C   0x2204             MOVS     R2,#+4
   \   0000010E   0x.... 0x....      LDR.W    R1,??DataTable22_8
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable22_22
   \   00000116   0x.... 0x....      BL       memcpy
    826                memcpy((char*)(&NUM_E.C),&FloatSave[8],4);
   \   0000011A   0x2204             MOVS     R2,#+4
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable22_10
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable22_23
   \   00000124   0x.... 0x....      BL       memcpy
    827                
    828                if (NUM_E.C==1)
   \   00000128   0x.... 0x....      LDR.W    R0,??DataTable22_24
   \   0000012C   0x6880             LDR      R0,[R0, #+8]
   \   0000012E   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000132   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000136   0xD12C             BNE.N    ??NUM_GET_6
    829                {
    830                  LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch0, (int)angle_to_period((int)(50-NUM_E.A)));
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable22_25  ;; 0x42480000
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable22_24
   \   00000140   0x6809             LDR      R1,[R1, #+0]
   \   00000142   0x.... 0x....      BL       __aeabi_fsub
   \   00000146   0x.... 0x....      BL       __aeabi_f2iz
   \   0000014A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000014C   0x.... 0x....      BL       angle_to_period
   \   00000150   0x0002             MOVS     R2,R0
   \   00000152   0x2100             MOVS     R1,#+0
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable22_26  ;; 0x40038000
   \   00000158   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    831                  LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch1, (int)NUM_E.B*100);
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable22_24
   \   00000160   0x6840             LDR      R0,[R0, #+4]
   \   00000162   0x.... 0x....      BL       __aeabi_f2iz
   \   00000166   0x2164             MOVS     R1,#+100
   \   00000168   0xFB01 0xF200      MUL      R2,R1,R0
   \   0000016C   0x2101             MOVS     R1,#+1
   \   0000016E   0x.... 0x....      LDR.W    R0,??DataTable22_26  ;; 0x40038000
   \   00000172   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    832                  LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch2, (int)NUM_E.B*100);}
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable22_24
   \   0000017A   0x6840             LDR      R0,[R0, #+4]
   \   0000017C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000180   0x2164             MOVS     R1,#+100
   \   00000182   0xFB01 0xF200      MUL      R2,R1,R0
   \   00000186   0x2102             MOVS     R1,#+2
   \   00000188   0x.... 0x....      LDR.W    R0,??DataTable22_26  ;; 0x40038000
   \   0000018C   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
   \   00000190   0xE01B             B.N      ??NUM_GET_2
    833                
    834                else if (NUM_E.C==0)
   \                     ??NUM_GET_6: (+1)
   \   00000192   0x.... 0x....      LDR.W    R0,??DataTable22_24
   \   00000196   0x6880             LDR      R0,[R0, #+8]
   \   00000198   0x2100             MOVS     R1,#+0
   \   0000019A   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000019E   0xD114             BNE.N    ??NUM_GET_2
    835                { LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch0, angle_to_period(0));
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x.... 0x....      BL       angle_to_period
   \   000001A6   0x0002             MOVS     R2,R0
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable22_26  ;; 0x40038000
   \   000001AE   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    836                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch1, 0);
   \   000001B2   0x2200             MOVS     R2,#+0
   \   000001B4   0x2101             MOVS     R1,#+1
   \   000001B6   0x.... 0x....      LDR.W    R0,??DataTable22_26  ;; 0x40038000
   \   000001BA   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    837                LPLD_FTM_PWM_ChangeDuty(FTM0, FTM_Ch2, 0);}
   \   000001BE   0x2200             MOVS     R2,#+0
   \   000001C0   0x2102             MOVS     R1,#+2
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable22_26  ;; 0x40038000
   \   000001C6   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    838                
    839                
    840                
    841                //   for(i=0;i<4;i++)  
    842                //  {  
    843                //   *((unsigned char*)&PIDPara_R.P+i)=*(&FloatSave[0]+i);       
    844                //  }     
    845                
    846              }
    847              else ;
    848              flag_rx_succsess=RX_ER;
   \                     ??NUM_GET_2: (+1)
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable22_4
   \   000001D0   0x7008             STRB     R0,[R1, #+0]
    849            }
    850          }
   \                     ??NUM_GET_0: (+1)
   \   000001D2   0xBD01             POP      {R0,PC}          ;; return
    851          

   \                                 In section .text, align 2, keep-with-next
    852          void putstr(int8 *s,int8 a)
    853          {int ys_i=0;
   \                     putstr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x2600             MOVS     R6,#+0
    854          LPLD_UART_PutChar(UART4,'#');
   \   00000008   0x2123             MOVS     R1,#+35
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   0000000E   0x.... 0x....      BL       LPLD_UART_PutChar
    855          
    856          LPLD_UART_PutChar(UART4,a);
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   0000001A   0x.... 0x....      BL       LPLD_UART_PutChar
    857          
    858          LPLD_UART_PutCharArr(UART4,s,8);
   \   0000001E   0x2208             MOVS     R2,#+8
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000026   0x.... 0x....      BL       LPLD_UART_PutCharArr
    859          
    860          
    861          
    862          LPLD_UART_PutChar(UART4,a);
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000032   0x.... 0x....      BL       LPLD_UART_PutChar
    863          
    864          LPLD_UART_PutChar(UART4,'#');
   \   00000036   0x2123             MOVS     R1,#+35
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   0000003C   0x.... 0x....      BL       LPLD_UART_PutChar
    865          
    866          
    867          }
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    868          void NUM_Send(void)
    869          {
   \                     NUM_Send: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    870            if (fs==0){
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000000E   0xD13C             BNE.N    ??NUM_Send_0
    871              
    872              FloatToChar(a_y,sa);
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable22_28
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       FloatToChar
    873              putstr(sa,'A');
   \   0000001E   0x2141             MOVS     R1,#+65
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000024   0x.... 0x....      BL       putstr
    874              
    875              FloatToChar(StableNumbers,sa);
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000002C   0x000C             MOVS     R4,R1
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable22_29
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       __aeabi_i2f
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0x.... 0x....      BL       FloatToChar
    876              putstr(sa,'B');
   \   0000003E   0x2142             MOVS     R1,#+66
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000044   0x.... 0x....      BL       putstr
    877              
    878              FloatToChar(Error,sa);
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000004C   0x000C             MOVS     R4,R1
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable22_30
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       __aeabi_i2f
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x.... 0x....      BL       FloatToChar
    879              putstr(sa,'C');
   \   0000005E   0x2143             MOVS     R1,#+67
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000064   0x.... 0x....      BL       putstr
    880              
    881              FloatToChar(EndType,sa);
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000006C   0x000C             MOVS     R4,R1
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable22_31
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x.... 0x....      BL       __aeabi_i2f
   \   00000078   0x0021             MOVS     R1,R4
   \   0000007A   0x.... 0x....      BL       FloatToChar
    882              putstr(sa,'D');}
   \   0000007E   0x2144             MOVS     R1,#+68
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000084   0x.... 0x....      BL       putstr
   \   00000088   0xE2E6             B.N      ??NUM_Send_1
    883            
    884            else if (fs==1) {
   \                     ??NUM_Send_0: (+1)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000094   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000098   0xD141             BNE.N    ??NUM_Send_2
    885              
    886              FloatToChar(MidLineExcursion,sa);
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000009E   0x000C             MOVS     R4,R1
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable22_32
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      BL       __aeabi_i2f
   \   000000AA   0x0021             MOVS     R1,R4
   \   000000AC   0x.... 0x....      BL       FloatToChar
    887              putstr(sa,'A');
   \   000000B0   0x2141             MOVS     R1,#+65
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000000B6   0x.... 0x....      BL       putstr
    888              
    889              FloatToChar(MidLineVariance,sa);
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000000BE   0x000C             MOVS     R4,R1
   \   000000C0   0x.... 0x....      LDR.W    R2,??DataTable22_33
   \   000000C4   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   000000C8   0x.... 0x....      BL       __aeabi_d2f
   \   000000CC   0x0021             MOVS     R1,R4
   \   000000CE   0x.... 0x....      BL       FloatToChar
    890              putstr(sa,'B');
   \   000000D2   0x2142             MOVS     R1,#+66
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000000D8   0x.... 0x....      BL       putstr
    891              
    892              FloatToChar(hx_find_count_max,sa);//midpos
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000000E0   0x000C             MOVS     R4,R1
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable22_34
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x.... 0x....      BL       __aeabi_i2f
   \   000000EC   0x0021             MOVS     R1,R4
   \   000000EE   0x.... 0x....      BL       FloatToChar
    893              putstr(sa,'C');
   \   000000F2   0x2143             MOVS     R1,#+67
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000000F8   0x.... 0x....      BL       putstr
    894              
    895              FloatToChar(V_count,sa);
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000100   0x000C             MOVS     R4,R1
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable22_35
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x.... 0x....      BL       __aeabi_i2f
   \   0000010C   0x0021             MOVS     R1,R4
   \   0000010E   0x.... 0x....      BL       FloatToChar
    896              putstr(sa,'D');
   \   00000112   0x2144             MOVS     R1,#+68
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000118   0x.... 0x....      BL       putstr
   \   0000011C   0xE29C             B.N      ??NUM_Send_1
    897            }
    898            
    899            else if (fs==2) {
   \                     ??NUM_Send_2: (+1)
   \   0000011E   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   00000122   0x6800             LDR      R0,[R0, #+0]
   \   00000124   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000128   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000012C   0xD140             BNE.N    ??NUM_Send_3
    900              
    901              FloatToChar(TopE1,sa);
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000132   0x000C             MOVS     R4,R1
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable22_36
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0x.... 0x....      BL       __aeabi_i2f
   \   0000013E   0x0021             MOVS     R1,R4
   \   00000140   0x.... 0x....      BL       FloatToChar
    902              putstr(sa,'A');
   \   00000144   0x2141             MOVS     R1,#+65
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000014A   0x.... 0x....      BL       putstr
    903              
    904              FloatToChar(TopE2,sa);
   \   0000014E   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000152   0x000C             MOVS     R4,R1
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable22_37
   \   00000158   0x6800             LDR      R0,[R0, #+0]
   \   0000015A   0x.... 0x....      BL       __aeabi_i2f
   \   0000015E   0x0021             MOVS     R1,R4
   \   00000160   0x.... 0x....      BL       FloatToChar
    905              putstr(sa,'B');
   \   00000164   0x2142             MOVS     R1,#+66
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000016A   0x.... 0x....      BL       putstr
    906              
    907              FloatToChar(g_Derict,sa);
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000172   0x000C             MOVS     R4,R1
   \   00000174   0x.... 0x....      LDR.W    R0,??DataTable22_38
   \   00000178   0x7800             LDRB     R0,[R0, #+0]
   \   0000017A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000017E   0x0021             MOVS     R1,R4
   \   00000180   0x.... 0x....      BL       FloatToChar
    908              putstr(sa,'C');
   \   00000184   0x2143             MOVS     R1,#+67
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000018A   0x.... 0x....      BL       putstr
    909              
    910              FloatToChar(MidLineExcursion,sa);
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000192   0x000C             MOVS     R4,R1
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable22_32
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0x.... 0x....      BL       __aeabi_i2f
   \   0000019E   0x0021             MOVS     R1,R4
   \   000001A0   0x.... 0x....      BL       FloatToChar
    911              putstr(sa,'D');
   \   000001A4   0x2144             MOVS     R1,#+68
   \   000001A6   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000001AA   0x.... 0x....      BL       putstr
   \   000001AE   0xE253             B.N      ??NUM_Send_1
    912            }
    913            
    914            else if (fs==4) {
   \                     ??NUM_Send_3: (+1)
   \   000001B0   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0xF05F 0x4181      MOVS     R1,#+1082130432
   \   000001BA   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000001BE   0xD140             BNE.N    ??NUM_Send_4
    915              
    916              FloatToChar(BlackEndL,sa);
   \   000001C0   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000001C4   0x000C             MOVS     R4,R1
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable22_39
   \   000001CA   0x6800             LDR      R0,[R0, #+0]
   \   000001CC   0x.... 0x....      BL       __aeabi_i2f
   \   000001D0   0x0021             MOVS     R1,R4
   \   000001D2   0x.... 0x....      BL       FloatToChar
    917              putstr(sa,'A');
   \   000001D6   0x2141             MOVS     R1,#+65
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000001DC   0x.... 0x....      BL       putstr
    918              
    919              FloatToChar(BlackEndR,sa);
   \   000001E0   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000001E4   0x000C             MOVS     R4,R1
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable22_40
   \   000001EA   0x6800             LDR      R0,[R0, #+0]
   \   000001EC   0x.... 0x....      BL       __aeabi_i2f
   \   000001F0   0x0021             MOVS     R1,R4
   \   000001F2   0x.... 0x....      BL       FloatToChar
    920              putstr(sa,'B');
   \   000001F6   0x2142             MOVS     R1,#+66
   \   000001F8   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000001FC   0x.... 0x....      BL       putstr
    921              
    922              FloatToChar(BlackEndM,sa);
   \   00000200   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000204   0x000C             MOVS     R4,R1
   \   00000206   0x.... 0x....      LDR.W    R0,??DataTable22_41
   \   0000020A   0x6800             LDR      R0,[R0, #+0]
   \   0000020C   0x.... 0x....      BL       __aeabi_i2f
   \   00000210   0x0021             MOVS     R1,R4
   \   00000212   0x.... 0x....      BL       FloatToChar
    923              putstr(sa,'C');
   \   00000216   0x2143             MOVS     R1,#+67
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000021C   0x.... 0x....      BL       putstr
    924              
    925              FloatToChar(Error,sa);
   \   00000220   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000224   0x000C             MOVS     R4,R1
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable22_30
   \   0000022A   0x6800             LDR      R0,[R0, #+0]
   \   0000022C   0x.... 0x....      BL       __aeabi_i2f
   \   00000230   0x0021             MOVS     R1,R4
   \   00000232   0x.... 0x....      BL       FloatToChar
    926              putstr(sa,'D');
   \   00000236   0x2144             MOVS     R1,#+68
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000023C   0x.... 0x....      BL       putstr
   \   00000240   0xE20A             B.N      ??NUM_Send_1
    927            }
    928            
    929            else if (fs==6) {
   \                     ??NUM_Send_4: (+1)
   \   00000242   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   00000246   0x6800             LDR      R0,[R0, #+0]
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable22_42  ;; 0x40c00000
   \   0000024C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000250   0xD136             BNE.N    ??NUM_Send_5
    930              
    931              FloatToChar(bm_z,sa);
   \   00000252   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000256   0x.... 0x....      LDR.W    R0,??DataTable22_43
   \   0000025A   0x6800             LDR      R0,[R0, #+0]
   \   0000025C   0x.... 0x....      BL       FloatToChar
    932              putstr(sa,'A');
   \   00000260   0x2141             MOVS     R1,#+65
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000266   0x.... 0x....      BL       putstr
    933              
    934              FloatToChar(bm_y,sa);
   \   0000026A   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000026E   0x.... 0x....      LDR.W    R0,??DataTable22_44
   \   00000272   0x6800             LDR      R0,[R0, #+0]
   \   00000274   0x.... 0x....      BL       FloatToChar
    935              putstr(sa,'B');
   \   00000278   0x2142             MOVS     R1,#+66
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000027E   0x.... 0x....      BL       putstr
    936              
    937              FloatToChar(bm_pz,sa);
   \   00000282   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000286   0x.... 0x....      LDR.W    R0,??DataTable22_45
   \   0000028A   0x6800             LDR      R0,[R0, #+0]
   \   0000028C   0x.... 0x....      BL       FloatToChar
    938              putstr(sa,'C');
   \   00000290   0x2143             MOVS     R1,#+67
   \   00000292   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000296   0x.... 0x....      BL       putstr
    939               FloatToChar(zkb/100,sa);   
   \   0000029A   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000029E   0x000C             MOVS     R4,R1
   \   000002A0   0x.... 0x....      LDR.W    R0,??DataTable22_12
   \   000002A4   0x6800             LDR      R0,[R0, #+0]
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable22_46  ;; 0x42c80000
   \   000002AA   0x.... 0x....      BL       __aeabi_fdiv
   \   000002AE   0x0021             MOVS     R1,R4
   \   000002B0   0x.... 0x....      BL       FloatToChar
    940             // FloatToChar(sd/100,sa);
    941              putstr(sa,'D');
   \   000002B4   0x2144             MOVS     R1,#+68
   \   000002B6   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000002BA   0x.... 0x....      BL       putstr
   \   000002BE   0xE1CB             B.N      ??NUM_Send_1
    942            }
    943            else if (fs==7) {
   \                     ??NUM_Send_5: (+1)
   \   000002C0   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   000002C4   0x6800             LDR      R0,[R0, #+0]
   \   000002C6   0x.... 0x....      LDR.W    R1,??DataTable22_47  ;; 0x40e00000
   \   000002CA   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000002CE   0xD124             BNE.N    ??NUM_Send_6
    944              
    945              FloatToChar(a_y_min,sa);
   \   000002D0   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable22_48
   \   000002D8   0x6800             LDR      R0,[R0, #+0]
   \   000002DA   0x.... 0x....      BL       FloatToChar
    946              putstr(sa,'A');
   \   000002DE   0x2141             MOVS     R1,#+65
   \   000002E0   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000002E4   0x.... 0x....      BL       putstr
    947              
    948              FloatToChar(a_y,sa);
   \   000002E8   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000002EC   0x.... 0x....      LDR.W    R0,??DataTable22_28
   \   000002F0   0x6800             LDR      R0,[R0, #+0]
   \   000002F2   0x.... 0x....      BL       FloatToChar
    949              putstr(sa,'B');
   \   000002F6   0x2142             MOVS     R1,#+66
   \   000002F8   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   000002FC   0x.... 0x....      BL       putstr
    950              
    951              FloatToChar(a_y_max,sa);
   \   00000300   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000304   0x.... 0x....      LDR.W    R0,??DataTable22_49
   \   00000308   0x6800             LDR      R0,[R0, #+0]
   \   0000030A   0x.... 0x....      BL       FloatToChar
    952              putstr(sa,'C');    
   \   0000030E   0x2143             MOVS     R1,#+67
   \   00000310   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   00000314   0x.... 0x....      BL       putstr
   \   00000318   0xE19E             B.N      ??NUM_Send_1
    953              
    954            }
    955            else if (fs==8) {
   \                     ??NUM_Send_6: (+1)
   \   0000031A   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   0000031E   0x6800             LDR      R0,[R0, #+0]
   \   00000320   0xF05F 0x4182      MOVS     R1,#+1090519040
   \   00000324   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000328   0xD10C             BNE.N    ??NUM_Send_7
    956              
    957              FloatToChar(sst_h,sa);
   \   0000032A   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000032E   0x.... 0x....      LDR.W    R0,??DataTable22_50
   \   00000332   0x6800             LDR      R0,[R0, #+0]
   \   00000334   0x.... 0x....      BL       FloatToChar
    958              putstr(sa,'A');
   \   00000338   0x2141             MOVS     R1,#+65
   \   0000033A   0x.... 0x....      LDR.W    R0,??DataTable22_27
   \   0000033E   0x.... 0x....      BL       putstr
   \   00000342   0xE189             B.N      ??NUM_Send_1
    959              
    960              
    961              
    962              
    963              
    964            }
    965            
    966            else if (fs==3) {
   \                     ??NUM_Send_7: (+1)
   \   00000344   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   00000348   0x6800             LDR      R0,[R0, #+0]
   \   0000034A   0x.... 0x....      LDR.W    R1,??DataTable22_51  ;; 0x40400000
   \   0000034E   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000352   0xF040 0x809B      BNE.W    ??NUM_Send_8
    967              LPLD_UART_PutCharArr(UART4,"开始",4);
   \   00000356   0x2204             MOVS     R2,#+4
   \   00000358   0x.... 0x....      LDR.W    R1,??DataTable22_52
   \   0000035C   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000360   0x.... 0x....      BL       LPLD_UART_PutCharArr
    968              int i=0;
   \   00000364   0x2400             MOVS     R4,#+0
    969              
    970              
    971              if(yxh==0){
   \   00000366   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   0000036A   0x6800             LDR      R0,[R0, #+0]
   \   0000036C   0x2800             CMP      R0,#+0
   \   0000036E   0xD11F             BNE.N    ??NUM_Send_9
    972                for(i = yxh; i < RowMax-1; i++)    
   \   00000370   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   00000374   0x6804             LDR      R4,[R0, #+0]
   \                     ??NUM_Send_10: (+1)
   \   00000376   0x2C63             CMP      R4,#+99
   \   00000378   0xF280 0x816E      BGE.W    ??NUM_Send_1
    973                {	
    974                  FloatToChar(BlackLineData[i],sa);    
   \   0000037C   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000380   0x000D             MOVS     R5,R1
   \   00000382   0x.... 0x....      LDR.W    R0,??DataTable22_54
   \   00000386   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000038A   0x.... 0x....      BL       __aeabi_i2f
   \   0000038E   0x0029             MOVS     R1,R5
   \   00000390   0x.... 0x....      BL       FloatToChar
    975                  LPLD_UART_PutChar(UART4,'#');	
   \   00000394   0x2123             MOVS     R1,#+35
   \   00000396   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   0000039A   0x.... 0x....      BL       LPLD_UART_PutChar
    976          	LPLD_UART_PutCharArr(UART4,sa,4);
   \   0000039E   0x2204             MOVS     R2,#+4
   \   000003A0   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000003A4   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   000003A8   0x.... 0x....      BL       LPLD_UART_PutCharArr
    977                }
   \   000003AC   0x1C64             ADDS     R4,R4,#+1
   \   000003AE   0xE7E2             B.N      ??NUM_Send_10
    978              }
    979              else if(yxh>25)
   \                     ??NUM_Send_9: (+1)
   \   000003B0   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   000003B4   0x6800             LDR      R0,[R0, #+0]
   \   000003B6   0x281A             CMP      R0,#+26
   \   000003B8   0xDB21             BLT.N    ??NUM_Send_11
    980              {
    981                for(i =RowMax-yxh; i < RowMax-5; i++)    
   \   000003BA   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   000003BE   0x6800             LDR      R0,[R0, #+0]
   \   000003C0   0xF1D0 0x0464      RSBS     R4,R0,#+100
   \                     ??NUM_Send_12: (+1)
   \   000003C4   0x2C5F             CMP      R4,#+95
   \   000003C6   0xF280 0x8147      BGE.W    ??NUM_Send_1
    982                {	
    983                  FloatToChar(BlackLineData[i],sa);    
   \   000003CA   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000003CE   0x000D             MOVS     R5,R1
   \   000003D0   0x.... 0x....      LDR.W    R0,??DataTable22_54
   \   000003D4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000003D8   0x.... 0x....      BL       __aeabi_i2f
   \   000003DC   0x0029             MOVS     R1,R5
   \   000003DE   0x.... 0x....      BL       FloatToChar
    984                  LPLD_UART_PutChar(UART4,'#');	
   \   000003E2   0x2123             MOVS     R1,#+35
   \   000003E4   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   000003E8   0x.... 0x....      BL       LPLD_UART_PutChar
    985          	LPLD_UART_PutCharArr(UART4,sa,4);
   \   000003EC   0x2204             MOVS     R2,#+4
   \   000003EE   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   000003F2   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   000003F6   0x.... 0x....      BL       LPLD_UART_PutCharArr
    986                }
   \   000003FA   0x1C64             ADDS     R4,R4,#+1
   \   000003FC   0xE7E2             B.N      ??NUM_Send_12
    987                
    988                
    989              }
    990              
    991              else if(yxh>40)
   \                     ??NUM_Send_11: (+1)
   \   000003FE   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   00000402   0x6800             LDR      R0,[R0, #+0]
   \   00000404   0x2829             CMP      R0,#+41
   \   00000406   0xDB21             BLT.N    ??NUM_Send_13
    992              {
    993                for(i = RowMax-yxh; i < RowMax-10; i++)    
   \   00000408   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   0000040C   0x6800             LDR      R0,[R0, #+0]
   \   0000040E   0xF1D0 0x0464      RSBS     R4,R0,#+100
   \                     ??NUM_Send_14: (+1)
   \   00000412   0x2C5A             CMP      R4,#+90
   \   00000414   0xF280 0x8120      BGE.W    ??NUM_Send_1
    994                {	
    995          	FloatToChar(BlackLineData[i],sa);    
   \   00000418   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   0000041C   0x000D             MOVS     R5,R1
   \   0000041E   0x.... 0x....      LDR.W    R0,??DataTable22_54
   \   00000422   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000426   0x.... 0x....      BL       __aeabi_i2f
   \   0000042A   0x0029             MOVS     R1,R5
   \   0000042C   0x.... 0x....      BL       FloatToChar
    996                  LPLD_UART_PutChar(UART4,'#');	
   \   00000430   0x2123             MOVS     R1,#+35
   \   00000432   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000436   0x.... 0x....      BL       LPLD_UART_PutChar
    997          	LPLD_UART_PutCharArr(UART4,sa,4);
   \   0000043A   0x2204             MOVS     R2,#+4
   \   0000043C   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000440   0x.... 0x....      LDR.W    R0,??DataTable22  ;; 0x400ea000
   \   00000444   0x.... 0x....      BL       LPLD_UART_PutCharArr
    998                }
   \   00000448   0x1C64             ADDS     R4,R4,#+1
   \   0000044A   0xE7E2             B.N      ??NUM_Send_14
    999                
   1000                
   1001              }
   1002              
   1003              else 
   1004              {
   1005                for(i = RowMax-yxh; i < RowMax; i++)    
   \                     ??NUM_Send_13: (+1)
   \   0000044C   0x.... 0x....      LDR.W    R0,??DataTable22_53
   \   00000450   0x6800             LDR      R0,[R0, #+0]
   \   00000452   0xF1D0 0x0464      RSBS     R4,R0,#+100
   \                     ??NUM_Send_15: (+1)
   \   00000456   0x2C64             CMP      R4,#+100
   \   00000458   0xF280 0x80FE      BGE.W    ??NUM_Send_1
   1006                {	
   1007          	FloatToChar(BlackLineData[i],sa);    
   \   0000045C   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000460   0x000D             MOVS     R5,R1
   \   00000462   0x.... 0x....      LDR.W    R0,??DataTable22_54
   \   00000466   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000046A   0x.... 0x....      BL       __aeabi_i2f
   \   0000046E   0x0029             MOVS     R1,R5
   \   00000470   0x.... 0x....      BL       FloatToChar
   1008                  LPLD_UART_PutChar(UART4,'#');	
   \   00000474   0x2123             MOVS     R1,#+35
   \   00000476   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   00000478   0x.... 0x....      BL       LPLD_UART_PutChar
   1009          	LPLD_UART_PutCharArr(UART4,sa,4);
   \   0000047C   0x2204             MOVS     R2,#+4
   \   0000047E   0x.... 0x....      LDR.W    R1,??DataTable22_27
   \   00000482   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   00000484   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1010                }
   \   00000488   0x1C64             ADDS     R4,R4,#+1
   \   0000048A   0xE7E4             B.N      ??NUM_Send_15
   1011                
   1012                
   1013              }
   1014              
   1015            }
   1016            
   1017            
   1018            else if (fs==9) {
   \                     ??NUM_Send_8: (+1)
   \   0000048C   0x.... 0x....      LDR.W    R0,??DataTable22_21
   \   00000490   0x6800             LDR      R0,[R0, #+0]
   \   00000492   0x.... 0x....      LDR.W    R1,??DataTable22_55  ;; 0x41100000
   \   00000496   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000049A   0xD121             BNE.N    ??NUM_Send_16
   1019              LPLD_UART_PutCharArr(UART4,"开始-中",8);
   \   0000049C   0x2208             MOVS     R2,#+8
   \   0000049E   0x.... 0x....      LDR.W    R1,??DataTable22_56
   \   000004A2   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   000004A4   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1020              int i=0;
   \   000004A8   0x2400             MOVS     R4,#+0
   1021              
   1022              
   1023              
   1024              for(i =  RowMax-1; i>0; i--)    
   \   000004AA   0x2063             MOVS     R0,#+99
   \   000004AC   0x0004             MOVS     R4,R0
   \                     ??NUM_Send_17: (+1)
   \   000004AE   0x2C01             CMP      R4,#+1
   \   000004B0   0xF2C0 0x80D2      BLT.W    ??NUM_Send_1
   1025              {	
   1026                FloatToChar(BlackLineData[i],sa);    
   \   000004B4   0x....             LDR.N    R1,??DataTable22_27
   \   000004B6   0x000D             MOVS     R5,R1
   \   000004B8   0x.... 0x....      LDR.W    R0,??DataTable22_54
   \   000004BC   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000004C0   0x.... 0x....      BL       __aeabi_i2f
   \   000004C4   0x0029             MOVS     R1,R5
   \   000004C6   0x.... 0x....      BL       FloatToChar
   1027                LPLD_UART_PutChar(UART4,'#');	
   \   000004CA   0x2123             MOVS     R1,#+35
   \   000004CC   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   000004CE   0x.... 0x....      BL       LPLD_UART_PutChar
   1028                LPLD_UART_PutCharArr(UART4,sa,4);
   \   000004D2   0x2204             MOVS     R2,#+4
   \   000004D4   0x....             LDR.N    R1,??DataTable22_27
   \   000004D6   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   000004D8   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1029              }
   \   000004DC   0x1E64             SUBS     R4,R4,#+1
   \   000004DE   0xE7E6             B.N      ??NUM_Send_17
   1030              
   1031              
   1032            }
   1033            else if (fs==10) {
   \                     ??NUM_Send_16: (+1)
   \   000004E0   0x....             LDR.N    R0,??DataTable22_21
   \   000004E2   0x6800             LDR      R0,[R0, #+0]
   \   000004E4   0x.... 0x....      LDR.W    R1,??DataTable22_57  ;; 0x41200000
   \   000004E8   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000004EC   0xD121             BNE.N    ??NUM_Send_18
   1034              LPLD_UART_PutCharArr(UART4,"开始-左",8);
   \   000004EE   0x2208             MOVS     R2,#+8
   \   000004F0   0x.... 0x....      LDR.W    R1,??DataTable22_58
   \   000004F4   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   000004F6   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1035              int i=0;
   \   000004FA   0x2400             MOVS     R4,#+0
   1036              
   1037              
   1038              
   1039              for(i =  RowMax-1; i>0; i--)    
   \   000004FC   0x2063             MOVS     R0,#+99
   \   000004FE   0x0004             MOVS     R4,R0
   \                     ??NUM_Send_19: (+1)
   \   00000500   0x2C01             CMP      R4,#+1
   \   00000502   0xF2C0 0x80A9      BLT.W    ??NUM_Send_1
   1040              {	
   1041                FloatToChar(LeftBlack[i],sa);    
   \   00000506   0x....             LDR.N    R1,??DataTable22_27
   \   00000508   0x000D             MOVS     R5,R1
   \   0000050A   0x.... 0x....      LDR.W    R0,??DataTable22_59
   \   0000050E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000512   0x.... 0x....      BL       __aeabi_i2f
   \   00000516   0x0029             MOVS     R1,R5
   \   00000518   0x.... 0x....      BL       FloatToChar
   1042                LPLD_UART_PutChar(UART4,'#');	
   \   0000051C   0x2123             MOVS     R1,#+35
   \   0000051E   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   00000520   0x.... 0x....      BL       LPLD_UART_PutChar
   1043                LPLD_UART_PutCharArr(UART4,sa,4);
   \   00000524   0x2204             MOVS     R2,#+4
   \   00000526   0x....             LDR.N    R1,??DataTable22_27
   \   00000528   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   0000052A   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1044              }
   \   0000052E   0x1E64             SUBS     R4,R4,#+1
   \   00000530   0xE7E6             B.N      ??NUM_Send_19
   1045              
   1046              
   1047            }
   1048            else if (fs==11) {
   \                     ??NUM_Send_18: (+1)
   \   00000532   0x....             LDR.N    R0,??DataTable22_21
   \   00000534   0x6800             LDR      R0,[R0, #+0]
   \   00000536   0x....             LDR.N    R1,??DataTable22_60  ;; 0x41300000
   \   00000538   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000053C   0xD11F             BNE.N    ??NUM_Send_20
   1049              LPLD_UART_PutCharArr(UART4,"开始-右",8);
   \   0000053E   0x2208             MOVS     R2,#+8
   \   00000540   0x....             LDR.N    R1,??DataTable22_61
   \   00000542   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   00000544   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1050              int i=0;
   \   00000548   0x2400             MOVS     R4,#+0
   1051              
   1052              
   1053              
   1054              for(i =  RowMax-1; i>0; i--)    
   \   0000054A   0x2063             MOVS     R0,#+99
   \   0000054C   0x0004             MOVS     R4,R0
   \                     ??NUM_Send_21: (+1)
   \   0000054E   0x2C01             CMP      R4,#+1
   \   00000550   0xF2C0 0x8082      BLT.W    ??NUM_Send_1
   1055              {	
   1056                FloatToChar(RightBlack[i],sa);    
   \   00000554   0x....             LDR.N    R1,??DataTable22_27
   \   00000556   0x000D             MOVS     R5,R1
   \   00000558   0x....             LDR.N    R0,??DataTable22_62
   \   0000055A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000055E   0x.... 0x....      BL       __aeabi_i2f
   \   00000562   0x0029             MOVS     R1,R5
   \   00000564   0x.... 0x....      BL       FloatToChar
   1057                LPLD_UART_PutChar(UART4,'#');	
   \   00000568   0x2123             MOVS     R1,#+35
   \   0000056A   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   0000056C   0x.... 0x....      BL       LPLD_UART_PutChar
   1058                LPLD_UART_PutCharArr(UART4,sa,4);
   \   00000570   0x2204             MOVS     R2,#+4
   \   00000572   0x....             LDR.N    R1,??DataTable22_27
   \   00000574   0x....             LDR.N    R0,??DataTable22  ;; 0x400ea000
   \   00000576   0x.... 0x....      BL       LPLD_UART_PutCharArr
   1059              }
   \   0000057A   0x1E64             SUBS     R4,R4,#+1
   \   0000057C   0xE7E7             B.N      ??NUM_Send_21
   1060              
   1061              
   1062            }
   1063            else if (fs==12) {
   \                     ??NUM_Send_20: (+1)
   \   0000057E   0x....             LDR.N    R0,??DataTable22_21
   \   00000580   0x6800             LDR      R0,[R0, #+0]
   \   00000582   0x....             LDR.N    R1,??DataTable22_63  ;; 0x41400000
   \   00000584   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000588   0xD130             BNE.N    ??NUM_Send_22
   1064              
   1065              FloatToChar(firstline_l,sa);
   \   0000058A   0x....             LDR.N    R1,??DataTable22_27
   \   0000058C   0x000C             MOVS     R4,R1
   \   0000058E   0x....             LDR.N    R0,??DataTable22_64
   \   00000590   0x6800             LDR      R0,[R0, #+0]
   \   00000592   0x.... 0x....      BL       __aeabi_i2f
   \   00000596   0x0021             MOVS     R1,R4
   \   00000598   0x.... 0x....      BL       FloatToChar
   1066              putstr(sa,'A');
   \   0000059C   0x2141             MOVS     R1,#+65
   \   0000059E   0x....             LDR.N    R0,??DataTable22_27
   \   000005A0   0x.... 0x....      BL       putstr
   1067              
   1068              FloatToChar(firstline_m,sa);
   \   000005A4   0x....             LDR.N    R1,??DataTable22_27
   \   000005A6   0x000C             MOVS     R4,R1
   \   000005A8   0x....             LDR.N    R0,??DataTable22_65
   \   000005AA   0x6800             LDR      R0,[R0, #+0]
   \   000005AC   0x.... 0x....      BL       __aeabi_i2f
   \   000005B0   0x0021             MOVS     R1,R4
   \   000005B2   0x.... 0x....      BL       FloatToChar
   1069              putstr(sa,'B');
   \   000005B6   0x2142             MOVS     R1,#+66
   \   000005B8   0x....             LDR.N    R0,??DataTable22_27
   \   000005BA   0x.... 0x....      BL       putstr
   1070              
   1071              FloatToChar(firstline_r,sa);
   \   000005BE   0x....             LDR.N    R1,??DataTable22_27
   \   000005C0   0x000C             MOVS     R4,R1
   \   000005C2   0x....             LDR.N    R0,??DataTable22_66
   \   000005C4   0x6800             LDR      R0,[R0, #+0]
   \   000005C6   0x.... 0x....      BL       __aeabi_i2f
   \   000005CA   0x0021             MOVS     R1,R4
   \   000005CC   0x.... 0x....      BL       FloatToChar
   1072              putstr(sa,'C');
   \   000005D0   0x2143             MOVS     R1,#+67
   \   000005D2   0x....             LDR.N    R0,??DataTable22_27
   \   000005D4   0x.... 0x....      BL       putstr
   1073              FloatToChar(duojizkb1,sa);//midpos
   \   000005D8   0x....             LDR.N    R1,??DataTable22_27
   \   000005DA   0x....             LDR.N    R0,??DataTable22_67
   \   000005DC   0x6800             LDR      R0,[R0, #+0]
   \   000005DE   0x.... 0x....      BL       FloatToChar
   1074              putstr(sa,'D');
   \   000005E2   0x2144             MOVS     R1,#+68
   \   000005E4   0x....             LDR.N    R0,??DataTable22_27
   \   000005E6   0x.... 0x....      BL       putstr
   \   000005EA   0xE035             B.N      ??NUM_Send_1
   1075              
   1076              
   1077              
   1078              
   1079            }
   1080            
   1081            else if (fs==13) {
   \                     ??NUM_Send_22: (+1)
   \   000005EC   0x....             LDR.N    R0,??DataTable22_21
   \   000005EE   0x6800             LDR      R0,[R0, #+0]
   \   000005F0   0x....             LDR.N    R1,??DataTable22_68  ;; 0x41500000
   \   000005F2   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000005F6   0xD12F             BNE.N    ??NUM_Send_1
   1082              
   1083              FloatToChar(firstline_l,sa);
   \   000005F8   0x....             LDR.N    R1,??DataTable22_27
   \   000005FA   0x000C             MOVS     R4,R1
   \   000005FC   0x....             LDR.N    R0,??DataTable22_64
   \   000005FE   0x6800             LDR      R0,[R0, #+0]
   \   00000600   0x.... 0x....      BL       __aeabi_i2f
   \   00000604   0x0021             MOVS     R1,R4
   \   00000606   0x.... 0x....      BL       FloatToChar
   1084              putstr(sa,'A');
   \   0000060A   0x2141             MOVS     R1,#+65
   \   0000060C   0x....             LDR.N    R0,??DataTable22_27
   \   0000060E   0x.... 0x....      BL       putstr
   1085              
   1086              FloatToChar(firstline_m,sa);
   \   00000612   0x....             LDR.N    R1,??DataTable22_27
   \   00000614   0x000C             MOVS     R4,R1
   \   00000616   0x....             LDR.N    R0,??DataTable22_65
   \   00000618   0x6800             LDR      R0,[R0, #+0]
   \   0000061A   0x.... 0x....      BL       __aeabi_i2f
   \   0000061E   0x0021             MOVS     R1,R4
   \   00000620   0x.... 0x....      BL       FloatToChar
   1087              putstr(sa,'B');
   \   00000624   0x2142             MOVS     R1,#+66
   \   00000626   0x....             LDR.N    R0,??DataTable22_27
   \   00000628   0x.... 0x....      BL       putstr
   1088              
   1089              FloatToChar(firstline_r,sa);
   \   0000062C   0x....             LDR.N    R1,??DataTable22_27
   \   0000062E   0x000C             MOVS     R4,R1
   \   00000630   0x....             LDR.N    R0,??DataTable22_66
   \   00000632   0x6800             LDR      R0,[R0, #+0]
   \   00000634   0x.... 0x....      BL       __aeabi_i2f
   \   00000638   0x0021             MOVS     R1,R4
   \   0000063A   0x.... 0x....      BL       FloatToChar
   1090              putstr(sa,'C');
   \   0000063E   0x2143             MOVS     R1,#+67
   \   00000640   0x....             LDR.N    R0,??DataTable22_27
   \   00000642   0x.... 0x....      BL       putstr
   1091              FloatToChar(duojizkb1,sa);//midpos
   \   00000646   0x....             LDR.N    R1,??DataTable22_27
   \   00000648   0x....             LDR.N    R0,??DataTable22_67
   \   0000064A   0x6800             LDR      R0,[R0, #+0]
   \   0000064C   0x.... 0x....      BL       FloatToChar
   1092              putstr(sa,'D');
   \   00000650   0x2144             MOVS     R1,#+68
   \   00000652   0x....             LDR.N    R0,??DataTable22_27
   \   00000654   0x.... 0x....      BL       putstr
   1093              
   1094              
   1095              
   1096              
   1097            }
   1098            
   1099            
   1100            //        
   1101            //        FloatToChar(NUM_B.B,sa);
   1102            //        putstr(sa,'E');
   1103            //        
   1104            //        FloatToChar(NUM_B.C,sa);
   1105            //        putstr(sa,'F');
   1106            //        
   1107            //        FloatToChar(NUM_C.A,sa);
   1108            //        putstr(sa,'G');
   1109            //        
   1110            //        FloatToChar(NUM_C.B,sa);
   1111            //        putstr(sa,'H');
   1112            //        
   1113            //        FloatToChar(NUM_C.C,sa);
   1114            //        putstr(sa,'I');
   1115            //	 
   1116          }
   \                     ??NUM_Send_1: (+1)
   \   00000658   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1117          

   \                                 In section .text, align 2, keep-with-next
   1118          void FloatToChar(float floatNum, int8* byteArry)
   1119          { int FloatToChar_a,FloatToChar_b,FloatToChar_c,FloatToChar_d,FloatToChar_e,FloatToChar_f,FloatToChar_g;
   \                     FloatToChar: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   1120          FloatToChar_a=(int)floatNum;
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000010   0x0006             MOVS     R6,R0
   1121          FloatToChar_b=(int)(floatNum*10-FloatToChar_a*10);
   \   00000012   0x....             LDR.N    R0,??DataTable22_57  ;; 0x41200000
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x0007             MOVS     R7,R0
   \   0000001C   0x200A             MOVS     R0,#+10
   \   0000001E   0xFB00 0xF006      MUL      R0,R0,R6
   \   00000022   0x.... 0x....      BL       __aeabi_i2f
   \   00000026   0x0001             MOVS     R1,R0
   \   00000028   0x0038             MOVS     R0,R7
   \   0000002A   0x.... 0x....      BL       __aeabi_fsub
   \   0000002E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000032   0x0007             MOVS     R7,R0
   1122          FloatToChar_c=(int)(floatNum*100-((int)(floatNum*10))*10);
   \   00000034   0x....             LDR.N    R0,??DataTable22_46  ;; 0x42c80000
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0x.... 0x....      BL       __aeabi_fmul
   \   0000003C   0x4680             MOV      R8,R0
   \   0000003E   0x....             LDR.N    R0,??DataTable22_57  ;; 0x41200000
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
   \   00000046   0x.... 0x....      BL       __aeabi_f2iz
   \   0000004A   0x210A             MOVS     R1,#+10
   \   0000004C   0x4348             MULS     R0,R1,R0
   \   0000004E   0x.... 0x....      BL       __aeabi_i2f
   \   00000052   0x0001             MOVS     R1,R0
   \   00000054   0x4640             MOV      R0,R8
   \   00000056   0x.... 0x....      BL       __aeabi_fsub
   \   0000005A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000005E   0x4680             MOV      R8,R0
   1123          FloatToChar_d=(int)(floatNum*1000-((int)(floatNum*100))*10); 
   \   00000060   0x....             LDR.N    R0,??DataTable22_69  ;; 0x447a0000
   \   00000062   0x0021             MOVS     R1,R4
   \   00000064   0x.... 0x....      BL       __aeabi_fmul
   \   00000068   0x4681             MOV      R9,R0
   \   0000006A   0x....             LDR.N    R0,??DataTable22_46  ;; 0x42c80000
   \   0000006C   0x0021             MOVS     R1,R4
   \   0000006E   0x.... 0x....      BL       __aeabi_fmul
   \   00000072   0x.... 0x....      BL       __aeabi_f2iz
   \   00000076   0x210A             MOVS     R1,#+10
   \   00000078   0x4348             MULS     R0,R1,R0
   \   0000007A   0x.... 0x....      BL       __aeabi_i2f
   \   0000007E   0x0001             MOVS     R1,R0
   \   00000080   0x4648             MOV      R0,R9
   \   00000082   0x.... 0x....      BL       __aeabi_fsub
   \   00000086   0x.... 0x....      BL       __aeabi_f2iz
   \   0000008A   0x4681             MOV      R9,R0
   1124          FloatToChar_e=(int)(floatNum*10000-((int)(floatNum*1000))*10);
   \   0000008C   0x....             LDR.N    R0,??DataTable22_70  ;; 0x461c4000
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0x.... 0x....      BL       __aeabi_fmul
   \   00000094   0x4682             MOV      R10,R0
   \   00000096   0x....             LDR.N    R0,??DataTable22_69  ;; 0x447a0000
   \   00000098   0x0021             MOVS     R1,R4
   \   0000009A   0x.... 0x....      BL       __aeabi_fmul
   \   0000009E   0x.... 0x....      BL       __aeabi_f2iz
   \   000000A2   0x210A             MOVS     R1,#+10
   \   000000A4   0x4348             MULS     R0,R1,R0
   \   000000A6   0x.... 0x....      BL       __aeabi_i2f
   \   000000AA   0x0001             MOVS     R1,R0
   \   000000AC   0x4650             MOV      R0,R10
   \   000000AE   0x.... 0x....      BL       __aeabi_fsub
   \   000000B2   0x.... 0x....      BL       __aeabi_f2iz
   \   000000B6   0x4682             MOV      R10,R0
   1125          FloatToChar_f=(int)(floatNum*100000-((int)(floatNum*10000))*10);
   \   000000B8   0x....             LDR.N    R0,??DataTable22_71  ;; 0x47c35000
   \   000000BA   0x0021             MOVS     R1,R4
   \   000000BC   0x.... 0x....      BL       __aeabi_fmul
   \   000000C0   0x4683             MOV      R11,R0
   \   000000C2   0x....             LDR.N    R0,??DataTable22_70  ;; 0x461c4000
   \   000000C4   0x0021             MOVS     R1,R4
   \   000000C6   0x.... 0x....      BL       __aeabi_fmul
   \   000000CA   0x.... 0x....      BL       __aeabi_f2iz
   \   000000CE   0x210A             MOVS     R1,#+10
   \   000000D0   0x4348             MULS     R0,R1,R0
   \   000000D2   0x.... 0x....      BL       __aeabi_i2f
   \   000000D6   0x0001             MOVS     R1,R0
   \   000000D8   0x4658             MOV      R0,R11
   \   000000DA   0x.... 0x....      BL       __aeabi_fsub
   \   000000DE   0x.... 0x....      BL       __aeabi_f2iz
   \   000000E2   0x4683             MOV      R11,R0
   1126          FloatToChar_g=(int)(floatNum*1000000-((int)(floatNum*100000))*10);
   \   000000E4   0x....             LDR.N    R0,??DataTable22_72  ;; 0x49742400
   \   000000E6   0x0021             MOVS     R1,R4
   \   000000E8   0x.... 0x....      BL       __aeabi_fmul
   \   000000EC   0x9000             STR      R0,[SP, #+0]
   \   000000EE   0x....             LDR.N    R0,??DataTable22_71  ;; 0x47c35000
   \   000000F0   0x0021             MOVS     R1,R4
   \   000000F2   0x.... 0x....      BL       __aeabi_fmul
   \   000000F6   0x.... 0x....      BL       __aeabi_f2iz
   \   000000FA   0x210A             MOVS     R1,#+10
   \   000000FC   0x4348             MULS     R0,R1,R0
   \   000000FE   0x.... 0x....      BL       __aeabi_i2f
   \   00000102   0x0001             MOVS     R1,R0
   \   00000104   0x9800             LDR      R0,[SP, #+0]
   \   00000106   0x.... 0x....      BL       __aeabi_fsub
   \   0000010A   0x.... 0x....      BL       __aeabi_f2iz
   1127          str_ln=sprintf(byteArry,"%d.%d%d%d%d%d%d",FloatToChar_a,FloatToChar_b,FloatToChar_c,FloatToChar_d,FloatToChar_e,FloatToChar_f,FloatToChar_g);
   \   0000010E   0x9004             STR      R0,[SP, #+16]
   \   00000110   0xF8CD 0xB00C      STR      R11,[SP, #+12]
   \   00000114   0xF8CD 0xA008      STR      R10,[SP, #+8]
   \   00000118   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   0000011C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000120   0x003B             MOVS     R3,R7
   \   00000122   0x0032             MOVS     R2,R6
   \   00000124   0x....             LDR.N    R1,??DataTable22_73
   \   00000126   0x0028             MOVS     R0,R5
   \   00000128   0x.... 0x....      BL       sprintf
   \   0000012C   0x....             LDR.N    R1,??DataTable22_74
   \   0000012E   0x6008             STR      R0,[R1, #+0]
   1128          
   1129          
   1130          
   1131          //sprintf(byteArry,"%-8f",floatNum);
   1132          
   1133          }
   \   00000130   0xB005             ADD      SP,SP,#+20
   \   00000132   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     adc_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     GetCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     ltpmt_temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     GetFreq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0x00FA0A30         DC32     0xfa0a30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x400FF100         DC32     0x400ff100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     lptmr_init_param

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     gpio_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     ptc_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x400FF0C0         DC32     0x400ff0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     ptb_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     dmac_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     pData1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x........         DC32     dmad_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x........         DC32     pData2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x........         DC32     pData3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x........         DC32     ch1_over_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x........         DC32     ch2_over_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x40009036         DC32     0x40009036

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x........         DC32     bm_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x40009056         DC32     0x40009056

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   0x........         DC32     bm_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   0x40009076         DC32     0x40009076

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   0x........         DC32     bm_pz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   0x........         DC32     dma0_isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   0x........         DC32     dma1_isr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   0x........         DC32     V_Cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   0x........         DC32     Is_DispPhoto

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_26:
   \   00000000   0x........         DC32     dma_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_27:
   \   00000000   0x400FF0D0         DC32     0x400ff0d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_28:
   \   00000000   0x........         DC32     Pix_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_29:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_30:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_31:
   \   00000000   0x4004A0A0         DC32     0x4004a0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_32:
   \   00000000   0x........         DC32     ptd_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_33:
   \   00000000   0x00090002         DC32     0x90002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_34:
   \   00000000   0x........         DC32     pta_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_35:
   \   00000000   0x00010002         DC32     0x10002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_36:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_37:
   \   00000000   0x........         DC32     joc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_38:
   \   00000000   0x........         DC32     V_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_39:
   \   00000000   0x40009010         DC32     0x40009010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_40:
   \   00000000   0x........         DC32     pitcnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_41:
   \   00000000   0x........         DC32     cjhs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_42:
   \   00000000   0x........         DC32     cjh

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     pte_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0x........         DC32     LED_i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     RX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     count_RX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     flag_rx_succsess

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     RX_FLAG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \   00000000   0x........         DC32     FloatSave

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_7:
   \   00000000   0x........         DC32     duojizkb0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_8:
   \   00000000   0x........         DC32     FloatSave+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_9:
   \   00000000   0x........         DC32     duojizkb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_10:
   \   00000000   0x........         DC32     FloatSave+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_11:
   \   00000000   0x........         DC32     duojipianyi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_12:
   \   00000000   0x........         DC32     zkb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_13:
   \   00000000   0x........         DC32     NUM_B+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_14:
   \   00000000   0x........         DC32     NUM_B+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_15:
   \   00000000   0x........         DC32     SteerPID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_16:
   \   00000000   0x........         DC32     NUM_C+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_17:
   \   00000000   0x........         DC32     SteerPID+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_18:
   \   00000000   0x........         DC32     MidPos_h

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_19:
   \   00000000   0x........         DC32     NUM_D+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_20:
   \   00000000   0x........         DC32     NUM_D+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_21:
   \   00000000   0x........         DC32     fs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_22:
   \   00000000   0x........         DC32     NUM_E+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_23:
   \   00000000   0x........         DC32     NUM_E+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_24:
   \   00000000   0x........         DC32     NUM_E

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_25:
   \   00000000   0x42480000         DC32     0x42480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_26:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_27:
   \   00000000   0x........         DC32     sa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_28:
   \   00000000   0x........         DC32     a_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_29:
   \   00000000   0x........         DC32     StableNumbers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_30:
   \   00000000   0x........         DC32     Error

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_31:
   \   00000000   0x........         DC32     EndType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_32:
   \   00000000   0x........         DC32     MidLineExcursion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_33:
   \   00000000   0x........         DC32     MidLineVariance

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_34:
   \   00000000   0x........         DC32     hx_find_count_max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_35:
   \   00000000   0x........         DC32     V_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_36:
   \   00000000   0x........         DC32     TopE1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_37:
   \   00000000   0x........         DC32     TopE2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_38:
   \   00000000   0x........         DC32     g_Derict

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_39:
   \   00000000   0x........         DC32     BlackEndL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_40:
   \   00000000   0x........         DC32     BlackEndR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_41:
   \   00000000   0x........         DC32     BlackEndM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_42:
   \   00000000   0x40C00000         DC32     0x40c00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_43:
   \   00000000   0x........         DC32     bm_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_44:
   \   00000000   0x........         DC32     bm_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_45:
   \   00000000   0x........         DC32     bm_pz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_46:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_47:
   \   00000000   0x40E00000         DC32     0x40e00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_48:
   \   00000000   0x........         DC32     a_y_min

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_49:
   \   00000000   0x........         DC32     a_y_max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_50:
   \   00000000   0x........         DC32     sst_h

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_51:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_52:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_53:
   \   00000000   0x........         DC32     yxh

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_54:
   \   00000000   0x........         DC32     BlackLineData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_55:
   \   00000000   0x41100000         DC32     0x41100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_56:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_57:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_58:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_59:
   \   00000000   0x........         DC32     LeftBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_60:
   \   00000000   0x41300000         DC32     0x41300000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_61:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_62:
   \   00000000   0x........         DC32     RightBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_63:
   \   00000000   0x41400000         DC32     0x41400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_64:
   \   00000000   0x........         DC32     firstline_l

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_65:
   \   00000000   0x........         DC32     firstline_m

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_66:
   \   00000000   0x........         DC32     firstline_r

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_67:
   \   00000000   0x........         DC32     duojizkb1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_68:
   \   00000000   0x41500000         DC32     0x41500000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_69:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_70:
   \   00000000   0x461C4000         DC32     0x461c4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_71:
   \   00000000   0x47C35000         DC32     0x47c35000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_72:
   \   00000000   0x49742400         DC32     0x49742400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_73:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_74:
   \   00000000   0x........         DC32     str_ln

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0xBD 0xD3          DC8 "\275\323\312\325\275\341\312\370"
   \              0xCA 0xD5    
   \              0xBD 0xE1    
   \              0xCA 0xF8    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x75 0x61          DC8 "uart4_init"
   \              0x72 0x74    
   \              0x34 0x5F    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0xBF 0xAA          DC8 "\277\252\312\274"
   \              0xCA 0xBC    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0xBF 0xAA          DC8 "\277\252\312\274-\326\320"
   \              0xCA 0xBC    
   \              0x2D 0xD6    
   \              0xD0 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0xBF 0xAA          DC8 "\277\252\312\274-\327\363"
   \              0xCA 0xBC    
   \              0x2D 0xD7    
   \              0xF3 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0xBF 0xAA          DC8 "\277\252\312\274-\323\322"
   \              0xCA 0xBC    
   \              0x2D 0xD3    
   \              0xD2 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x25 0x64          DC8 "%d.%d%d%d%d%d%d"
   \              0x2E 0x25    
   \              0x64 0x25    
   \              0x64 0x25    
   \              0x64 0x25    
   \              0x64 0x25    
   \              0x64 0x25    
   \              0x64 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ADC_init
         8   -> LPLD_ADC_Chn_Enable
         8   -> LPLD_ADC_Init
        24   -> __aeabi_memcpy4
      24   Boma_init_gpio
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
      48   Camera_dma_init
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      24   Camera_gpio_init
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
      56   FloatToChar
        56   -> __aeabi_f2iz
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> __aeabi_i2f
        56   -> sprintf
       8   LED
         8   -> LPLD_GPIO_Toggle_b
      24   LED_init_gpio
         8   -> LPLD_GPIO_Init
        24   -> __aeabi_memcpy4
       8   NUM_GET
         8   -> LPLD_FTM_PWM_ChangeDuty
         8   -> ReceFloat
         8   -> __aeabi_f2iz
         8   -> __aeabi_fsub
         8   -> angle_to_period
         8   -> memcpy
         8 __aeabi_cfcmpeq
      16   NUM_Send
        16   -> FloatToChar
        16   -> LPLD_UART_PutChar
        16   -> LPLD_UART_PutCharArr
        16   -> __aeabi_d2f
        16   -> __aeabi_fdiv
        16   -> __aeabi_i2f
        16   -> __aeabi_ui2f
        16   -> putstr
        16 __aeabi_cfcmpeq
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       0   ReceFloat
      48   bm_init
        32   -> LPLD_DMA_Init
        32   -> LPLD_GPIO_Init
        48   -> __aeabi_memcpy4
       0   delay
      48   dma0_isr
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
      48   dma1_isr
        32   -> LPLD_DMA_Init
        48   -> __aeabi_memcpy4
       8   dma_camera_isr
         8   -> LPLD_GPIO_Toggle_b
         8   -> LPLD_UART_PutCharArr
         8   -> NVIC_EnableIRQ
       8   lptmr_isr
         8   -> LPLD_LPTMR_GetPulseAcc
         8   -> LPLD_LPTMR_Init
         8   -> LPLD_LPTMR_ResetCounter
      48   pit_isr
        32   -> LPLD_DMA_Init
        32   -> __aeabi_f2iz
        32   -> __aeabi_fadd
        32   -> __aeabi_fdiv
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        48   -> __aeabi_memcpy4
        32   -> fabss
        32 __aeabi_cfcmple
       8   porta_isr
         8   -> NVIC_EnableIRQ
         8   -> pit_isr
       8   portb_isr
         8   -> NVIC_DisableIRQ
       8   public_init
         8   -> Boma_init_gpio
         8   -> Camera_dma_init
         8   -> Camera_gpio_init
         8   -> LED_init_gpio
         8   -> bm_init
         8   -> uart_init
      16   putstr
        16   -> LPLD_UART_PutChar
        16   -> LPLD_UART_PutCharArr
      64   uart_init
        48   -> LPLD_UART_EnableIrq
        48   -> LPLD_UART_Init
        48   -> LPLD_UART_PutCharArr
        64   -> __aeabi_memcpy4
       8   uart_isr
         8   -> LPLD_UART_GetChar
         8   -> NUM_GET


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable19
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_19
       4  ??DataTable20_2
       4  ??DataTable20_20
       4  ??DataTable20_21
       4  ??DataTable20_22
       4  ??DataTable20_23
       4  ??DataTable20_24
       4  ??DataTable20_25
       4  ??DataTable20_26
       4  ??DataTable20_27
       4  ??DataTable20_28
       4  ??DataTable20_29
       4  ??DataTable20_3
       4  ??DataTable20_30
       4  ??DataTable20_31
       4  ??DataTable20_32
       4  ??DataTable20_33
       4  ??DataTable20_34
       4  ??DataTable20_35
       4  ??DataTable20_36
       4  ??DataTable20_37
       4  ??DataTable20_38
       4  ??DataTable20_39
       4  ??DataTable20_4
       4  ??DataTable20_40
       4  ??DataTable20_41
       4  ??DataTable20_42
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_10
       4  ??DataTable22_11
       4  ??DataTable22_12
       4  ??DataTable22_13
       4  ??DataTable22_14
       4  ??DataTable22_15
       4  ??DataTable22_16
       4  ??DataTable22_17
       4  ??DataTable22_18
       4  ??DataTable22_19
       4  ??DataTable22_2
       4  ??DataTable22_20
       4  ??DataTable22_21
       4  ??DataTable22_22
       4  ??DataTable22_23
       4  ??DataTable22_24
       4  ??DataTable22_25
       4  ??DataTable22_26
       4  ??DataTable22_27
       4  ??DataTable22_28
       4  ??DataTable22_29
       4  ??DataTable22_3
       4  ??DataTable22_30
       4  ??DataTable22_31
       4  ??DataTable22_32
       4  ??DataTable22_33
       4  ??DataTable22_34
       4  ??DataTable22_35
       4  ??DataTable22_36
       4  ??DataTable22_37
       4  ??DataTable22_38
       4  ??DataTable22_39
       4  ??DataTable22_4
       4  ??DataTable22_40
       4  ??DataTable22_41
       4  ??DataTable22_42
       4  ??DataTable22_43
       4  ??DataTable22_44
       4  ??DataTable22_45
       4  ??DataTable22_46
       4  ??DataTable22_47
       4  ??DataTable22_48
       4  ??DataTable22_49
       4  ??DataTable22_5
       4  ??DataTable22_50
       4  ??DataTable22_51
       4  ??DataTable22_52
       4  ??DataTable22_53
       4  ??DataTable22_54
       4  ??DataTable22_55
       4  ??DataTable22_56
       4  ??DataTable22_57
       4  ??DataTable22_58
       4  ??DataTable22_59
       4  ??DataTable22_6
       4  ??DataTable22_60
       4  ??DataTable22_61
       4  ??DataTable22_62
       4  ??DataTable22_63
       4  ??DataTable22_64
       4  ??DataTable22_65
       4  ??DataTable22_66
       4  ??DataTable22_67
       4  ??DataTable22_68
       4  ??DataTable22_69
       4  ??DataTable22_7
       4  ??DataTable22_70
       4  ??DataTable22_71
       4  ??DataTable22_72
       4  ??DataTable22_73
       4  ??DataTable22_74
       4  ??DataTable22_8
       4  ??DataTable22_9
      12  ?_0
      12  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
       8  ?_5
      16  ?_6
      84  ADC_init
     178  Boma_init_gpio
     116  Camera_dma_init
     306  Camera_gpio_init
      12  FloatSave
     310  FloatToChar
       4  GetCnt
       4  GetFreq
    9000  ImageData
       4  Is_DispPhoto
      92  LED
       4  LED_i
     194  LED_init_gpio
      12  NUM_A
      12  NUM_B
      12  NUM_C
      12  NUM_D
      12  NUM_E
     468  NUM_GET
    1626  NUM_Send
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
   40800  Pix_Data
      16  RX
       1  RX_FLAG
     158  ReceFloat
    9000  ThresholdData
       4  V_Cnt
       4  V_count
       4  aaa
      20  adc_init_struct
       4  bm_err
       4  bm_err_y
       4  bm_err_z
     384  bm_init
       4  bm_y_last
       4  bm_z_last
       4  ch1_over_cnt
       4  ch1_pulseacc
       4  ch2_over_cnt
       4  ch2_pulseacc
       4  cjh
     400  cjhs
     400  cjhs_a
       1  count_RX
      32  delay
      42  dma0_isr
      42  dma1_isr
      44  dma_camera_isr
      44  dma_init_struct
      44  dmac_init_struct
      44  dmad_init_struct
       4  err_cs
       1  flag_rx_succsess
       4  fs
      28  ftm1_init_struct
      20  gpio_init_struct
       4  joc
      12  lastspeed
       4  lastspeed_i
      12  lptmr_init_param
     120  lptmr_isr
       2  ltpmt_temp
       1  pData1
       1  pData2
       1  pData3
      20  pit_init_param
     452  pit_isr
       4  pitcnt
     182  porta_isr
     154  portb_isr
      20  pta_init
      20  ptb_init
      20  ptc_init
      20  ptd_init
      20  pte_init
      28  public_init
      66  putstr
       4  qd_result
       8  sa
       4  sst_h
       4  str_ln
      94  uart_init
      96  uart_isr

 
 59 336 bytes in section .bss
    812 bytes in section .data
     72 bytes in section .rodata
  5 828 bytes in section .text
 
  5 828 bytes of CODE  memory
     72 bytes of CONST memory
 60 148 bytes of DATA  memory

Errors: none
Warnings: 3
