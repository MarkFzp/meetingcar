///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       27/Jul/2015  23:36:03
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\app\LQOLED.c
//    Command line =  
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\app\LQOLED.c
//        -D LPLD_K60 -D USE_K60F12 -lCN
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\List\
//        -lB
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\List\
//        -o
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\Obj\
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4F -e --fpu=None --dlib_config "C:\Program Files\IAR
//        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\app\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\CPU\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\common\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\HW\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\DEV\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\LPLD\FUNC\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\uCOS-II\Ports\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\uCOS-II\Source\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\FatFs\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\FatFs\option\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\common\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\driver\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\descriptor\
//        -I
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\..\..\..\lib\USB\class\
//        -Ol -I "C:\Program Files\IAR Systems\Embedded Workbench
//        7.0\arm\CMSIS\Include\" -D ARM_MATH_CM4
//    List file    =  
//        C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\iar\FLASH\List\LQOLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN __aeabi_memcpy4
        EXTERN gpio_init_struct

        PUBLIC Dly_ms
        PUBLIC Draw_BMP
        PUBLIC Draw_Landzo
        PUBLIC Draw_LibLogo
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC LANDZO_LOGO
        PUBLIC LIBLOGO60x58
        PUBLIC OLED_CLS
        PUBLIC OLED_DLY_ms
        PUBLIC OLED_Fill
        PUBLIC OLED_HEXACSII
        PUBLIC OLED_Init
        PUBLIC OLED_P14x16Str
        PUBLIC OLED_P6x8Str
        PUBLIC OLED_P8x16Str
        PUBLIC OLED_Print_Num
        PUBLIC OLED_Print_Str
        PUBLIC OLED_PutPixel
        PUBLIC OLED_Rectangle
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_Wr6Dat
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC lanzhou96x64


        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_0:
        DATA
        DC8 "  \307\340\265\272\300\355\271\244\264\363\321\247"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_1:
        DATA
        DC8 "   Freescale "
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_2:
        DATA
        DC8 "   \326\307\304\334\263\265\276\272\310\374 "
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_3:
        DATA
        DC8 "   \311\343\317\361\315\267\322\273\266\323 "
        DC8 0
// C:\Users\Administrator\Desktop\lpld\LPLD_OSKinetis_V3.1\project\ligen_car通用7-27-3.54\app\LQOLED.c
//    1 /********************************************
//    2 山外MKL26多功能开发板 
//    3 Designed by Chiu Sir
//    4 E-mail:chiusir@yahoo.cn
//    5 软件版本:V1.1
//    6 最后更新:2011年9月18日
//    7 相关信息参考下列地址：
//    8 网站：  http://www.lqist.cn
//    9 淘宝店：http://shop36265907.taobao.com------------------------------------
//   10 ============================================     
//   11 如果用户使用的是5V单片机，请看用户手册，切勿烧毁模块！  
//   12 ============================================*/
//   13 #include "sys.h"
//   14 #include "LQOLED.h"
//   15 /*
//   16 4线SPI使用说明：
//   17 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   18 VCC 供内部逻辑电压 1.8~6V   
//   19 GND 地
//   20 
//   21 BS0 低电平
//   22 BS1 低电平
//   23 BS2 低电平
//   24 
//   25 CS  片选管脚
//   26 DC  命令数据选择管脚
//   27 RES 模块复位管脚 
//   28 D0（SCLK） ，时钟脚，由MCU控制
//   29 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   30 
//   31 D2 悬空      
//   32 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   33 RD  低电平 ，也可悬空，但最好设为低电平
//   34 RW  低电平 ，也可悬空，但最好设为低电平
//   35 RD  低电平 ，也可悬空，但最好设为低电平   
//   36 */
//   37 
//   38 /************************************************************************
//   39 OLED 一行可以显示16个字符，可以显示8行。
//   40 ************************************************************************/
//   41 
//   42 #define OLED_SCL  PTC16_O   //        D0
//   43 #define OLED_SDA  PTC17_O   //        D1
//   44 #define OLED_RST  PTC18_O   //       RST
//   45 #define OLED_DC   PTC19_O   //       DS
//   46 #define OLED_CS   PTC14_O   //       CS
//   47 
//   48 #define XLevelL		0x00 
//   49 #define XLevelH		0x10
//   50 #define XLevel		((XLevelH&0x0F)*16+XLevelL)
//   51 #define Max_Column	128
//   52 #define Max_Row		64
//   53 #define	Brightness	0xCF
//   54 
//   55 /*
//   56 4线SPI使用说明：
//   57 VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
//   58 VCC 供内部逻辑电压 1.8~6V
//   59 GND 地
//   60 
//   61 BS0 低电平
//   62 BS1 低电平
//   63 BS2 低电平
//   64 
//   65 CS  片选管脚
//   66 DC  命令数据选择管脚
//   67 RES 模块复位管脚
//   68 D0（SCLK） ，时钟脚，由MCU控制
//   69 D1（MOSI） ，主输出从输入数据脚，由MCU控制
//   70 
//   71 D2 悬空
//   72 D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
//   73 RD  低电平 ，也可悬空，但最好设为低电平
//   74 RW  低电平 ，也可悬空，但最好设为低电平
//   75 RD  低电平 ，也可悬空，但最好设为低电平
//   76 */
//   77 
//   78 #define X_WIDTH 128
//   79 #define Y_WIDTH 64
//   80 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   81 const uint8_t F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   82 {
//   83   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   84   { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   85   { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   86   { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   87   { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   88   { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   89   { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   90   { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   91   { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   92   { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   93   { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   94   { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   95   { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   96   { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   97   { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   98   { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   99   { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//  100   { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//  101   { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//  102   { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//  103   { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//  104   { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//  105   { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//  106   { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  107   { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  108   { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  109   { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  110   { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  111   { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  112   { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  113   { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  114   { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  115   { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  116   { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  117   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  118   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  119   { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  120   { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  121   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  122   { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  123   { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  124   { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  125   { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  126   { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  127   { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  128   { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  129   { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  130   { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  131   { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  132   { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  133   { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  134   { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  135   { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  136   { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  137   { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  138   { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  139   { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  140   { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  141   { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  142   { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  143   { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  144   { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  145   { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  146   { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  147   { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  148   { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  149   { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  150   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  151   { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  152   { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  153   { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  154   { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  155   { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  156   { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  157   { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  158   { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  159   { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  160   { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  161   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  162   { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  163   { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  164   { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  165   { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  166   { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  167   { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  168   { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  169   { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  170   { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  171   { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  172   { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  173   { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  174   { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  175 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  176 const uint8_t F14x16_Idx[] =
F14x16_Idx:
        DATA
        DC8 "\307\340\265\272\300\355\271\244\264\363\321\247\326\307\304\334\263\265\276\272\310\374\311\343\317\361\315\267\310\375\266\323"
        DC8 0, 0, 0
//  177 {
//  178   "青岛理工大学智能车竞赛摄像头三队"
//  179 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  180 const uint8_t F14x16[] = {
F14x16:
        DATA
        DC8 0, 8, 136, 168, 168, 168, 126, 170, 168, 168, 152, 132, 64, 0, 0, 0
        DC8 0, 255, 20, 20, 21, 20, 84, 84, 63, 0, 0, 0, 0, 0, 0, 252, 8, 6
        DC8 120, 136, 136, 120, 0, 0, 0, 0, 0, 0, 60, 33, 33, 31, 33, 33, 61
        DC8 65, 65, 127, 1, 0, 0, 136, 136, 248, 136, 136, 252, 36, 36, 252, 36
        DC8 252, 4, 0, 0, 48, 16, 15, 8, 72, 73, 73, 73, 127, 73, 73, 104, 0, 0
        DC8 0, 8, 8, 8, 8, 248, 8, 8, 8, 8, 12, 8, 0, 0, 0, 32, 32, 32, 32, 63
        DC8 32, 32, 32, 32, 32, 32, 0, 0, 32, 32, 32, 32, 32, 254, 162, 32, 32
        DC8 32, 32, 32, 0, 0, 128, 64, 32, 16, 12, 3, 3, 4, 8, 48, 96, 64, 0, 0
        DC8 192, 32, 164, 184, 160, 164, 168, 176, 168, 38, 96, 32, 0, 0, 0, 8
        DC8 8, 8, 72, 72, 62, 9, 8, 8, 4, 4, 0, 0, 48, 44, 170, 120, 168, 164
        DC8 32, 252, 136, 136, 120, 0, 0, 0, 2, 2, 1, 126, 82, 83, 83, 82, 82
        DC8 126, 0, 0, 0, 0, 112, 168, 164, 162, 232, 48, 0, 126, 144, 136, 184
        DC8 64, 0, 0, 0, 127, 10, 74, 127, 0, 0, 126, 72, 68, 66, 112, 0, 0, 0
        DC8 8, 200, 56, 12, 10, 232, 8, 8, 136, 8, 0, 0, 0, 8, 8, 9, 9, 9, 9
        DC8 127, 9, 9, 8, 8, 8, 0, 0, 64, 64, 200, 72, 56, 74, 76, 40, 88, 72
        DC8 72, 0, 0, 0, 128, 128, 79, 37, 29, 5, 61, 69, 71, 64, 64, 120, 0, 0
        DC8 0, 12, 72, 104, 248, 102, 104, 248, 104, 120, 8, 0, 0, 0, 8, 133
        DC8 133, 95, 68, 61, 37, 37, 95, 69, 5, 4, 0, 0, 16, 16, 254, 144, 128
        DC8 92, 180, 180, 180, 252, 132, 64, 0, 0, 3, 65, 127, 66, 38, 26, 54
        DC8 66, 46, 25, 38, 66, 0, 0, 192, 240, 44, 34, 120, 148, 150, 116, 156
        DC8 148, 112, 0, 0, 0, 0, 127, 0, 80, 74, 42, 85, 202, 126, 13, 49, 32
        DC8 0, 0, 0, 32, 68, 136, 24, 0, 254, 0, 0, 0, 0, 0, 0, 0, 130, 130, 66
        DC8 34, 18, 14, 11, 10, 18, 18, 34, 66, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8
        DC8 136, 12, 8, 0, 0, 0, 32, 33, 33, 33, 33, 33, 33, 33, 33, 32, 32, 0
        DC8 0, 0, 252, 68, 188, 4, 0, 0, 254, 192, 0, 0, 0, 0, 0, 0, 63, 8, 89
        DC8 46, 16, 14, 1, 3, 12, 48, 0, 0
//  181   //青(0) 岛(1) 理(2) 工(3) 大(4) 学(5) 智(6) 能(7) 车(8) 竞(9) 赛(10) 摄(11) 像(12) 头(13) 三(14) 队(15)
//  182 
//  183 
//  184  0x00,0x08,0x88,0xA8,0xA8,0xA8,0x7E,0xAA,0xA8,0xA8,0x98,0x84,0x40,0x00,0x00,0x00 ,
//  185  0x00,0xFF,0x14,0x14,0x15,0x14,0x54,0x54,0x3F,0x00,0x00,0x00 ,/*"青",0*/
//  186 
//  187  0x00,0x00,0x00,0xFC,0x08,0x06,0x78,0x88,0x88,0x78,0x00,0x00,0x00,0x00,0x00,0x00 ,
//  188  0x3C,0x21,0x21,0x1F,0x21,0x21,0x3D,0x41,0x41,0x7F,0x01,0x00 ,/*"岛",1*/
//  189 
//  190  0x00,0x88,0x88,0xF8,0x88,0x88,0xFC,0x24,0x24,0xFC,0x24,0xFC,0x04,0x00,0x00,0x30 ,
//  191  0x10,0x0F,0x08,0x48,0x49,0x49,0x49,0x7F,0x49,0x49,0x68,0x00 ,/*"理",2*/
//  192 
//  193  0x00,0x00,0x08,0x08,0x08,0x08,0xF8,0x08,0x08,0x08,0x08,0x0C,0x08,0x00,0x00,0x00 ,
//  194  0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x20,0x20,0x00 ,/*"工",3*/
//  195 
//  196  0x00,0x20,0x20,0x20,0x20,0x20,0xFE,0xA2,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x80 ,
//  197  0x40,0x20,0x10,0x0C,0x03,0x03,0x04,0x08,0x30,0x60,0x40,0x00 ,/*"大",4*/
//  198 
//  199  0x00,0xC0,0x20,0xA4,0xB8,0xA0,0xA4,0xA8,0xB0,0xA8,0x26,0x60,0x20,0x00,0x00,0x00 ,
//  200  0x08,0x08,0x08,0x48,0x48,0x3E,0x09,0x08,0x08,0x04,0x04,0x00 ,/*"学",5*/
//  201 
//  202  0x00,0x30,0x2C,0xAA,0x78,0xA8,0xA4,0x20,0xFC,0x88,0x88,0x78,0x00,0x00,0x00,0x02 ,
//  203  0x02,0x01,0x7E,0x52,0x53,0x53,0x52,0x52,0x7E,0x00,0x00,0x00 ,/*"智",6*/
//  204 
//  205  0x00,0x70,0xA8,0xA4,0xA2,0xE8,0x30,0x00,0x7E,0x90,0x88,0xB8,0x40,0x00,0x00,0x00 ,
//  206  0x7F,0x0A,0x4A,0x7F,0x00,0x00,0x7E,0x48,0x44,0x42,0x70,0x00 ,/*"能",7*/
//  207 
//  208  0x00,0x00,0x08,0xC8,0x38,0x0C,0x0A,0xE8,0x08,0x08,0x88,0x08,0x00,0x00,0x00,0x08 ,
//  209  0x08,0x09,0x09,0x09,0x09,0x7F,0x09,0x09,0x08,0x08,0x08,0x00 ,/*"车",8*/
//  210 
//  211  0x00,0x40,0x40,0xC8,0x48,0x38,0x4A,0x4C,0x28,0x58,0x48,0x48,0x00,0x00,0x00,0x80 ,
//  212  0x80,0x4F,0x25,0x1D,0x05,0x3D,0x45,0x47,0x40,0x40,0x78,0x00 ,/*"竞",9*/
//  213 
//  214  0x00,0x00,0x0C,0x48,0x68,0xF8,0x66,0x68,0xF8,0x68,0x78,0x08,0x00,0x00,0x00,0x08 ,
//  215  0x85,0x85,0x5F,0x44,0x3D,0x25,0x25,0x5F,0x45,0x05,0x04,0x00 ,/*"赛",10*/
//  216 
//  217  0x00,0x10,0x10,0xFE,0x90,0x80,0x5C,0xB4,0xB4,0xB4,0xFC,0x84,0x40,0x00,0x00,0x03 ,
//  218  0x41,0x7F,0x42,0x26,0x1A,0x36,0x42,0x2E,0x19,0x26,0x42,0x00 ,/*"摄",11*/
//  219 
//  220  0x00,0xC0,0xF0,0x2C,0x22,0x78,0x94,0x96,0x74,0x9C,0x94,0x70,0x00,0x00,0x00,0x00 ,
//  221  0x7F,0x00,0x50,0x4A,0x2A,0x55,0xCA,0x7E,0x0D,0x31,0x20,0x00 ,/*"像",12*/
//  222 
//  223  0x00,0x00,0x20,0x44,0x88,0x18,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82 ,
//  224  0x82,0x42,0x22,0x12,0x0E,0x0B,0x0A,0x12,0x12,0x22,0x42,0x00 ,/*"头",13*/
//  225 
//  226  0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x88,0x0C,0x08,0x00,0x00,0x00 ,
//  227  0x20,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x20,0x20,0x00 ,/*"三",14*/
//  228  
//  229  0x00,0x00,0xFC,0x44,0xBC,0x04,0x00,0x00,0xFE,0xC0,0x00,0x00,0x00,0x00,0x00,0x00 ,
//  230  0x3F,0x08,0x59,0x2E,0x10,0x0E,0x01,0x03,0x0C,0x30,0x00,0x00 ,/*"队",15*/
//  231 };
//  232 
//  233 //======================================================
//  234 // 128X64I液晶底层驱动[8X16]字体库
//  235 // 设计者: powerint
//  236 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  237 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  238 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  239 const uint8_t F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  240 {
//  241   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//  0
//  242   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//! 1
//  243   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//" 2
//  244   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//# 3
//  245   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$ 4
//  246   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//% 5
//  247   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//& 6
//  248   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//' 7
//  249   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//( 8
//  250   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//) 9
//  251   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//* 10
//  252   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+ 11
//  253   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//, 12
//  254   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//- 13
//  255   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//. 14
//  256   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,/// 15
//  257   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//0 16
//  258   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//1 17
//  259   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//2 18
//  260   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//3 19
//  261   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//4 20
//  262   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//5 21
//  263   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//6 22
//  264   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//7 23
//  265   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//8 24
//  266   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//9 25
//  267   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//: 26
//  268   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//; 27
//  269   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//< 28
//  270   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//= 29
//  271   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//> 30
//  272   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//? 31
//  273   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@ 32
//  274   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A 33
//  275   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B 34
//  276   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C 35
//  277   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D 36
//  278   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E 37
//  279   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F 38
//  280   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G 39
//  281   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H 40
//  282   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I 41
//  283   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J 42
//  284   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K 43
//  285   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L 44
//  286   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M 45
//  287   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N 46
//  288   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O 47
//  289   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P 48
//  290   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q 49
//  291   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R 50
//  292   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S 51
//  293   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T 52
//  294   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U 53
//  295   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V 54
//  296   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W 55
//  297   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X 56
//  298   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y 57
//  299   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z 58
//  300   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[ 59
//  301   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\ 60
//  302   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//] 61
//  303   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^ 62
//  304   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_ 63
//  305   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//` 64
//  306   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a 65
//  307   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b 66
//  308   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c 67
//  309   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d 68
//  310   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e 69
//  311   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f 70
//  312   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g 71
//  313   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h 72
//  314   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i 73
//  315   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j 74
//  316   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k 75
//  317   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l 76
//  318   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m 77
//  319   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n 78
//  320   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o 79
//  321   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p 80
//  322   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q 81
//  323   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r 82
//  324   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s 83
//  325   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t 84
//  326   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u 85
//  327   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v 86
//  328   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w 87
//  329   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x 88
//  330   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y 89
//  331   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z 90
//  332   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{ 91
//  333   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//| 92
//  334   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//} 93
//  335   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~ 94
//  336   
//  337 };
//  338 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  339 uint8_t lanzhou96x64[768] = {
lanzhou96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 96, 32, 32, 32
        DC8 160, 160, 160, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 96, 96, 96, 96, 224, 112, 112, 96, 96, 240, 112, 96, 96, 96
        DC8 96, 96, 96, 0, 224, 224, 96, 96, 96, 96, 96, 112, 112, 112, 96, 96
        DC8 96, 96, 96, 96, 224, 224, 224, 128, 128, 128, 128, 240, 240, 128
        DC8 128, 128, 128, 128, 128, 128, 0, 0, 48, 48, 48, 48, 48, 48, 176
        DC8 240, 112, 48, 224, 248, 124, 30, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 1, 3, 135, 143, 207, 255, 254, 254, 252, 252, 240, 224, 128, 0, 0
        DC8 0, 0, 0, 0, 0, 63, 0, 255, 0, 0, 8, 14, 31, 58, 98, 194, 2, 2, 2, 0
        DC8 0, 3, 3, 248, 248, 248, 24, 24, 24, 252, 252, 24, 24, 24, 248, 248
        DC8 248, 3, 3, 255, 255, 49, 49, 49, 255, 255, 49, 49, 49, 49, 49, 255
        DC8 255, 0, 24, 24, 24, 24, 24, 30, 63, 255, 248, 24, 24, 255, 255, 0
        DC8 192, 128, 128, 128, 128, 224, 224, 224, 240, 248, 248, 252, 126
        DC8 127, 63, 63, 31, 15, 7, 7, 7, 15, 15, 15, 31, 31, 0, 0, 128, 176
        DC8 176, 191, 183, 179, 179, 179, 191, 191, 179, 179, 191, 191, 179
        DC8 179, 179, 183, 191, 176, 176, 128, 128, 191, 191, 191, 177, 177
        DC8 177, 191, 191, 177, 177, 177, 191, 191, 191, 128, 128, 135, 135
        DC8 134, 134, 134, 191, 191, 182, 182, 182, 182, 182, 183, 183, 176
        DC8 176, 184, 184, 128, 136, 152, 184, 191, 191, 128, 128, 31, 63, 112
        DC8 239, 223, 159, 127, 255, 255, 255, 255, 255, 239, 227, 192, 128, 0
        DC8 128, 0, 128, 192, 192, 64, 0, 224, 248, 30, 0, 0, 0, 0, 241, 241, 1
        DC8 1, 1, 1, 1, 1, 1, 1, 129, 65, 33, 17, 17, 17, 33, 65, 129, 1, 1
        DC8 241, 241, 97, 225, 129, 1, 1, 1, 1, 1, 241, 241, 1, 241, 241, 49
        DC8 49, 49, 97, 193, 129, 1, 1, 49, 49, 49, 49, 49, 49, 49, 49, 241
        DC8 241, 113, 1, 241, 241, 49, 49, 49, 49, 241, 241, 241, 0, 0, 0, 0, 3
        DC8 3, 7, 14, 28, 28, 25, 27, 27, 27, 27, 27, 27, 27, 9, 13, 4, 6, 3, 3
        DC8 1, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 255, 255, 8, 8
        DC8 8, 8, 8, 8, 8, 255, 255, 0, 255, 255, 0, 1, 7, 30, 120, 224, 128, 0
        DC8 255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 129, 255, 126, 0, 128, 192
        DC8 224, 240, 56, 30, 7, 3, 1, 0, 0, 255, 255, 0, 0, 0, 0, 255, 255
        DC8 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 12, 12, 12, 12, 12, 12, 0, 15
        DC8 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 15, 15, 0, 0, 0, 0, 0, 1, 7, 6
        DC8 15, 15, 0, 15, 15, 12, 12, 12, 6, 3, 1, 0, 0, 14, 15, 15, 13, 12
        DC8 12, 12, 12, 12, 12, 12, 0, 15, 15, 12, 12, 12, 12, 15, 15, 15, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0
//  340   /*
//  341   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  342   0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  343   0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  344   0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  345   0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  346   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  347   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  348   0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  349   0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  350   0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  351   0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  352   0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  353   0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  354   0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  355   0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  356   0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  357   0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  358   0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  359   0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  360   0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  361   0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  362   0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  363   0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  364   0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  365   0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  366   0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  367   0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  368   0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  369   0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  370   0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  371   0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  372   0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  373   0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  374   0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  375   0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  376   0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  377   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  378   0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  379   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  380   0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  381   0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  382   0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  383   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  384   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  385   0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  386   0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  387   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  388   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00, */
//  389   
//  390   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  391   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  392   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  393   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  394   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  395   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  396   0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x60,0x20,0x20,0x20,0xA0,0xA0,
//  397   0xA0,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  398   0x00,0x00,0x60,0x60,0x60,0x60,0xE0,0x70,0x70,0x60,0x60,0xF0,0x70,0x60,0x60,0x60,
//  399   0x60,0x60,0x60,0x00,0xE0,0xE0,0x60,0x60,0x60,0x60,0x60,0x70,0x70,0x70,0x60,0x60,
//  400   0x60,0x60,0x60,0x60,0xE0,0xE0,0xE0,0x80,0x80,0x80,0x80,0xF0,0xF0,0x80,0x80,0x80,
//  401   0x80,0x80,0x80,0x80,0x00,0x00,0x30,0x30,0x30,0x30,0x30,0x30,0xB0,0xF0,0x70,0x30,
//  402   0xE0,0xF8,0x7C,0x1E,0x07,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
//  403   0x01,0x03,0x87,0x8F,0xCF,0xFF,0xFE,0xFE,0xFC,0xFC,0xF0,0xE0,0x80,0x00,0x00,0x00,
//  404   0x00,0x00,0x00,0x00,0x3F,0x00,0xFF,0x00,0x00,0x08,0x0E,0x1F,0x3A,0x62,0xC2,0x02,
//  405   0x02,0x02,0x00,0x00,0x03,0x03,0xF8,0xF8,0xF8,0x18,0x18,0x18,0xFC,0xFC,0x18,0x18,
//  406   0x18,0xF8,0xF8,0xF8,0x03,0x03,0xFF,0xFF,0x31,0x31,0x31,0xFF,0xFF,0x31,0x31,0x31,
//  407   0x31,0x31,0xFF,0xFF,0x00,0x18,0x18,0x18,0x18,0x18,0x1E,0x3F,0xFF,0xF8,0x18,0x18,
//  408   0xFF,0xFF,0x00,0xC0,0x80,0x80,0x80,0x80,0xE0,0xE0,0xE0,0xF0,0xF8,0xF8,0xFC,0x7E,
//  409   0x7F,0x3F,0x3F,0x1F,0x0F,0x07,0x07,0x07,0x0F,0x0F,0x0F,0x1F,0x1F,0x00,0x00,0x80,
//  410   0xB0,0xB0,0xBF,0xB7,0xB3,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xBF,0xBF,0xB3,0xB3,0xB3,
//  411   0xB7,0xBF,0xB0,0xB0,0x80,0x80,0xBF,0xBF,0xBF,0xB1,0xB1,0xB1,0xBF,0xBF,0xB1,0xB1,
//  412   0xB1,0xBF,0xBF,0xBF,0x80,0x80,0x87,0x87,0x86,0x86,0x86,0xBF,0xBF,0xB6,0xB6,0xB6,
//  413   0xB6,0xB6,0xB7,0xB7,0xB0,0xB0,0xB8,0xB8,0x80,0x88,0x98,0xB8,0xBF,0xBF,0x80,0x80,
//  414   0x1F,0x3F,0x70,0xEF,0xDF,0x9F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xE3,0xC0,0x80,
//  415   0x00,0x80,0x00,0x80,0xC0,0xC0,0x40,0x00,0xE0,0xF8,0x1E,0x00,0x00,0x00,0x00,0xF1,
//  416   0xF1,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x81,0x41,0x21,0x11,0x11,0x11,0x21,
//  417   0x41,0x81,0x01,0x01,0xF1,0xF1,0x61,0xE1,0x81,0x01,0x01,0x01,0x01,0x01,0xF1,0xF1,
//  418   0x01,0xF1,0xF1,0x31,0x31,0x31,0x61,0xC1,0x81,0x01,0x01,0x31,0x31,0x31,0x31,0x31,
//  419   0x31,0x31,0x31,0xF1,0xF1,0x71,0x01,0xF1,0xF1,0x31,0x31,0x31,0x31,0xF1,0xF1,0xF1,
//  420   0x00,0x00,0x00,0x00,0x03,0x03,0x07,0x0E,0x1C,0x1C,0x19,0x1B,0x1B,0x1B,0x1B,0x1B,
//  421   0x1B,0x1B,0x09,0x0D,0x04,0x06,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//  422   0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x08,0x08,0x08,0x08,0x08,0x08,
//  423   0x08,0xFF,0xFF,0x00,0xFF,0xFF,0x00,0x01,0x07,0x1E,0x78,0xE0,0x80,0x00,0xFF,0xFF,
//  424   0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x81,0xFF,0x7E,0x00,0x80,0xC0,0xE0,0xF0,
//  425   0x38,0x1E,0x07,0x03,0x01,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,
//  426   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  427   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,
//  428   0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
//  429   0x00,0x0F,0x0F,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x06,0x0F,0x0F,
//  430   0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x06,0x03,0x01,0x00,0x00,0x0E,0x0F,0x0F,0x0D,0x0C,
//  431   0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x0F,0x0F,0x0C,0x0C,0x0C,0x0C,0x0F,0x0F,0x0F,
//  432   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  433   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  434   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  435   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  436   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  437   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  438   
//  439 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  440 const uint8_t LIBLOGO60x58[480] = {
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  441   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  442   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  443   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  444   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  445   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  446   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  447   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  448   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  449   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  450   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  451   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  452   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  453   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  454   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  455   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  456   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  457   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  458   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  459   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  460   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  461   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  462   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  463   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  464   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  465   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  466   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  467   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  468   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  469   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  470   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  471 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  472 uint8_t LANDZO_LOGO[300] ={
LANDZO_LOGO:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 96, 48, 16, 24, 8, 4, 20, 16
        DC8 26, 24, 24, 28, 28, 28, 28, 60, 60, 60, 60, 124, 124, 252, 252, 248
        DC8 248, 240, 240, 224, 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 192, 240, 248, 126, 31, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 143, 255, 255, 255, 255, 255
        DC8 255, 254, 252, 248, 224, 128, 0, 0, 0, 240, 255, 255, 255, 7, 0
        DC8 248, 248, 240, 240, 224, 224, 224, 192, 192, 192, 192, 192, 192
        DC8 192, 192, 192, 192, 192, 192, 192, 224, 224, 224, 240, 240, 248
        DC8 248, 252, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
        DC8 255, 255, 248, 0, 0, 15, 255, 255, 255, 248, 192, 15, 127, 255, 255
        DC8 255, 255, 255, 255, 255, 255, 255, 255, 63, 31, 15, 7, 3, 3, 1, 1
        DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 3, 3, 7, 3, 0
        DC8 0, 0, 0, 3, 15, 31, 127, 254, 252, 241, 231, 207, 159, 63, 127, 255
        DC8 255, 255, 255, 252, 240, 224, 224, 192, 128, 128, 128, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 1, 3, 3, 7, 15, 15, 30, 30, 28, 57, 57, 59, 115, 115
        DC8 119, 103, 103, 103, 103, 103, 103, 39, 39, 54, 54, 22, 18, 10, 10
        DC8 4, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  473   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x60,0x30,0x10,0x18,0x08,
//  474   0x04,0x14,0x10,0x1A,0x18,0x18,0x1C,0x1C,0x1C,0x1C,0x3C,0x3C,0x3C,0x3C,0x7C,0x7C,
//  475   0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xE0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
//  476   0x00,0x00,0x00,0x00,0x00,0xC0,0xF0,0xF8,0x7E,0x1F,0x07,0x03,0x00,0x00,0x00,0x00,
//  477   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  478   0x00,0x00,0x00,0x01,0x01,0x03,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,
//  479   0xE0,0x80,0x00,0x00,0x00,0xF0,0xFF,0xFF,0xFF,0x07,0x00,0xF8,0xF8,0xF0,0xF0,0xE0,
//  480   0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xE0,
//  481   0xE0,0xE0,0xF0,0xF0,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
//  482   0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xF8,0xC0,0x0F,0x7F,0xFF,
//  483   0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x03,0x01,
//  484   0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  485   0x01,0x01,0x01,0x03,0x03,0x07,0x03,0x00,0x00,0x00,0x00,0x03,0x0F,0x1F,0x7F,0xFE,
//  486   0xFC,0xF1,0xE7,0xCF,0x9F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0xF0,0xE0,0xE0,0xC0,
//  487   0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  488   0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  489   0x00,0x00,0x01,0x03,0x03,0x07,0x0F,0x0F,0x1E,0x1E,0x1C,0x39,0x39,0x3B,0x73,0x73,
//  490   0x77,0x67,0x67,0x67,0x67,0x67,0x67,0x27,0x27,0x36,0x36,0x16,0x12,0x0A,0x0A,0x04,
//  491   0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//  492 };
//  493 
//  494 /*************************************************************************
//  495 *                           蓝宙电子工作室
//  496 *
//  497 *  函数名称：Dly_ms
//  498 *  功能说明：延时函数
//  499 *  参数说明： ms
//  500 *  函数返回：无
//  501 *  修改时间：2014-9-13
//  502 *  备    注：
//  503 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  504 void Dly_ms(uint16_t ms)
//  505 {
//  506   uint16_t ii,jj;
//  507   if (ms<1) ms=1;
Dly_ms:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??Dly_ms_0
        MOVS     R0,#+1
//  508   ms = ms*12 ;
??Dly_ms_0:
        MOVS     R1,#+12
        SMULBB   R0,R0,R1
//  509   for(ii=0;ii<ms;ii++)
        MOVS     R1,#+0
        B.N      ??Dly_ms_1
//  510     for(jj=0;jj<1335;jj++);  //16MHz--1ms
??Dly_ms_2:
        ADDS     R2,R2,#+1
??Dly_ms_3:
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        MOVW     R3,#+1335
        CMP      R2,R3
        BLT.N    ??Dly_ms_2
        ADDS     R1,R1,#+1
??Dly_ms_1:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R1,R0
        BCS.N    ??Dly_ms_4
        MOVS     R2,#+0
        B.N      ??Dly_ms_3
//  511   //   for(jj=0;jj<4006;jj++);  //48MHz--1ms
//  512   //for(jj=0;jj<5341;jj++);    //64MHz--1ms
//  513 }
??Dly_ms_4:
        BX       LR               ;; return
//  514 
//  515 /*************************************************************************
//  516 *                           蓝宙电子工作室
//  517 *
//  518 *  函数名称：OLED_WrDat
//  519 *  功能说明：写数据函数
//  520 *  参数说明： data
//  521 *  函数返回：无
//  522 *  修改时间：2014-9-13
//  523 *  备    注：
//  524 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  525 void OLED_WrDat(uint8_t data)
//  526 {
//  527   uint8_t i=8;
OLED_WrDat:
        MOVS     R1,#+8
//  528   
//  529   OLED_DC=1;
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8  ;; 0x43fe104c
        STR      R2,[R3, #+0]
//  530   OLED_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrDat_0
//  531   while(i--)
//  532   {
//  533     if(data&0x80){OLED_SDA=1;}
//  534     else{OLED_SDA=0;}
??OLED_WrDat_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_2  ;; 0x43fe1044
        STR      R2,[R3, #+0]
//  535     OLED_SCL=1;
??OLED_WrDat_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  536     asm("nop");
        nop
//  537     OLED_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  538     data<<=1;
        LSLS     R0,R0,#+1
??OLED_WrDat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrDat_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrDat_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8_2  ;; 0x43fe1044
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrDat_2
//  539   }
//  540 }
??OLED_WrDat_3:
        BX       LR               ;; return
//  541 
//  542 /*************************************************************************
//  543 *                           蓝宙电子工作室
//  544 *
//  545 *  函数名称：OLED_Wr6Dat
//  546 *  功能说明：写数6位据函数
//  547 *  参数说明： data
//  548 *  函数返回：无
//  549 *  修改时间：2014-9-13
//  550 *  备    注：
//  551 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  552 void OLED_Wr6Dat(uint8_t data)
//  553 {
//  554   uint8_t i=6;
OLED_Wr6Dat:
        MOVS     R1,#+6
//  555   
//  556   OLED_DC=1;
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8  ;; 0x43fe104c
        STR      R2,[R3, #+0]
//  557   OLED_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
        B.N      ??OLED_Wr6Dat_0
//  558   while(i--)
//  559   {
//  560     if(data&0x80){OLED_SDA=1;}
//  561     else{OLED_SDA=0;}
??OLED_Wr6Dat_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_2  ;; 0x43fe1044
        STR      R2,[R3, #+0]
//  562     OLED_SCL=1;
??OLED_Wr6Dat_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  563     asm("nop");
        nop
//  564     OLED_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  565     data<<=1;
        LSLS     R0,R0,#+1
??OLED_Wr6Dat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_Wr6Dat_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_Wr6Dat_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8_2  ;; 0x43fe1044
        STR      R2,[R3, #+0]
        B.N      ??OLED_Wr6Dat_2
//  566   }
//  567 }
??OLED_Wr6Dat_3:
        BX       LR               ;; return
//  568 
//  569 /*************************************************************************
//  570 *                           蓝宙电子工作室
//  571 *
//  572 *  函数名称：OLED_WrCmd
//  573 *  功能说明：写数命令函数
//  574 *  参数说明： cmd
//  575 *  函数返回：无
//  576 *  修改时间：2014-9-13
//  577 *  备    注：
//  578 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  579 void OLED_WrCmd(uint8_t cmd)
//  580 {
//  581   uint8_t i=8;
OLED_WrCmd:
        MOVS     R1,#+8
//  582 
//  583   OLED_DC=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8  ;; 0x43fe104c
        STR      R2,[R3, #+0]
//  584   OLED_SCL=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrCmd_0
//  585 
//  586   while(i--)
//  587   {
//  588     if(cmd&0x80){OLED_SDA=1;}
//  589     else{OLED_SDA=0;}
??OLED_WrCmd_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_2  ;; 0x43fe1044
        STR      R2,[R3, #+0]
//  590     OLED_SCL=1;
??OLED_WrCmd_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  591     asm("nop");
        nop
//  592 
//  593     OLED_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable8_1  ;; 0x43fe1040
        STR      R2,[R3, #+0]
//  594     cmd<<=1;
        LSLS     R0,R0,#+1
??OLED_WrCmd_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_WrCmd_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_WrCmd_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable8_2  ;; 0x43fe1044
        STR      R2,[R3, #+0]
        B.N      ??OLED_WrCmd_2
//  595   }
//  596   
//  597 }
??OLED_WrCmd_3:
        BX       LR               ;; return
//  598 
//  599 /*************************************************************************
//  600 *                           蓝宙电子工作室
//  601 *
//  602 *  函数名称：OLED_Set_Pos
//  603 *  功能说明：设置位置函数
//  604 *  参数说明： x
//  605 *             y
//  606 *  函数返回：无
//  607 *  修改时间：2014-9-13
//  608 *  备    注：
//  609 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  610 void OLED_Set_Pos(uint8_t x, uint8_t y)
//  611 {
OLED_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  612   OLED_WrCmd(0xb0+y);
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  613   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  614   OLED_WrCmd((x&0x0f)|0x01);
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  615 }
        POP      {R4,PC}          ;; return
//  616 
//  617 /*************************************************************************
//  618 *                           蓝宙电子工作室
//  619 *
//  620 *  函数名称：OLED_Fill
//  621 *  功能说明：填充函数
//  622 *  参数说明： bmp_data   
//  623 *  函数返回：无
//  624 *  修改时间：2014-9-13
//  625 *  备    注：
//  626 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  627 void OLED_Fill(uint8_t bmp_data)
//  628 {
OLED_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  629   uint8_t y,x;
//  630   
//  631   for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??OLED_Fill_0
//  632   {
//  633     OLED_WrCmd(0xb0+y);
//  634     OLED_WrCmd(0x01);
//  635     OLED_WrCmd(0x10);
//  636     for(x=0;x<X_WIDTH;x++)
//  637       OLED_WrDat(bmp_data);
??OLED_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??OLED_Fill_1
        ADDS     R5,R5,#+1
??OLED_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??OLED_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R6,#+0
        B.N      ??OLED_Fill_2
//  638   }
//  639 }
??OLED_Fill_3:
        POP      {R4-R6,PC}       ;; return
//  640 
//  641 /*************************************************************************
//  642 *                           蓝宙电子工作室
//  643 *
//  644 *  函数名称：OLED_CLS
//  645 *  功能说明：清除函数
//  646 *  参数说明： 无 
//  647 *  函数返回：无
//  648 *  修改时间：2014-9-13
//  649 *  备    注：
//  650 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  651 void OLED_CLS(void)
//  652 {
OLED_CLS:
        PUSH     {R3-R5,LR}
//  653   uint8_t y,x;
//  654   for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??OLED_CLS_0
//  655   {
//  656     OLED_WrCmd(0xb0+y);
//  657     OLED_WrCmd(0x01);
//  658     OLED_WrCmd(0x10);
//  659     for(x=0;x<X_WIDTH;x++)
//  660       OLED_WrDat(0);
??OLED_CLS_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??OLED_CLS_1
        ADDS     R4,R4,#+1
??OLED_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??OLED_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R5,#+0
        B.N      ??OLED_CLS_2
//  661   }
//  662 }
??OLED_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return
//  663 
//  664 /*************************************************************************
//  665 *                           蓝宙电子工作室
//  666 *
//  667 *  函数名称：OLED_DLY_ms
//  668 *  功能说明：延时函数
//  669 *  参数说明：ms
//  670 *  函数返回：无
//  671 *  修改时间：2014-9-13
//  672 *  备    注：
//  673 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  674 void OLED_DLY_ms(uint16_t ms)
//  675 {
OLED_DLY_ms:
        B.N      ??OLED_DLY_ms_0
//  676   uint16_t a;
//  677   while(ms)
//  678   {
//  679     a=16000;
??OLED_DLY_ms_1:
        MOV      R1,#+16000
//  680     while(a--);
??OLED_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
        CMP      R2,#+0
        BNE.N    ??OLED_DLY_ms_2
//  681     ms--;
        SUBS     R0,R0,#+1
//  682   }
??OLED_DLY_ms_0:
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        CMP      R0,#+0
        BNE.N    ??OLED_DLY_ms_1
//  683   return;
        BX       LR               ;; return
//  684 }
//  685 
//  686 /*************************************************************************
//  687 *                           蓝宙电子工作室
//  688 *
//  689 *  函数名称：OLED_Init
//  690 *  功能说明：初始化函数
//  691 *  参数说明：无
//  692 *  函数返回：无
//  693 *  修改时间：2014-9-13
//  694 *  备    注：
//  695 *************************************************************************/
//  696  extern GPIO_InitTypeDef gpio_init_struct;

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  697 void OLED_Init(void)
//  698 {
OLED_Init:
        PUSH     {R7,LR}
//  699 //  gpio_init (PTE1, GPO,HIGH);
//  700 //  gpio_init (PTE3, GPO,HIGH);
//  701 //  gpio_init (PTE2, GPO,LOW);
//  702 //  gpio_init (PTE4, GPO,HIGH);
//  703 //  gpio_init (PTE5, GPO,HIGH );
//  704   
//  705   
//  706   gpio_init_struct.GPIO_PTx = PTC;
        LDR.W    R0,??DataTable8_3  ;; 0x400ff080
        LDR.W    R1,??DataTable8_4
        STR      R0,[R1, #+0]
//  707   gpio_init_struct.GPIO_Pins = GPIO_Pin16|GPIO_Pin17|GPIO_Pin18|GPIO_Pin19|GPIO_Pin14;
        MOVS     R0,#+999424
        LDR.W    R1,??DataTable8_4
        STR      R0,[R1, #+4]
//  708   gpio_init_struct.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable8_4
        STRB     R0,[R1, #+12]
//  709   gpio_init_struct.GPIO_Output = OUTPUT_L;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable8_4
        STRB     R0,[R1, #+13]
//  710  // gpio_init_struct.GPIO_PinControl = PORT_PCR_DSE_MASK;
//  711   LPLD_GPIO_Init(gpio_init_struct);
        LDR.W    R1,??DataTable8_4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//  712   
//  713   OLED_SCL=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable8_1  ;; 0x43fe1040
        STR      R0,[R1, #+0]
//  714   OLED_CS = 0 ; ///使能信号端，拉低时正常使用
        MOVS     R0,#+0
        LDR.W    R1,??DataTable8_5  ;; 0x43fe1038
        STR      R0,[R1, #+0]
//  715   OLED_RST=0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable8_6  ;; 0x43fe1048
        STR      R0,[R1, #+0]
//  716   OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  717   OLED_RST=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable8_6  ;; 0x43fe1048
        STR      R0,[R1, #+0]
//  718   
//  719   OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  720   OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  721   OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  722   OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  723   OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  724   OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  725   OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  726   OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  727   OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  728   OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  729   OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  730   OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  731   OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  732   OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  733   OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  734   OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  735   OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  736   OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  737   OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  738   OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  739   OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  740   OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  741   OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  742   OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  743   OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  744   OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  745   OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  746   OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  747   OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  748   OLED_Set_Pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  749   
//  750    OLED_Fill(0x00);//黑屏 
        MOVS     R0,#+0
        BL       OLED_Fill
//  751    //OLED_DLY_ms(100); 
//  752    OLED_Print_Str(5,0,"  青岛理工大学");  //汉字字符串显示
        LDR.W    R2,??DataTable8_7
        MOVS     R1,#+0
        MOVS     R0,#+5
        BL       OLED_Print_Str
//  753    OLED_Print_Str(5,2,"   Freescale ");  //汉字字符串显示
        LDR.W    R2,??DataTable8_8
        MOVS     R1,#+2
        MOVS     R0,#+5
        BL       OLED_Print_Str
//  754    OLED_Print_Str(5,4,"   智能车竞赛 ");  //汉字字符串显示
        LDR.W    R2,??DataTable8_9
        MOVS     R1,#+4
        MOVS     R0,#+5
        BL       OLED_Print_Str
//  755    OLED_Print_Str(5,6,"   摄像头一队 ");  //汉字字符串显示
        LDR.W    R2,??DataTable8_10
        MOVS     R1,#+6
        MOVS     R0,#+5
        BL       OLED_Print_Str
//  756    OLED_DLY_ms(1000); 
        MOV      R0,#+1000
        BL       OLED_DLY_ms
//  757    OLED_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       OLED_Fill
//  758 }
        POP      {R0,PC}          ;; return
//  759 
//  760 /*************************************************************************
//  761 *                           蓝宙电子工作室
//  762 *
//  763 * 函数名： void OLED_PutPixel(uint8_t x,uint8_t y)
//  764 * 功能描述：绘制一个点（x,y）
//  765 * 参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  766 * 返回：无
//  767 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  768 void OLED_PutPixel(uint8_t x,uint8_t y)
//  769 {
OLED_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  770   uint8_t data1;  //data1当前点的数据
//  771   
//  772   OLED_Set_Pos(x,y);
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  773   data1 = 0x01<<(y%8);
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
//  774   OLED_WrCmd(0xb0+(y>>3));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  775   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrCmd
//  776   OLED_WrCmd((x&0x0f)|0x00);
        ANDS     R0,R4,#0xF
        BL       OLED_WrCmd
//  777   OLED_WrDat(data1);
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  778 }
        POP      {R4-R6,PC}       ;; return
//  779 /*************************************************************************
//  780 *                           蓝宙电子工作室
//  781 *
//  782 * 函数名： void OLED_Rectangle(uint8_t x1,uint8_t y1,
//  783                    uint8_t x2,uint8_t y2,uint8_t color,uint8_t gif)
//  784 * 功能描述：绘制一个实心矩形
//  785 * 参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  786       其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  787 * 返回：无
//  788 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  789 void OLED_Rectangle(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,uint8_t gif)
//  790 {
OLED_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
//  791   uint8_t n;
//  792   
//  793   OLED_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  794   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        LDR      R4,[SP, #+32]
        B.N      ??OLED_Rectangle_0
//  795   {
//  796     OLED_WrDat(0x01<<(y1%8));
??OLED_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  797     if(gif == 1) 	
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_2
//  798       OLED_DLY_ms(50);
        MOVS     R0,#+50
        BL       OLED_DLY_ms
//  799   }
??OLED_Rectangle_2:
        ADDS     R9,R9,#+1
??OLED_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??OLED_Rectangle_1
//  800   OLED_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
//  801   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??OLED_Rectangle_3
//  802   {
//  803     OLED_WrDat(0x01<<(y2%8));
??OLED_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_WrDat
//  804     if(gif == 1) 	
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??OLED_Rectangle_5
//  805       OLED_DLY_ms(5);
        MOVS     R0,#+5
        BL       OLED_DLY_ms
//  806   }
??OLED_Rectangle_5:
        ADDS     R9,R9,#+1
??OLED_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??OLED_Rectangle_4
//  807   
//  808 }
        POP      {R0,R4-R9,PC}    ;; return
//  809 /*************************************************************************
//  810 *                           蓝宙电子工作室
//  811 *
//  812 //函数名：LCD_P6x8Str(uint8_t x,uint8_t y,uint8_t *p)
//  813 //功能描述：写入一组标准ASCII字符串
//  814 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  815 //返回：无
//  816 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  817 void OLED_P6x8Str(uint8_t x,uint8_t y,uint8_t ch[])
//  818 {
OLED_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  819   uint8_t c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P6x8Str_0
//  820   while (ch[j]!='\0')
//  821   {
//  822     c =ch[j]-32;
//  823     if(x>126){x=0;y++;}
//  824     OLED_Set_Pos(x,y);
//  825     for(i=0;i<6;i++)
//  826       OLED_WrDat(F6x8[c][i]);
??OLED_P6x8Str_1:
        LDR.W    R0,??DataTable8_11
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??OLED_P6x8Str_1
//  827     x+=6;
        ADDS     R4,R4,#+6
//  828     j++;
        ADDS     R9,R9,#+1
??OLED_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??OLED_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P6x8Str_2
//  829   }
//  830 }
??OLED_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  831 /*************************************************************************
//  832 *                           蓝宙电子工作室
//  833 *
//  834 * 函数名：LCD_P8x16Str(uint8_t x,uint8_t y,uint8_t *p)
//  835 * 功能描述：写入一组标准ASCII字符串
//  836 * 参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  837 * 返回：无
//  838 *************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  839 void OLED_P8x16Str(uint8_t x,uint8_t y,uint8_t ch[])
//  840 {
OLED_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  841   uint8_t c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??OLED_P8x16Str_0
//  842   
//  843   while (ch[j]!='\0')
//  844   {
//  845     c =ch[j]-32;
//  846     if(x>120){x=0;y++;}
//  847     OLED_Set_Pos(x,y);
//  848     for(i=0;i<8;i++)
//  849       OLED_WrDat(F8X16[c*16+i]);
//  850     OLED_Set_Pos(x,y+1);
//  851     for(i=0;i<8;i++)
//  852       OLED_WrDat(F8X16[c*16+i+8]);
??OLED_P8x16Str_1:
        LDR.W    R0,??DataTable8_12
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_1
//  853     x+=8;
        ADDS     R4,R4,#+8
//  854     j++;
        ADDS     R9,R9,#+1
??OLED_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??OLED_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??OLED_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_5
??OLED_P8x16Str_6:
        LDR.N    R0,??DataTable8_12
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
??OLED_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??OLED_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R8,#+0
        B.N      ??OLED_P8x16Str_2
//  855   }
//  856 }
??OLED_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  857 
//  858 /*********************************************************** 
//  859 * 函数功能：显示14X16字体
//  860 * 函数名称：OLED_P14x16Str
//  861 * 入口参数：x :   行位置
//  862 *           y :  列位置
//  863 *          ch ： 字体数组
//  864 * 出口参数：无 
//  865 * 修改时间: 2014-08-18
//  866 * 备 注： 
//  867 ***********************************************************/
//  868 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  869 void OLED_P14x16Str(uint8_t x,uint8_t y,uint8_t ch[])
//  870 {
OLED_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
//  871   uint8_t wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
//  872   uint16_t adder=1;
        MOVS     R8,#+1
        B.N      ??OLED_P14x16Str_0
//  873   
//  874   while(ch[ii] != '\0')
//  875   {
//  876     wm = 0;
//  877     adder = 1;
//  878     while(F14x16_Idx[wm] > 127)
//  879     {
//  880       if(F14x16_Idx[wm] == ch[ii])
//  881       {
//  882         if(F14x16_Idx[wm + 1] == ch[ii + 1])
//  883         {
//  884           adder = wm * 14;
//  885           break;
//  886         }
//  887       }
//  888       wm += 2;
//  889     }
//  890     if(x>118){x=0;y++;}
//  891     OLED_Set_Pos(x , y);
//  892     if(adder != 1)// 显示汉字
//  893     {
//  894       OLED_Set_Pos(x , y);
//  895       for(wm = 0;wm < 14;wm++)
//  896       {
//  897         OLED_WrDat(F14x16[adder]);
//  898         adder += 1;
//  899       }
//  900       OLED_Set_Pos(x,y + 1);
//  901       for(wm = 0;wm < 14;wm++)
//  902       {
//  903         OLED_WrDat(F14x16[adder]);
//  904         adder += 1;
//  905       }
//  906     }
//  907     else			  //显示空白字符
//  908     {
//  909       ii += 1;
//  910       OLED_Set_Pos(x,y);
//  911       for(wm = 0;wm < 16;wm++)
//  912       {
//  913         OLED_WrDat(0);
//  914       }
//  915       OLED_Set_Pos(x,y + 1);
//  916       for(wm = 0;wm < 16;wm++)
//  917       {
//  918         OLED_WrDat(0);
??OLED_P14x16Str_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
//  919       }
        ADDS     R9,R9,#+1
??OLED_P14x16Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??OLED_P14x16Str_1
//  920     }
//  921     x += 14;
??OLED_P14x16Str_3:
        ADDS     R6,R6,#+14
//  922     ii += 2;
        ADDS     R7,R7,#+2
??OLED_P14x16Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??OLED_P14x16Str_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??OLED_P14x16Str_5
??OLED_P14x16Str_6:
        ADDS     R9,R9,#+2
??OLED_P14x16Str_5:
        LDR.N    R0,??DataTable8_13
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??OLED_P14x16Str_7
        LDR.N    R0,??DataTable8_13
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_6
        LDR.N    R0,??DataTable8_13
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??OLED_P14x16Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+14
        SMULBB   R8,R9,R0
??OLED_P14x16Str_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??OLED_P14x16Str_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??OLED_P14x16Str_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        CMP      R8,#+1
        BEQ.N    ??OLED_P14x16Str_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P14x16Str_10
??OLED_P14x16Str_11:
        LDR.N    R0,??DataTable8_14
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??OLED_P14x16Str_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BLT.N    ??OLED_P14x16Str_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
??OLED_P14x16Str_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BGE.N    ??OLED_P14x16Str_3
        LDR.N    R0,??DataTable8_14
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        LDRB     R0,[R8, R0]
        BL       OLED_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??OLED_P14x16Str_12
??OLED_P14x16Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P14x16Str_13
??OLED_P14x16Str_14:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R9,R9,#+1
??OLED_P14x16Str_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??OLED_P14x16Str_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOVS     R9,#+0
        B.N      ??OLED_P14x16Str_2
//  923   }
//  924 }
??OLED_P14x16Str_4:
        POP      {R0,R4-R9,PC}    ;; return
//  925 
//  926 /*********************************************************** 
//  927 * 函数功能：数字转换成ACSII
//  928 * 入口参数：hex :   需要显示的数
//  929 *           Print : 转换后的数组指针
//  930 * 出口参数：无 
//  931 * 修改时间: 2014-08-18
//  932 * 备 注： 
//  933 ***********************************************************/
//  934 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  935 void OLED_HEXACSII(uint16_t hex,uint8_t* Print)
//  936 {
OLED_HEXACSII:
        PUSH     {R4}
//  937   uint8_t hexcheck ;
//  938   uint8_t TEMP ;
//  939   TEMP = 6 ;
        MOVS     R3,#+6
//  940   Print[TEMP ]='\0';
        MOVS     R2,#+0
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        STRB     R2,[R3, R1]
        B.N      ??OLED_HEXACSII_0
//  941   while(TEMP)
//  942   {
//  943     TEMP -- ;
??OLED_HEXACSII_1:
        SUBS     R3,R3,#+1
//  944     hexcheck  =  hex%10 ;
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R2,#+10
        SDIV     R4,R0,R2
        MLS      R2,R2,R4,R0
//  945     hex   /=10 ;
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        MOVS     R4,#+10
        SDIV     R0,R0,R4
//  946     Print[TEMP ]  = hexcheck + 0x30 ;
        ADDS     R2,R2,#+48
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        STRB     R2,[R3, R1]
//  947   }
??OLED_HEXACSII_0:
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        CMP      R3,#+0
        BNE.N    ??OLED_HEXACSII_1
//  948   
//  949 }
        POP      {R4}
        BX       LR               ;; return
//  950 
//  951 /*********************************************************** 
//  952 * 函数名称：OLED_Print_Num
//  953 * 函数功能：数字显示
//  954 * 入口参数：x : 角度显示字符
//  955 *           y : 加速度显示字符
//  956 *          num: 显示的数字
//  957 * 出口参数：无 
//  958 * 修改时间: 2014-08-18
//  959 * 备 注： 
//  960 ***********************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  961 void OLED_Print_Num(uint8_t x, uint8_t y, uint16_t num)
//  962 {
OLED_Print_Num:
        PUSH     {R2-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
//  963   uint8_t *ch1,ch[7];
//  964   uint8_t ii=0;
        MOVS     R6,#+0
//  965   
//  966   OLED_HEXACSII(num,ch);
        ADD      R1,SP,#+0
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        BL       OLED_HEXACSII
        B.N      ??OLED_Print_Num_0
//  967   
//  968   while(ch[ii]==0x30)
//  969   {
//  970       ii++;
??OLED_Print_Num_1:
        ADDS     R6,R6,#+1
//  971   }
??OLED_Print_Num_0:
        ADD      R0,SP,#+0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LDRB     R0,[R6, R0]
        CMP      R0,#+48
        BEQ.N    ??OLED_Print_Num_1
//  972   
//  973   ch1 =&ch[ii];
        ADD      R0,SP,#+0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        ADDS     R6,R6,R0
        B.N      ??OLED_Print_Num_2
//  974   
//  975   while(*ch1 != '\0')
//  976   {
//  977       OLED_P8x16Str(x, y, ch1);	//显示数字
??OLED_Print_Num_3:
        MOVS     R2,R6
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
//  978       x += 8;
        ADDS     R4,R4,#+8
//  979      ch1++;
        ADDS     R6,R6,#+1
//  980   }
??OLED_Print_Num_2:
        LDRB     R0,[R6, #+0]
        CMP      R0,#+0
        BNE.N    ??OLED_Print_Num_3
//  981 }
        POP      {R0,R1,R4-R6,PC}  ;; return
//  982 
//  983 /*********************************************************** 
//  984 * 函数名称：OLED_Print_Str
//  985 * 函数功能：字符显示
//  986 * 入口参数：x : 位置
//  987 *           y : 位置
//  988 *          ch: 显示的字符串数组
//  989 * 出口参数：无 
//  990 * 修改时间: 2014-08-18
//  991 * 备 注： 
//  992 ***********************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  993 void OLED_Print_Str(uint8_t x, uint8_t y, uint8_t ch[])
//  994 {
OLED_Print_Str:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  995   uint8_t ch2[3];
//  996   uint8_t ii=0;
        MOVS     R7,#+0
        B.N      ??OLED_Print_Str_0
//  997   while(ch[ii] != '\0')
//  998   {
//  999     if(ch[ii] > 127)
// 1000     {
// 1001       ch2[0] = ch[ii];
??OLED_Print_Str_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
// 1002       ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
// 1003       ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
// 1004       OLED_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P14x16Str
// 1005       x += 14;
        ADDS     R4,R4,#+14
// 1006       ii += 2;
        ADDS     R7,R7,#+2
// 1007     }
??OLED_Print_Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??OLED_Print_Str_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??OLED_Print_Str_1
// 1008     else
// 1009     {
// 1010       ch2[0] = ch[ii];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
// 1011       ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
// 1012       OLED_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_P8x16Str
// 1013       x += 8;
        ADDS     R4,R4,#+8
// 1014       ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??OLED_Print_Str_0
// 1015     }
// 1016   }
// 1017 }
??OLED_Print_Str_2:
        POP      {R0,R4-R7,PC}    ;; return
// 1018 
// 1019 /*********************************************************** 
// 1020 * 函数名： void Draw_BMP(uint8_t x,uint8_t y)
// 1021 * 功能描述：显示BMP图片128×64
// 1022 * 参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1023 * 返回：无
// 1024 ***********************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1025 void Draw_BMP(uint8_t x0,uint8_t y0,uint8_t x1,uint8_t y1,uint8_t bmp[])
// 1026 {
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
// 1027   uint16_t ii=0;
        MOVS     R7,#+0
// 1028   uint8_t x,y;
// 1029   
// 1030   if(y1%8==0) y=y1/8;
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
// 1031   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
// 1032   for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        LDR      R8,[SP, #+32]
        B.N      ??Draw_BMP_2
// 1033   {
// 1034     OLED_Set_Pos(x0,y);
// 1035     for(x=x0;x<x1;x++)
// 1036     {
// 1037       OLED_WrDat(bmp[ii++]);
??Draw_BMP_3:
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        LDRB     R0,[R7, R8]
        BL       OLED_WrDat
        ADDS     R7,R7,#+1
// 1038     }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
// 1039   }
// 1040 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return
// 1041 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1042 void Draw_LibLogo(void)
// 1043 {
Draw_LibLogo:
        PUSH     {R4-R6,LR}
// 1044   uint16_t ii=0;
        MOVS     R4,#+0
// 1045   uint8_t x,y;
// 1046   
// 1047   for(y=0;y<8;y++)
        MOVS     R6,#+0
        B.N      ??Draw_LibLogo_0
// 1048   {
// 1049     OLED_Set_Pos(34,y);
// 1050     for(x=34;x<94;x++)
// 1051     {
// 1052       OLED_WrDat(LIBLOGO60x58[ii++]);
??Draw_LibLogo_1:
        LDR.N    R0,??DataTable8_15
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1053     }
        ADDS     R5,R5,#+1
??Draw_LibLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+94
        BLT.N    ??Draw_LibLogo_1
        ADDS     R6,R6,#+1
??Draw_LibLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LibLogo_3
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+34
        BL       OLED_Set_Pos
        MOVS     R5,#+34
        B.N      ??Draw_LibLogo_2
// 1054   }
// 1055 }
??Draw_LibLogo_3:
        POP      {R4-R6,PC}       ;; return
// 1056 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1057 void Draw_Landzo(void)
// 1058 {
Draw_Landzo:
        PUSH     {R4-R6,LR}
// 1059   uint16_t ii=0;
        MOVS     R4,#+0
// 1060   uint8_t x,y;
// 1061   
// 1062   for(y=2;y<8;y++)
        MOVS     R6,#+2
        B.N      ??Draw_Landzo_0
// 1063   {
// 1064     OLED_Set_Pos(40,y);
// 1065     for(x=40;x<90;x++)
// 1066     {
// 1067       OLED_WrDat(LANDZO_LOGO[ii++]);
??Draw_Landzo_1:
        LDR.N    R0,??DataTable8_16
        UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
        LDRB     R0,[R4, R0]
        BL       OLED_WrDat
        ADDS     R4,R4,#+1
// 1068     }
        ADDS     R5,R5,#+1
??Draw_Landzo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+90
        BLT.N    ??Draw_Landzo_1
        ADDS     R6,R6,#+1
??Draw_Landzo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_Landzo_3
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+40
        BL       OLED_Set_Pos
        MOVS     R5,#+40
        B.N      ??Draw_Landzo_2
// 1069   }
// 1070 }
??Draw_Landzo_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8:
        DC32     0x43fe104c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_1:
        DC32     0x43fe1040

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_2:
        DC32     0x43fe1044

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_3:
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_4:
        DC32     gpio_init_struct

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_5:
        DC32     0x43fe1038

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_6:
        DC32     0x43fe1048

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_7:
        DC32     ?_0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_8:
        DC32     ?_1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_9:
        DC32     ?_2

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_10:
        DC32     ?_3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_11:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_12:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_13:
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_14:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_15:
        DC32     LIBLOGO60x58

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable8_16:
        DC32     LANDZO_LOGO

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 1071 
// 
// 1 068 bytes in section .data
// 3 100 bytes in section .rodata
// 2 162 bytes in section .text
// 
// 2 162 bytes of CODE  memory
// 3 100 bytes of CONST memory
// 1 068 bytes of DATA  memory
//
//Errors: none
//Warnings: none
